function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import convertRTL from 'rtl-css-js';
import { getFlushedStyles as getBaseFlushedStyles, getStyleElements, isObject } from 'aesthetic-utils';
import TestAesthetic from './TestAesthetic';
import { GLOBAL_STYLE_NAME } from './constants';
export { TestAesthetic };
export function registerTestTheme(aesthetic) {
  aesthetic.registerTheme('default', {
    color: 'black',
    unit: 8
  }, function (_ref) {
    var unit = _ref.unit;
    return {
      '@global': {
        body: {
          padding: unit
        }
      }
    };
  });
  aesthetic.extendTheme('light', 'default', {});
  aesthetic.extendTheme('dark', 'default', {});
}
export function cleanupStyleElements() {
  getStyleElements().forEach(function (style) {
    style.remove();
  });
}
export function getFlushedStyles(namespace) {
  return getBaseFlushedStyles(getStyleElements(namespace));
}
export function convertDirection(value, dir) {
  if (dir !== 'rtl') {
    return value;
  }

  if (Array.isArray(value)) {
    return value.map(function (object) {
      return convertDirection(object, dir);
    });
  }

  if (!isObject(value)) {
    return value;
  }

  var props = {};
  var nested = {};
  Object.keys(value).forEach(function (key) {
    var prop = value[key];

    if (isObject(prop) || Array.isArray(prop)) {
      nested[key] = convertDirection(prop, dir);
    } else {
      props[key] = prop;
    }
  });
  return _extends({}, convertRTL(props), {}, nested);
}
export function renderAndExpect(aesthetic, styleSheet, expectedStyles, _ref2) {
  if (expectedStyles === void 0) {
    expectedStyles = {};
  }

  var dir = _ref2.dir,
      _ref2$global = _ref2.global,
      global = _ref2$global === void 0 ? false : _ref2$global;
  var name = global ? GLOBAL_STYLE_NAME : aesthetic.constructor.name.replace('Aesthetic', '').toLowerCase();
  var options = {
    name: name,
    dir: dir
  };
  var convertedSheet = global ? aesthetic.syntax.convertGlobalSheet(styleSheet, options).toObject() : aesthetic.syntax.convertStyleSheet(styleSheet, options).toObject();
  var parsedSheet = aesthetic.parseStyleSheet(convertedSheet, name);
  var className = aesthetic.transformStyles(Object.values(parsedSheet), options);
  aesthetic.flushStyles(name);
  expect(convertedSheet).toEqual(convertDirection(expectedStyles, dir));
  expect(getFlushedStyles()).toMatchSnapshot();
  expect(className).toMatchSnapshot();
}
export var TEST_CLASS_NAMES = {
  footer: '.footer',
  header: '.header'
};
export var TEST_STATEMENT = {
  footer: {
    color: 'blue'
  },
  header: {
    color: 'red'
  }
};
export var DIRECTIONS = ['ltr', 'rtl'];
export var FONT_ROBOTO = {
  fontFamily: 'Roboto',
  fontStyle: 'normal',
  fontWeight: 'normal',
  local: ['Robo'],
  srcPaths: ['fonts/Roboto.woff2', 'fonts/Roboto.ttf']
};
export var FONT_ROBOTO_FLAT_SRC = {
  fontFamily: 'Roboto',
  fontStyle: 'normal',
  fontWeight: 'normal',
  src: "local('Robo'), url('fonts/Roboto.woff2') format('woff2'), url('fonts/Roboto.ttf') format('truetype')"
};
export var FONT_CIRCULAR_MULTIPLE = [{
  fontFamily: 'Circular',
  fontStyle: 'normal',
  fontWeight: 'normal',
  srcPaths: ['fonts/Circular.woff2']
}, {
  fontFamily: 'Circular',
  fontStyle: 'italic',
  fontWeight: 'normal',
  srcPaths: ['fonts/Circular-Italic.woff2']
}, {
  fontFamily: 'Circular',
  fontStyle: 'normal',
  fontWeight: 300,
  srcPaths: ['fonts/Circular-Light.woff2']
}, {
  fontFamily: 'Circular',
  fontStyle: 'normal',
  fontWeight: 700,
  srcPaths: ['fonts/Circular-Bold.woff2']
}];
export var FONT_CIRCULAR_MULTIPLE_FLAT_SRC = [{
  fontFamily: 'Circular',
  fontStyle: 'normal',
  fontWeight: 'normal',
  src: "url('fonts/Circular.woff2') format('woff2')"
}, {
  fontFamily: 'Circular',
  fontStyle: 'italic',
  fontWeight: 'normal',
  src: "url('fonts/Circular-Italic.woff2') format('woff2')"
}, {
  fontFamily: 'Circular',
  fontStyle: 'normal',
  fontWeight: 300,
  src: "url('fonts/Circular-Light.woff2') format('woff2')"
}, {
  fontFamily: 'Circular',
  fontStyle: 'normal',
  fontWeight: 700,
  src: "url('fonts/Circular-Bold.woff2') format('woff2')"
}];
export var KEYFRAME_FADE = {
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
};
export var KEYFRAME_SLIDE_PERCENT = {
  '0%': {
    left: '0%'
  },
  '50%': {
    left: '50%'
  },
  '100%': {
    left: '100%'
  }
};
export var SYNTAX_UNIFIED_LOCAL = {
  button: {
    margin: 0,
    padding: '6px 12px',
    border: '1px solid #2e6da4',
    borderRadius: 4,
    display: 'inline-block',
    cursor: 'pointer',
    fontFamily: 'Roboto',
    fontWeight: 'normal',
    lineHeight: 'normal',
    whiteSpace: 'nowrap',
    textDecoration: 'none',
    textAlign: 'left',
    backgroundColor: '#337ab7',
    verticalAlign: 'middle',
    color: 'rgba(0, 0, 0, 0)',
    animationName: 'fade',
    animationDuration: '.3s',
    ':hover': {
      backgroundColor: '#286090',
      borderColor: '#204d74'
    },
    '::before': {
      content: '"â˜…"',
      display: 'inline-block',
      verticalAlign: 'middle',
      marginRight: 5
    }
  }
};
export var SYNTAX_UNIFIED_GLOBAL_FULL = {
  '@font-face': {
    Roboto: FONT_ROBOTO
  },
  '@keyframes': {
    fade: KEYFRAME_FADE
  }
};
export var SYNTAX_UNIFIED_LOCAL_FULL = {
  button: _extends({}, SYNTAX_UNIFIED_LOCAL.button, {
    '@media': {
      '(max-width: 600px)': {
        padding: '4px 8px'
      }
    }
  })
};
export var SYNTAX_ATTRIBUTE = {
  attr: {
    display: 'block',
    '[disabled]': {
      opacity: 0.5
    }
  }
};
export var SYNTAX_CHARSET = {
  '@charset': 'utf8'
};
export var SYNTAX_DESCENDANT = {
  list: {
    margin: 0,
    padding: 0,
    '@selectors': {
      '> li': {
        listStyle: 'bullet'
      }
    }
  }
};
export var SYNTAX_IMPORT = {
  '@import': 'url("./some/path.css")'
};
export var SYNTAX_IMPORT_MULTIPLE = {
  '@import': ['url("./some/path.css")', 'url("./another/path.css")']
};
export var SYNTAX_FALLBACKS = {
  fallback: {
    background: 'linear-gradient(...)',
    display: 'flex',
    '@fallbacks': {
      background: 'red',
      display: ['block', 'inline-block'],
      color: 'blue'
    }
  }
};
export var SYNTAX_FONT_FACE = {
  '@font-face': {
    Roboto: [FONT_ROBOTO]
  }
};
export var SYNTAX_FONT_FACE_MULTIPLE = {
  '@font-face': {
    Circular: FONT_CIRCULAR_MULTIPLE
  }
};
export var SYNTAX_FONT_FACE_MIXED = {
  '@font-face': {
    Roboto: [FONT_ROBOTO],
    Circular: FONT_CIRCULAR_MULTIPLE
  }
};
export var SYNTAX_FONT_FACES_INLINE = {
  single: {
    fontFamily: FONT_ROBOTO
  },
  multiple: {
    fontFamily: [].concat(FONT_CIRCULAR_MULTIPLE, ['OtherFont', FONT_ROBOTO])
  }
};
export var SYNTAX_GLOBAL = {
  '@global': {
    body: {
      margin: 0
    },
    html: {
      height: '100%'
    },
    a: {
      color: 'red',
      ':hover': {
        color: 'darkred'
      },
      '@selectors': {
        ':focus': {
          color: 'lightred'
        }
      }
    },
    ul: {
      margin: 0,
      '@selectors': {
        '> li': {
          margin: 0
        }
      },
      '@media': {
        '(max-width: 500px)': {
          margin: 20
        }
      }
    }
  }
};
export var SYNTAX_KEYFRAMES = {
  '@keyframes': {
    fade: KEYFRAME_FADE
  }
};
export var SYNTAX_KEYFRAMES_PERCENT = {
  '@keyframes': {
    slide: KEYFRAME_SLIDE_PERCENT
  }
};
export var SYNTAX_KEYFRAMES_MIXED = {
  '@keyframes': {
    fade: KEYFRAME_FADE,
    slide: KEYFRAME_SLIDE_PERCENT
  }
};
export var SYNTAX_KEYFRAMES_INLINE = {
  single: {
    animationName: _extends({}, KEYFRAME_SLIDE_PERCENT, {
      name: 'slide'
    })
  },
  multiple: {
    animationName: [_extends({}, KEYFRAME_SLIDE_PERCENT, {
      name: 'slide'
    }), 'unknown', KEYFRAME_FADE]
  }
};
export var SYNTAX_MEDIA_QUERY = {
  media: {
    color: 'red',
    paddingLeft: 10,
    '@media': {
      '(min-width: 300px)': {
        color: 'blue',
        paddingLeft: 15
      },
      '(max-width: 1000px)': {
        color: 'green',
        paddingLeft: 20
      }
    }
  }
};
export var SYNTAX_MEDIA_QUERY_NESTED = {
  media: {
    color: 'red',
    '@media': {
      '(min-width: 300px)': {
        color: 'blue',
        '@media': {
          '(max-width: 1000px)': {
            color: 'green'
          }
        }
      }
    }
  }
};
export var SYNTAX_MULTI_SELECTOR = {
  multi: {
    cursor: 'pointer',
    '@selectors': {
      ':disabled, [disabled], > span': {
        cursor: 'default'
      }
    }
  }
};
export var SYNTAX_NAMESPACE = {
  '@namespace': 'url(http://www.w3.org/1999/xhtml)'
};
export var SYNTAX_PAGE = {
  '@page': {
    margin: '1cm',
    ':left': {
      margin: 0
    }
  }
};
export var SYNTAX_PROPERTIES = {
  props: {
    color: 'black',
    display: 'inline',
    marginRight: 10,
    padding: 0
  }
};
export var SYNTAX_PSEUDO = {
  pseudo: {
    position: 'fixed',
    ':hover': {
      position: 'static'
    },
    '::before': {
      position: 'absolute'
    }
  }
};
export var SYNTAX_SUPPORTS = {
  sup: {
    display: 'block',
    '@supports': {
      '(display: flex)': {
        display: 'flex'
      },
      'not (display: flex)': {
        float: 'left'
      }
    }
  }
};
export var SYNTAX_VIEWPORT = {
  '@viewport': {
    width: 'device-width',
    orientation: 'landscape'
  }
};
export var SYNTAX_RAW_CSS = {
  button: "\n    display: 'block';\n    font-size: 16px;\n    text-align: 'left';\n\n    &:hover {\n      color: 'red';\n    }\n\n    & {\n      vertical-align: 'middle';\n    }\n\n    @media (max-width: 600px) {\n      display: 'none';\n    }\n\n    @supports (display: flex) {\n      display: 'flex';\n    }\n  "
};