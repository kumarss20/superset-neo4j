function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { toObjectRecursive } from 'aesthetic-utils';
import Ruleset from './Ruleset';

var Sheet = function () {
  function Sheet(options) {
    if (options === void 0) {
      options = {};
    }

    _defineProperty(this, "atRules", {});

    _defineProperty(this, "classNames", {});

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "ruleSets", {});

    this.options = options;
  }

  var _proto = Sheet.prototype;

  _proto.addAtRule = function addAtRule(rule, value) {
    this.atRules[rule] = value;
    return this;
  };

  _proto.addClassName = function addClassName(selector, value) {
    this.classNames[selector] = value;
    return this;
  };

  _proto.addRuleset = function addRuleset(set) {
    this.ruleSets[set.selector] = set;
    return this;
  };

  _proto.createRuleset = function createRuleset(selector) {
    return new Ruleset(selector, this);
  };

  _proto.createSheet = function createSheet(options) {
    return new Sheet(options || this.options);
  };

  _proto.toObject = function toObject() {
    var _this = this;

    var atRules = {};
    var sets = {};
    Object.keys(this.atRules).forEach(function (key) {
      var value = _this.atRules[key];

      if (value instanceof Sheet || value instanceof Ruleset) {
        sets[key] = value;
      } else if (Array.isArray(value)) {
        atRules[key] = value.map(function (item) {
          return item instanceof Ruleset ? item.toObject() : item;
        });
      } else {
        atRules[key] = value;
      }
    });
    return _extends({}, atRules, {}, toObjectRecursive(sets), {}, toObjectRecursive(this.ruleSets));
  };

  return Sheet;
}();

export { Sheet as default };