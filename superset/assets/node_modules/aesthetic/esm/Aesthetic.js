function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import deepMerge from 'extend';
import uuid from 'uuid/v4';
import { isObject, stripClassPrefix } from 'aesthetic-utils';
import CacheManager from './CacheManager';
import Sheet from './Sheet';
import StyleSheetManager from './StyleSheetManager';
import UnifiedSyntax from './UnifiedSyntax';
import { GLOBAL_STYLE_NAME } from './constants';

var Aesthetic = function () {
  function Aesthetic(options) {
    if (options === void 0) {
      options = {};
    }

    _defineProperty(this, "globals", {});

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "parents", {});

    _defineProperty(this, "styles", {});

    _defineProperty(this, "syntax", new UnifiedSyntax());

    _defineProperty(this, "themes", {});

    _defineProperty(this, "cacheManager", new CacheManager());

    _defineProperty(this, "sheetManager", null);

    this.options = _extends({
      cxPropName: 'cx',
      extendable: false,
      passThemeProp: false,
      rtl: false,
      stylesPropName: 'styles',
      theme: 'default',
      themePropName: 'theme'
    }, options);
  }

  var _proto = Aesthetic.prototype;

  _proto.applyGlobalStyles = function applyGlobalStyles(baseOptions) {
    if (typeof document !== 'undefined') {
      document.documentElement.setAttribute('dir', this.options.rtl ? 'rtl' : 'ltr');
    }

    var options = this.getPreparedTransformOptions(_extends({}, baseOptions, {
      global: true,
      name: GLOBAL_STYLE_NAME
    }));
    delete options.dir;
    var cache = this.cacheManager.get(GLOBAL_STYLE_NAME, options);
    var globalDef = this.globals[options.theme];

    if (cache || !globalDef) {
      return this;
    }

    var globalSheet = globalDef(this.getTheme(options.theme));
    var parsedSheet = this.cacheManager.set(GLOBAL_STYLE_NAME, this.parseStyleSheet(this.syntax.convertGlobalSheet(globalSheet, options).toObject(), GLOBAL_STYLE_NAME), options);
    this.transformStyles(Object.values(parsedSheet), options);
    this.flushStyles(GLOBAL_STYLE_NAME);
    return this;
  };

  _proto.changeTheme = function changeTheme(themeName) {
    var oldTheme = this.options.theme;
    this.getTheme(themeName);
    this.options.theme = themeName;
    this.purgeStyles(GLOBAL_STYLE_NAME);
    this.cacheManager.clear(function (unit) {
      return unit.global === true && unit.theme === oldTheme;
    });
    this.applyGlobalStyles({
      theme: themeName
    });
    return this;
  };

  _proto.createStyleSheet = function createStyleSheet(styleName, baseOptions) {
    var options = this.getPreparedTransformOptions(baseOptions);
    var cache = this.cacheManager.get(styleName, options);

    if (cache) {
      return cache;
    }

    this.applyGlobalStyles(baseOptions);
    var nativeSheet = this.syntax.convertStyleSheet(this.getStyleSheet(styleName, options.theme), _extends({}, options, {
      name: styleName
    }));
    var parsedSheet = this.parseStyleSheet(nativeSheet.toObject(), styleName);
    return this.cacheManager.set(styleName, _extends({}, parsedSheet, {}, nativeSheet.classNames), options);
  };

  _proto.extendStyles = function extendStyles() {
    for (var _len = arguments.length, styleSheets = new Array(_len), _key = 0; _key < _len; _key++) {
      styleSheets[_key] = arguments[_key];
    }

    return function (theme) {
      var sheets = styleSheets.map(function (sheet) {
        return sheet(theme);
      });
      return deepMerge.apply(void 0, [true, {}].concat(sheets));
    };
  };

  _proto.extendTheme = function extendTheme(themeName, parentThemeName, theme, globalSheet) {
    if (globalSheet === void 0) {
      globalSheet = null;
    }

    return this.registerTheme(themeName, deepMerge(true, {}, this.getTheme(parentThemeName), theme), globalSheet || this.globals[parentThemeName]);
  };

  _proto.flushStyles = function flushStyles(styleName) {};

  _proto.getStyleSheet = function getStyleSheet(styleName, themeName) {
    var parentStyleName = this.parents[styleName];
    var styleDef = this.styles[styleName];
    var styleSheet = styleDef(this.getTheme(themeName || this.options.theme));

    if (parentStyleName) {
      return deepMerge(true, {}, this.getStyleSheet(parentStyleName, themeName), styleSheet);
    }

    return styleSheet;
  };

  _proto.getTheme = function getTheme(name) {
    var themeName = name || this.options.theme;
    var theme = this.themes[themeName];

    if ("production" !== process.env.NODE_ENV) {
      if (!theme || !isObject(theme)) {
        throw new Error("Theme \"" + themeName + "\" does not exist.");
      }
    }

    return theme;
  };

  _proto.isParsedBlock = function isParsedBlock(block) {
    return isObject(block);
  };

  _proto.parseStyleSheet = function parseStyleSheet(styleSheet, styleName) {
    return _extends({}, styleSheet);
  };

  _proto.purgeStyles = function purgeStyles(styleName) {};

  _proto.registerStyleSheet = function registerStyleSheet(styleName, styleSheet, extendFrom) {
    if (extendFrom) {
      if ("production" !== process.env.NODE_ENV) {
        if (!this.styles[extendFrom]) {
          throw new Error("Cannot extend from \"" + extendFrom + "\" as those styles do not exist.");
        } else if (extendFrom === styleName) {
          throw new Error('Cannot extend styles from itself.');
        }
      }

      this.parents[styleName] = extendFrom;
    }

    this.styles[styleName] = this.validateDefinition(styleName, styleSheet);
    return this;
  };

  _proto.registerTheme = function registerTheme(themeName, theme, globalSheet) {
    if (globalSheet === void 0) {
      globalSheet = null;
    }

    if ("production" !== process.env.NODE_ENV) {
      if (this.themes[themeName]) {
        throw new Error("Theme \"" + themeName + "\" already exists.");
      } else if (!isObject(theme)) {
        throw new TypeError("Theme \"" + themeName + "\" must be a style object.");
      }
    }

    this.themes[themeName] = theme;
    this.globals[themeName] = this.validateDefinition(themeName, globalSheet);
    return this;
  };

  _proto.transformStyles = function transformStyles(styles, baseOptions) {
    var _this = this;

    var options = this.getPreparedTransformOptions(baseOptions);
    var classNames = [];
    var nativeBlocks = [];
    var parsedBlocks = [];
    var inlineName = '';
    styles.forEach(function (style) {
      if (!style) {
        return;
      }

      if (typeof style === 'string') {
        classNames.push.apply(classNames, String(style).split(' ').map(function (s) {
          return stripClassPrefix(s).trim();
        }));
      } else if (isObject(style)) {
        if (_this.isParsedBlock(style)) {
          parsedBlocks.push(style);
        } else {
          nativeBlocks.push(style);
        }
      } else if ("production" !== process.env.NODE_ENV) {
        throw new Error('Unsupported style type to transform.');
      }
    });

    if (nativeBlocks.length > 0) {
      var nativeSheet = new Sheet(options);
      var counter = 0;
      inlineName = uuid();
      nativeBlocks.forEach(function (block) {
        nativeSheet.addRuleset(nativeSheet.createRuleset("inline-" + counter).addProperties(block));
        counter += 1;
      });
      parsedBlocks.push.apply(parsedBlocks, Object.values(this.parseStyleSheet(nativeSheet.toObject(), inlineName)));
    }

    if (parsedBlocks.length > 0) {
      classNames.push(this.transformToClassName(parsedBlocks));
    }

    if (inlineName) {
      this.flushStyles(inlineName);
    }

    return classNames.join(' ').trim();
  };

  _proto.getPreparedTransformOptions = function getPreparedTransformOptions(options) {
    if (options === void 0) {
      options = {};
    }

    var dir = this.options.rtl ? 'rtl' : 'ltr';
    return {
      dir: options.dir || dir,
      global: options.global || false,
      name: options.name || '',
      theme: options.theme || this.options.theme
    };
  };

  _proto.getStyleSheetManager = function getStyleSheetManager() {
    if (this.sheetManager) {
      return this.sheetManager;
    }

    this.sheetManager = new StyleSheetManager();
    return this.sheetManager;
  };

  _proto.validateDefinition = function validateDefinition(key, value) {
    if ("production" !== process.env.NODE_ENV) {
      if (value !== null && typeof value !== 'function') {
        throw new TypeError("Definition for \"" + key + "\" must be null or a function.");
      }
    }

    return value;
  };

  return Aesthetic;
}();

export { Aesthetic as default };