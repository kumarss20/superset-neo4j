import CSS from 'csstype';
import Aesthetic from './Aesthetic';
import TestAesthetic from './TestAesthetic';
import { FontFace, Direction, SheetMap, Keyframes } from './types';
export { TestAesthetic };
export interface TestTheme {
    color: string;
    unit: number;
}
export declare function registerTestTheme(aesthetic: Aesthetic<TestTheme, {}, {}>): void;
export declare function cleanupStyleElements(): void;
export declare function getFlushedStyles(namespace?: string): string;
export interface UnknownObject {
    [key: string]: unknown;
}
export declare function convertDirection(value: UnknownObject | UnknownObject[], dir: Direction): {};
export declare function renderAndExpect(aesthetic: Aesthetic<{}, {}, {}>, styleSheet: SheetMap<string | UnknownObject>, expectedStyles: UnknownObject | undefined, { dir, global, }: {
    dir: Direction;
    global?: boolean;
}): void;
export declare const TEST_CLASS_NAMES: {
    footer: string;
    header: string;
};
export declare const TEST_STATEMENT: {
    footer: {
        color: string;
    };
    header: {
        color: string;
    };
};
export declare const DIRECTIONS: Direction[];
export declare const FONT_ROBOTO: FontFace;
export declare const FONT_ROBOTO_FLAT_SRC: CSS.FontFace;
export declare const FONT_CIRCULAR_MULTIPLE: FontFace[];
export declare const FONT_CIRCULAR_MULTIPLE_FLAT_SRC: CSS.FontFace[];
export declare const KEYFRAME_FADE: Keyframes;
export declare const KEYFRAME_SLIDE_PERCENT: Keyframes;
export declare const SYNTAX_UNIFIED_LOCAL: {
    button: {
        margin: number;
        padding: string;
        border: string;
        borderRadius: number;
        display: string;
        cursor: string;
        fontFamily: string;
        fontWeight: string;
        lineHeight: string;
        whiteSpace: string;
        textDecoration: string;
        textAlign: string;
        backgroundColor: string;
        verticalAlign: string;
        color: string;
        animationName: string;
        animationDuration: string;
        ':hover': {
            backgroundColor: string;
            borderColor: string;
        };
        '::before': {
            content: string;
            display: string;
            verticalAlign: string;
            marginRight: number;
        };
    };
};
export declare const SYNTAX_UNIFIED_GLOBAL_FULL: {
    '@font-face': {
        Roboto: FontFace;
    };
    '@keyframes': {
        fade: Keyframes;
    };
};
export declare const SYNTAX_UNIFIED_LOCAL_FULL: {
    button: {
        '@media': {
            '(max-width: 600px)': {
                padding: string;
            };
        };
        margin: number;
        padding: string;
        border: string;
        borderRadius: number;
        display: string;
        cursor: string;
        fontFamily: string;
        fontWeight: string;
        lineHeight: string;
        whiteSpace: string;
        textDecoration: string;
        textAlign: string;
        backgroundColor: string;
        verticalAlign: string;
        color: string;
        animationName: string;
        animationDuration: string;
        ':hover': {
            backgroundColor: string;
            borderColor: string;
        };
        '::before': {
            content: string;
            display: string;
            verticalAlign: string;
            marginRight: number;
        };
    };
};
export declare const SYNTAX_ATTRIBUTE: {
    attr: {
        display: string;
        '[disabled]': {
            opacity: number;
        };
    };
};
export declare const SYNTAX_CHARSET: {
    '@charset': string;
};
export declare const SYNTAX_DESCENDANT: {
    list: {
        margin: number;
        padding: number;
        '@selectors': {
            '> li': {
                listStyle: string;
            };
        };
    };
};
export declare const SYNTAX_IMPORT: {
    '@import': string;
};
export declare const SYNTAX_IMPORT_MULTIPLE: {
    '@import': string[];
};
export declare const SYNTAX_FALLBACKS: {
    fallback: {
        background: string;
        display: string;
        '@fallbacks': {
            background: string;
            display: string[];
            color: string;
        };
    };
};
export declare const SYNTAX_FONT_FACE: {
    '@font-face': {
        Roboto: FontFace[];
    };
};
export declare const SYNTAX_FONT_FACE_MULTIPLE: {
    '@font-face': {
        Circular: FontFace[];
    };
};
export declare const SYNTAX_FONT_FACE_MIXED: {
    '@font-face': {
        Roboto: FontFace[];
        Circular: FontFace[];
    };
};
export declare const SYNTAX_FONT_FACES_INLINE: {
    single: {
        fontFamily: FontFace;
    };
    multiple: {
        fontFamily: (string | FontFace)[];
    };
};
export declare const SYNTAX_GLOBAL: {
    '@global': {
        body: {
            margin: number;
        };
        html: {
            height: string;
        };
        a: {
            color: string;
            ':hover': {
                color: string;
            };
            '@selectors': {
                ':focus': {
                    color: string;
                };
            };
        };
        ul: {
            margin: number;
            '@selectors': {
                '> li': {
                    margin: number;
                };
            };
            '@media': {
                '(max-width: 500px)': {
                    margin: number;
                };
            };
        };
    };
};
export declare const SYNTAX_KEYFRAMES: {
    '@keyframes': {
        fade: Keyframes;
    };
};
export declare const SYNTAX_KEYFRAMES_PERCENT: {
    '@keyframes': {
        slide: Keyframes;
    };
};
export declare const SYNTAX_KEYFRAMES_MIXED: {
    '@keyframes': {
        fade: Keyframes;
        slide: Keyframes;
    };
};
export declare const SYNTAX_KEYFRAMES_INLINE: {
    single: {
        animationName: {
            name: string;
            from?: import("./types").Block | undefined;
            to?: import("./types").Block | undefined;
        };
    };
    multiple: {
        animationName: (string | Keyframes)[];
    };
};
export declare const SYNTAX_MEDIA_QUERY: {
    media: {
        color: string;
        paddingLeft: number;
        '@media': {
            '(min-width: 300px)': {
                color: string;
                paddingLeft: number;
            };
            '(max-width: 1000px)': {
                color: string;
                paddingLeft: number;
            };
        };
    };
};
export declare const SYNTAX_MEDIA_QUERY_NESTED: {
    media: {
        color: string;
        '@media': {
            '(min-width: 300px)': {
                color: string;
                '@media': {
                    '(max-width: 1000px)': {
                        color: string;
                    };
                };
            };
        };
    };
};
export declare const SYNTAX_MULTI_SELECTOR: {
    multi: {
        cursor: string;
        '@selectors': {
            ':disabled, [disabled], > span': {
                cursor: string;
            };
        };
    };
};
export declare const SYNTAX_NAMESPACE: {
    '@namespace': string;
};
export declare const SYNTAX_PAGE: {
    '@page': {
        margin: string;
        ':left': {
            margin: number;
        };
    };
};
export declare const SYNTAX_PROPERTIES: {
    props: {
        color: string;
        display: string;
        marginRight: number;
        padding: number;
    };
};
export declare const SYNTAX_PSEUDO: {
    pseudo: {
        position: string;
        ':hover': {
            position: string;
        };
        '::before': {
            position: string;
        };
    };
};
export declare const SYNTAX_SUPPORTS: {
    sup: {
        display: string;
        '@supports': {
            '(display: flex)': {
                display: string;
            };
            'not (display: flex)': {
                float: "left";
            };
        };
    };
};
export declare const SYNTAX_VIEWPORT: {
    '@viewport': {
        width: string;
        orientation: string;
    };
};
export declare const SYNTAX_RAW_CSS: {
    button: string;
};
//# sourceMappingURL=testUtils.d.ts.map