import Ruleset from './Ruleset';
import Sheet from './Sheet';
import { ComponentBlock, FontFace, GlobalSheet, Keyframes, Properties, StyleSheet, ClassName, TransformOptions } from './types';
export declare const SELECTOR: RegExp;
export declare const CLASS_NAME: RegExp;
export declare type Handler = (...args: any[]) => void;
export default class UnifiedSyntax<NativeBlock extends object> {
    handlers: {
        [eventName: string]: Handler;
    };
    keyframesCount: number;
    constructor();
    /**
     * Convert at-rules within a global style sheet.
     */
    convertGlobalSheet(globalSheet: GlobalSheet, options: TransformOptions): Sheet<NativeBlock>;
    /**
     * Convert a mapping of unified rulesets to their native syntax.
     */
    convertStyleSheet(styleSheet: StyleSheet, options: TransformOptions): Sheet<NativeBlock>;
    /**
     * Convert a pseudo CSS declaration block to raw CSS using Stylis.
     * Emit the raw CSS so that adapters can inject it into the DOM.
     */
    convertRawCss(sheet: Sheet<NativeBlock>, selector: string, declaration: string): ClassName;
    /**
     * Convert a ruleset including local at-rules, blocks, and properties.
     */
    convertRuleset(unifiedRuleset: ComponentBlock, ruleset: Ruleset<NativeBlock>): Ruleset<NativeBlock>;
    /**
     * Convert a nested selector ruleset by emitting the appropriate name.
     */
    convertSelector(key: string, value: ComponentBlock, ruleset: Ruleset<NativeBlock>, inAtRule?: boolean): void;
    /**
     * Convert a unified syntax list of font face objects to rulesets.
     */
    convertFontFaces(fontFamily: string, faces: FontFace[], sheet: Sheet<NativeBlock>): void;
    /**
     * Convert a unified syntax keyframes object to a ruleset.
     */
    convertKeyframe(animationName: string, frames: Keyframes, sheet: Sheet<NativeBlock>): void;
    /**
     * Support keyframe objects within the `animationName` property.
     */
    handleAnimationName: (ruleset: Ruleset<NativeBlock>, value: string | Keyframes | (string | Keyframes)[] | undefined) => string | undefined;
    /**
     * Support font face objets within the `fontFamily` property.
     */
    handleFontFamily: (ruleset: Ruleset<NativeBlock>, value: string | FontFace | (string | FontFace)[] | undefined) => string | undefined;
    /**
     * Replace a `fontFamily` property with font face objects of the same name.
     */
    injectFontFaces<D>(value?: string, cache?: {
        [fontFamily: string]: D[];
    }): (string | D)[];
    /**
     * Replace a `animationName` property with keyframe objects of the same name.
     */
    injectKeyframes<D>(value?: string, cache?: {
        [animationName: string]: D;
    }): (string | D)[];
    /**
     * Execute the defined event listener with the arguments.
     */
    emit(eventName: 'attribute' | 'media' | 'pseudo' | 'selector' | 'support', args: [Ruleset<NativeBlock>, string, Ruleset<NativeBlock>]): unknown;
    emit(eventName: 'charset', args: [Sheet<NativeBlock>, string]): unknown;
    emit(eventName: 'css', args: [string, string]): unknown;
    emit(eventName: 'fallback', args: [Ruleset<NativeBlock>, keyof NativeBlock, unknown[]]): unknown;
    emit(eventName: 'font-face', args: [Sheet<NativeBlock>, Ruleset<NativeBlock>[], string, string[][]]): unknown;
    emit(eventName: 'global', args: [Sheet<NativeBlock>, string, Ruleset<NativeBlock>]): unknown;
    emit(eventName: 'import', args: [Sheet<NativeBlock>, string[]]): unknown;
    emit(eventName: 'keyframe', args: [Sheet<NativeBlock>, Ruleset<NativeBlock>, string]): unknown;
    emit(eventName: 'page' | 'viewport', args: [Sheet<NativeBlock>, Ruleset<NativeBlock>]): unknown;
    emit(eventName: 'property', args: [Ruleset<NativeBlock>, keyof NativeBlock, unknown]): unknown;
    emit(eventName: 'property:animationName', args: [Ruleset<NativeBlock>, Properties['animationName']]): unknown;
    emit(eventName: 'property:fontFamily', args: [Ruleset<NativeBlock>, Properties['fontFamily']]): unknown;
    /**
     * Delete an event listener.
     */
    off(eventName: string): this;
    /**
     * Register an event listener.
     */
    on(eventName: 'attribute' | 'pseudo' | 'selector' | 'support', callback: (ruleset: Ruleset<NativeBlock>, name: string, value: Ruleset<NativeBlock>) => void): this;
    on(eventName: 'charset', callback: (sheet: Sheet<NativeBlock>, charset: string) => void): this;
    on(eventName: 'css', callback: (css: string, className: string) => void): this;
    on(eventName: 'fallback', callback: (ruleset: Ruleset<NativeBlock>, name: keyof NativeBlock, values: unknown[]) => void): this;
    on(eventName: 'font-face', callback: (sheet: Sheet<NativeBlock>, fontFaces: Ruleset<NativeBlock>[], fontFamily: string, srcPaths: string[][]) => void): this;
    on(eventName: 'global', callback: (sheet: Sheet<NativeBlock>, selector: string, ruleset: Ruleset<NativeBlock>) => void): this;
    on(eventName: 'import', callback: (sheet: Sheet<NativeBlock>, paths: string[]) => void): this;
    on(eventName: 'keyframe', callback: (sheet: Sheet<NativeBlock>, keyframe: Ruleset<NativeBlock>, animationName: string) => void): this;
    on(eventName: 'media', callback: (ruleset: Ruleset<NativeBlock>, query: string, value: Ruleset<NativeBlock>) => void): this;
    on(eventName: 'page' | 'viewport', callback: (sheet: Sheet<NativeBlock>, ruleset: Ruleset<NativeBlock>) => void): this;
    on(eventName: 'property', callback: (ruleset: Ruleset<NativeBlock>, name: keyof NativeBlock, value: unknown) => void): this;
    on(eventName: 'property:animationName', callback: (ruleset: Ruleset<NativeBlock>, value: Properties['animationName']) => unknown): this;
    on(eventName: 'property:fontFamily', callback: (ruleset: Ruleset<NativeBlock>, value: Properties['fontFamily']) => unknown): this;
}
//# sourceMappingURL=UnifiedSyntax.d.ts.map