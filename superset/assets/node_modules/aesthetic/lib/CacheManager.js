"use strict";

exports.__esModule = true;
exports.default = void 0;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CacheManager = function () {
  function CacheManager() {
    _defineProperty(this, "cache", new Map());
  }

  var _proto = CacheManager.prototype;

  _proto.clear = function clear(filter) {
    var _this = this;

    if (filter) {
      this.cache.forEach(function (units, key) {
        _this.cache.set(key, units.filter(function (unit) {
          return !filter(unit);
        }));
      });
    } else {
      this.cache.clear();
    }

    return this;
  };

  _proto.compare = function compare(unit, tags) {
    return unit.dir === tags.dir && unit.global === tags.global && unit.theme === tags.theme;
  };

  _proto.get = function get(key, tags) {
    var _this2 = this;

    var units = this.cache.get(key);

    if (!units || units.length === 0) {
      return null;
    }

    var cache = units.find(function (unit) {
      return _this2.compare(unit, tags);
    });
    return cache ? cache.value : null;
  };

  _proto.set = function set(key, value, tags) {
    var units = this.cache.get(key) || [];
    units.push(_extends({}, tags, {
      value: value
    }));
    this.cache.set(key, units);
    return value;
  };

  return CacheManager;
}();

exports.default = CacheManager;