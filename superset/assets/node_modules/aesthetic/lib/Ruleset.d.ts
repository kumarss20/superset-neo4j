import Sheet from './Sheet';
import { CompoundProperties } from './types';
export default class Ruleset<Block extends object> {
    compoundProperties: Map<CompoundProperties, (string | Block)[]>;
    nested: Map<string, Ruleset<Block>>;
    parent: Ruleset<Block> | null;
    properties: Partial<Block>;
    root: Sheet<Block>;
    selector: string;
    constructor(selector: string, root: Sheet<Block>, parent?: Ruleset<Block> | null);
    addCompoundProperty(key: CompoundProperties, value: (string | Block)[]): this;
    addNested(selector: string, ruleset: Ruleset<Block>, merge?: boolean): this;
    addProperty<K extends keyof Block>(key: K, value: unknown): this;
    addProperties(properties: Partial<Block>): this;
    createRuleset(selector: string): Ruleset<Block>;
    merge(ruleset: Ruleset<Block>): this;
    toObject(): Block;
}
//# sourceMappingURL=Ruleset.d.ts.map