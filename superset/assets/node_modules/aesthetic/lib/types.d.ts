import CSS from 'csstype';
import { Omit } from 'utility-types';
export declare type StyleName = string;
export declare type ThemeName = string;
export declare type ClassName = string;
export declare type ClassNameTransformer<N extends object, P extends object | string> = (...styles: (undefined | false | ClassName | N | P)[]) => ClassName;
export declare type RawCss = string;
export declare type Direction = 'neutral' | 'ltr' | 'rtl';
export declare type ExpandCompoundProperty<B, T> = B | T | (B | T)[];
export declare type CompoundProperties = 'animationName' | 'fontFamily';
export declare type AtRule = '@charset' | '@font-face' | '@global' | '@import' | '@keyframes' | '@media' | '@page' | '@selectors' | '@supports' | '@viewport' | '@fallbacks';
export declare type Properties = Omit<CSS.Properties<string | number>, CompoundProperties> & {
    animationName?: ExpandCompoundProperty<CSS.AnimationNameProperty, Keyframes>;
    fontFamily?: ExpandCompoundProperty<CSS.FontFamilyProperty, FontFace>;
};
export declare type PropertiesFallback = CSS.PropertiesFallback<string | number>;
export declare type Pseudos = {
    [P in CSS.SimplePseudos]?: Block;
};
export declare type Attributes = {
    [A in CSS.HtmlAttributes]?: Block;
};
export declare type Block = Properties & Pseudos & Attributes;
export declare type StyleBlock = Block;
export declare type FontFace = CSS.FontFace & {
    local?: string[];
    srcPaths: string[];
};
export interface Keyframes {
    from?: Block;
    to?: Block;
    name?: string;
    [percent: string]: Block | string | undefined;
}
export interface SheetMap<T> {
    [selector: string]: T;
}
export declare type ComponentBlock = Block & {
    '@fallbacks'?: PropertiesFallback;
    '@media'?: {
        [mediaQuery: string]: Block;
    };
    '@selectors'?: {
        [selector: string]: Block;
    };
    '@supports'?: {
        [featureQuery: string]: Block;
    };
};
export declare type ComponentBlockNeverize<T> = T extends string ? string : {
    [K in keyof T]: K extends keyof ComponentBlock ? ComponentBlock[K] : never;
};
export declare type StyleSheet = SheetMap<ClassName | RawCss | ComponentBlock>;
export declare type StyleSheetNeverize<T> = {
    [K in keyof T]: ComponentBlockNeverize<T[K]>;
};
export declare type StyleSheetDefinition<Theme, T> = (theme: Theme) => T extends unknown ? StyleSheet : StyleSheet & StyleSheetNeverize<T>;
export interface GlobalSheet {
    '@charset'?: string;
    '@font-face'?: {
        [fontFamily: string]: FontFace | FontFace[];
    };
    '@global'?: {
        [selector: string]: Block;
    };
    '@import'?: string | string[];
    '@keyframes'?: {
        [animationName: string]: Keyframes;
    };
    '@page'?: Block;
    '@viewport'?: Block;
}
export declare type GlobalSheetNeverize<T> = {
    [K in keyof T]: K extends keyof GlobalSheet ? GlobalSheet[K] : never;
};
export declare type GlobalSheetDefinition<Theme, T> = ((theme: Theme) => GlobalSheet & GlobalSheetNeverize<T>) | null;
export interface AestheticOptions {
    cxPropName: string;
    extendable: boolean;
    passThemeProp: boolean;
    rtl: boolean;
    stylesPropName: string;
    theme: ThemeName;
    themePropName: string;
}
export interface TransformOptions {
    dir?: Direction;
    global?: boolean;
    name?: StyleName;
    theme?: ThemeName;
}
//# sourceMappingURL=types.d.ts.map