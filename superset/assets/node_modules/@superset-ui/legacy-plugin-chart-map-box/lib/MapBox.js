"use strict";exports.__esModule=!0,exports.default=exports.DEFAULT_POINT_RADIUS=exports.DEFAULT_MAX_ZOOM=void 0;var _react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_reactMapGl=_interopRequireDefault(require("react-map-gl")),_immutable=_interopRequireDefault(require("immutable")),_viewportMercatorProject=_interopRequireDefault(require("viewport-mercator-project")),_ScatterPlotGlowOverlay=_interopRequireDefault(require("./ScatterPlotGlowOverlay"));require("./MapBox.css");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}var NOOP=function(){},DEFAULT_MAX_ZOOM=16;exports.DEFAULT_MAX_ZOOM=DEFAULT_MAX_ZOOM;var DEFAULT_POINT_RADIUS=60;exports.DEFAULT_POINT_RADIUS=DEFAULT_POINT_RADIUS;var propTypes={width:_propTypes.default.number,height:_propTypes.default.number,aggregatorName:_propTypes.default.string,clusterer:_propTypes.default.object,globalOpacity:_propTypes.default.number,hasCustomMetric:_propTypes.default.bool,mapStyle:_propTypes.default.string,mapboxApiKey:_propTypes.default.string.isRequired,onViewportChange:_propTypes.default.func,pointRadius:_propTypes.default.number,pointRadiusUnit:_propTypes.default.string,renderWhileDragging:_propTypes.default.bool,rgb:_propTypes.default.array,bounds:_propTypes.default.array},defaultProps={width:400,height:400,globalOpacity:1,onViewportChange:NOOP,pointRadius:DEFAULT_POINT_RADIUS,pointRadiusUnit:"Pixels"},MapBox=/*#__PURE__*/function(a){function b(b){var c=a.call(this,b)||this;var d=c.props,e=d.width,f=d.height,g=d.bounds,h=new _viewportMercatorProject.default({width:e,height:f}).fitBounds(g),i=h.latitude,j=h.longitude,k=h.zoom;// Get a viewport that fits the given bounds, which all marks to be clustered.
// Derive lat, lon and zoom from this viewport. This is only done on initial
// render as the bounds don't update as we pan/zoom in the current design.
return c.state={viewport:{longitude:j,latitude:i,zoom:k}},c.handleViewportChange=c.handleViewportChange.bind(_assertThisInitialized(c)),c}_inheritsLoose(b,a);var c=b.prototype;return c.handleViewportChange=function handleViewportChange(a){this.setState({viewport:a});var b=this.props.onViewportChange;b(a)},c.render=function render(){var a=this.props,b=a.width,c=a.height,d=a.aggregatorName,e=a.clusterer,f=a.globalOpacity,g=a.mapStyle,h=a.mapboxApiKey,i=a.pointRadius,j=a.pointRadiusUnit,k=a.renderWhileDragging,l=a.rgb,m=a.hasCustomMetric,n=a.bounds,o=this.state.viewport,p=void 0!==o.isDragging&&o.isDragging,q=[n[0][0],n[0][1],n[1][0],n[1][1]],r=e.getClusters(q,Math.round(o.zoom));return _react.default.createElement(_reactMapGl.default,_extends({},o,{mapStyle:g,width:b,height:c,mapboxApiAccessToken:h,onViewportChange:this.handleViewportChange}),_react.default.createElement(_ScatterPlotGlowOverlay.default,_extends({},o,{isDragging:p,locations:_immutable.default.fromJS(r),dotRadius:i,pointRadiusUnit:j,rgb:l,globalOpacity:f,compositeOperation:"screen",renderWhileDragging:k,aggregation:m?d:null,lngLatAccessor:function lngLatAccessor(a){var b=a.get("geometry").get("coordinates");return[b.get(0),b.get(1)]}})))},b}(_react.default.Component);MapBox.propTypes=propTypes,MapBox.defaultProps=defaultProps;var _default=MapBox;exports.default=_default;