"use strict";exports.__esModule=!0,exports.default=void 0;var _immutable=_interopRequireDefault(require("immutable")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_reactMapGl=require("react-map-gl"),_geo=require("./utils/geo"),_roundDecimal=_interopRequireDefault(require("./utils/roundDecimal")),_luminanceFromRGB=_interopRequireDefault(require("./utils/luminanceFromRGB"));require("mapbox-gl/dist/mapbox-gl.css");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}var propTypes={aggregation:_propTypes.default.string,compositeOperation:_propTypes.default.string,dotRadius:_propTypes.default.number,lngLatAccessor:_propTypes.default.func,locations:_propTypes.default.instanceOf(_immutable.default.List).isRequired,pointRadiusUnit:_propTypes.default.string,renderWhileDragging:_propTypes.default.bool,rgb:_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number])),zoom:_propTypes.default.number},defaultProps={// Same as browser default.
compositeOperation:"source-over",dotRadius:4,lngLatAccessor:function lngLatAccessor(a){return[a.get(0),a.get(1)]},renderWhileDragging:!0},computeClusterLabel=function(a,b){var c=a.get("point_count");if(!b)return c;if("sum"===b||"min"===b||"max"===b)return a.get(b);var d=a.get("sum");if("mean"===b)return Math.round(100*(d/c))/100;var e=a.get("squaredSum"),f=e/c-Math.pow(d/c,2);if("var"===b)return Math.round(100*f)/100;// fallback to point_count, this really shouldn't happen
return"stdev"===b?Math.round(100*Math.sqrt(f))/100:c},ScatterPlotGlowOverlay=/*#__PURE__*/function(a){function b(b){var c;return c=a.call(this,b)||this,c.redraw=c.redraw.bind(_assertThisInitialized(c)),c}_inheritsLoose(b,a);var c=b.prototype;return c.drawText=function drawText(a,b,c){void 0===c&&(c={});var d=110,e=c,f=e.fontHeight,g=void 0===f?0:f,h=e.label,i=void 0===h?"":h,j=e.radius,k=void 0===j?0:j,l=e.rgb,m=void 0===l?[0,0,0]:l,n=e.shadow,o=1.8*k,p=(0,_luminanceFromRGB.default)(m[1],m[2],m[3]);a.globalCompositeOperation="source-over",a.fillStyle=p<=d?"white":"black",a.font=g+"px sans-serif",a.textAlign="center",a.textBaseline="middle",void 0!==n&&n&&(a.shadowBlur=15,a.shadowColor=p<=d?"black":"");var q=a.measureText(i).width;if(q>o){a.font=g/q*o+"px sans-serif"}var r=this.props.compositeOperation;a.fillText(i,b[0],b[1]),a.globalCompositeOperation=r,a.shadowBlur=0,a.shadowColor=""}// Modified: https://github.com/uber/react-map-gl/blob/master/overlays/scatterplot.react.js
,c.redraw=function redraw(a){var b=a.width,c=a.height,d=a.ctx,e=a.isDragging,f=a.project,g=this.props,h=g.aggregation,i=g.compositeOperation,j=g.dotRadius,k=g.lngLatAccessor,l=g.locations,m=g.pointRadiusUnit,n=g.renderWhileDragging,o=g.rgb,p=g.zoom,q=j,r=[];l.forEach(function(a,b){a.get("properties").get("cluster")&&(r[b]=computeClusterLabel(a.get("properties"),h))},this);var s=Math.max.apply(Math,r.filter(function(a){return!Number.isNaN(a)}));d.clearRect(0,0,b,c),d.globalCompositeOperation=i,(n||!e)&&l&&l.forEach(function(a,e){var g=f(k(a)),h=[(0,_roundDecimal.default)(g[0],1),(0,_roundDecimal.default)(g[1],1)];if(0<=h[0]+q&&h[0]-q<b&&0<=h[1]+q&&h[1]-q<c)if(d.beginPath(),a.get("properties").get("cluster")){var i=r[e],j=(0,_roundDecimal.default)(Math.pow(i/s,.5)*q,1),l=(0,_roundDecimal.default)(.5*j,1),n=h[0],t=h[1],u=d.createRadialGradient(n,t,j,n,t,0);u.addColorStop(1,"rgba("+o[1]+", "+o[2]+", "+o[3]+", 0.8)"),u.addColorStop(0,"rgba("+o[1]+", "+o[2]+", "+o[3]+", 0)"),d.arc(h[0],h[1],j,0,2*Math.PI),d.fillStyle=u,d.fill(),Number.isFinite(parseFloat(i))&&(1e4<=i?i=Math.round(i/1e3)+"k":1e3<=i&&(i=Math.round(i/100)/10+"k"),this.drawText(d,h,{fontHeight:l,label:i,radius:j,rgb:o,shadow:!0}))}else{var v,w=q/6,x=a.get("properties").get("radius"),y=a.get("properties").get("metric"),z=null===x?w:x;if(null!==x){var A=k(a)[1];"Kilometers"===m?(v=(0,_roundDecimal.default)(z,2)+"km",z=(0,_geo.kmToPixels)(z,A,p)):"Miles"===m&&(v=(0,_roundDecimal.default)(z,2)+"mi",z=(0,_geo.kmToPixels)(z*_geo.MILES_PER_KM,A,p))}null!==y&&(v=Number.isFinite(parseFloat(y))?(0,_roundDecimal.default)(y,2):y),z||(z=w),d.arc(h[0],h[1],(0,_roundDecimal.default)(z,1),0,2*Math.PI),d.fillStyle="rgb("+o[1]+", "+o[2]+", "+o[3]+")",d.fill(),void 0!==v&&this.drawText(d,h,{fontHeight:(0,_roundDecimal.default)(z,1),label:v,radius:z,rgb:o,shadow:!1})}},this)},c.render=function render(){return _react.default.createElement(_reactMapGl.CanvasOverlay,{redraw:this.redraw})},b}(_react.default.PureComponent);ScatterPlotGlowOverlay.propTypes=propTypes,ScatterPlotGlowOverlay.defaultProps=defaultProps;var _default=ScatterPlotGlowOverlay;exports.default=_default;