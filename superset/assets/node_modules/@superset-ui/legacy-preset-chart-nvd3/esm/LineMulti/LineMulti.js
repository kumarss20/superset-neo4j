function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */ /* eslint-disable sort-keys, react/require-default-props, react/forbid-prop-types */ /* eslint-disable promise/always-return, promise/catch-or-return */import d3 from"d3";import React from"react";import PropTypes from"prop-types";import{getExploreLongUrl}from"../vendor/superset/exploreUtils";import ReactNVD3 from"../ReactNVD3";import transformProps from"../transformProps";var propTypes={width:PropTypes.number,height:PropTypes.number,annotationData:PropTypes.object,datasource:PropTypes.object,formData:PropTypes.object,hooks:PropTypes.shape({onAddFilter:PropTypes.func,onError:PropTypes.func})},defaultProps={};function getJson(a){return new Promise(function(b,c){d3.json(a,function(a,d){a?c(a):b(d.data)})})}/*
 * Show multiple line charts
 *
 * This visualization works by fetching the data from each of the saved
 * charts, building the queryData data and passing it along to nvd3Vis.
 */var LineMulti=/*#__PURE__*/function(a){function b(b){var c;return c=a.call(this,b)||this,c.state={queryData:[]},c}_inheritsLoose(b,a);var c=b.prototype;return c.componentDidMount=function componentDidMount(){this.loadData(this.props)}// eslint-disable-next-line react/no-deprecated
,c.componentWillReceiveProps=function componentWillReceiveProps(a){this.loadData(a)},c.loadData=function loadData(a){var b=this,c=a.formData,d=a.queryData,e=d.data.slices,f=c.extraFilters,g=c.filters,h=c.lineCharts,i=c.lineCharts2,j=c.prefixMetricWithSliceName,k=c.timeRange;this.setState({queryData:[]});// fetch data from all the charts
var l=[].concat(e.axis1.map(function(a){return[1,a]}),e.axis2.map(function(a){return[2,a]})),m=l.map(function(a){var b=a[0],c=a[1],d=c.form_data,e=_extends({},c.form_data,{extra_filters:f||[],filters:(d.filters||[]).concat(g||[]),time_range:k});return getJson(getExploreLongUrl(e,"json")).then(function(a){return a.map(function(a){var d=a.key,f=a.values;return{key:j?c.slice_name+": "+d:d,type:e.viz_type,values:f,yAxis:b}})})});Promise.all(m).then(function(a){var c,e=_extends({},d);// add null values at the edges to fix multiChart bug when series with
// different x values use different y axes
if(e.data=(c=[]).concat.apply(c,a),h.length&&i.length){var f=1/0,g=-Infinity;e.data.forEach(function(a){f=Math.min.apply(Math,[f].concat(a.values.map(function(a){return a.x}))),g=Math.max.apply(Math,[g].concat(a.values.map(function(a){return a.x})))}),e.data.forEach(function(a){a.values.push({x:f,y:null}),a.values.push({x:g,y:null})})}b.setState({queryData:e})})},c.render=function render(){var a=this.state.queryData;return React.createElement(ReactNVD3,transformProps(_extends({},this.props,{queryData:a})))},b}(React.Component);LineMulti.propTypes=propTypes,LineMulti.defaultProps=defaultProps;export default LineMulti;