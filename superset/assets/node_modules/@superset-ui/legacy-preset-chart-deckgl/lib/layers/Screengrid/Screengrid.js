"use strict";exports.__esModule=!0,exports.getLayer=getLayer,exports.default=void 0;var _react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_deck=require("deck.gl"),_translation=require("@superset-ui/translation"),_AnimatableDeckGLContainer=_interopRequireDefault(require("../../AnimatableDeckGLContainer")),_time=require("../../utils/time"),_sandbox=_interopRequireDefault(require("../../utils/sandbox")),_common=require("../common"),_TooltipRow=_interopRequireDefault(require("../../TooltipRow"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}function getPoints(a){return a.map(function(a){return a.position})}function setTooltipContent(a){return _react.default.createElement("div",{className:"deckgl-tooltip"},_react.default.createElement(_TooltipRow.default,{label:(0,_translation.t)("Longitude and Latitude")+": ",value:a.object.position[0]+", "+a.object.position[1]}),_react.default.createElement(_TooltipRow.default,{label:(0,_translation.t)("Weight")+": ",value:""+a.object.weight}))}function getLayer(a,b,d,e,f,g,h){var i=a,j=i.color_picker,c=b.data.features.map(function(a){return _extends({},a,{color:[j.r,j.g,j.b,255*j.a]})});if(i.js_data_mutator){// Applying user defined data mutator if defined
var k=(0,_sandbox.default)(i.js_data_mutator);c=k(c)}// eslint-disable-next-line no-eq-null
// Passing a layer creator function instead of a layer since the
// layer needs to be regenerated at each render
return null!=h&&h.forEach(function(a){c=c.filter(a)}),new _deck.ScreenGridLayer(_extends({id:"screengrid-layer-"+i.slice_id,data:c,pickable:!0,cellSizePixels:i.grid_size,minColor:[j.r,j.g,j.b,0],maxColor:[j.r,j.g,j.b,255*j.a],outline:!1,getWeight:function getWeight(a){return a.weight||0}},(0,_common.commonLayerProps)(i,e,setTooltipContent)))}var propTypes={formData:_propTypes.default.object.isRequired,payload:_propTypes.default.object.isRequired,setControlValue:_propTypes.default.func.isRequired,viewport:_propTypes.default.object.isRequired,onAddFilter:_propTypes.default.func,setTooltip:_propTypes.default.func},defaultProps={onAddFilter:function onAddFilter(){},setTooltip:function setTooltip(){}},DeckGLScreenGrid=/*#__PURE__*/function(a){function b(c){var d;return d=a.call(this,c)||this,d.state=b.getDerivedStateFromProps(c),d.getLayers=d.getLayers.bind(_assertThisInitialized(d)),d.onValuesChange=d.onValuesChange.bind(_assertThisInitialized(d)),d.onViewportChange=d.onViewportChange.bind(_assertThisInitialized(d)),d}_inheritsLoose(b,a),b.getDerivedStateFromProps=function getDerivedStateFromProps(a,b){// the state is computed only from the payload; if it hasn't changed, do
// not recompute state since this would reset selections and/or the play
// slider position due to changes in form controls
if(b&&a.payload.form_data===b.formData)return null;var c=a.payload.data.features||[],d=c.map(function(a){return a.__timestamp}),e=a.payload.form_data.time_grain_sqla||a.payload.form_data.granularity||"P1D",f=(0,_time.getPlaySliderParams)(d,e),g=f.start,h=f.end,i=f.getStep,j=f.values,k=f.disabled,l=a.formData.autozoom?(0,_common.fitViewport)(a.viewport,getPoints(c)):a.viewport;return{start:g,end:h,getStep:i,values:j,disabled:k,viewport:l,selected:[],lastClick:0,formData:a.payload.form_data}};var c=b.prototype;return c.onValuesChange=function onValuesChange(a){this.setState({// eslint-disable-next-line react/no-access-state-in-setstate
values:Array.isArray(a)?a:[a,a+this.state.getStep(a)]})},c.onViewportChange=function onViewportChange(a){this.setState({viewport:a})},c.getLayers=function getLayers(a){var b=[];// time filter
a[0]===a[1]||a[1]===this.end?b.push(function(b){return b.__timestamp>=a[0]&&b.__timestamp<=a[1]}):b.push(function(b){return b.__timestamp>=a[0]&&b.__timestamp<a[1]});var c=getLayer(this.props.formData,this.props.payload,this.props.onAddFilter,this.props.setTooltip,b);return[c]},c.render=function render(){var a=this.props,b=a.formData,c=a.payload,d=a.setControlValue;return _react.default.createElement("div",null,_react.default.createElement(_AnimatableDeckGLContainer.default,{getLayers:this.getLayers,start:this.state.start,end:this.state.end,getStep:this.state.getStep,values:this.state.values,onValuesChange:this.onValuesChange,disabled:this.state.disabled,viewport:this.state.viewport,onViewportChange:this.onViewportChange,mapboxApiAccessToken:c.data.mapboxApiKey,mapStyle:b.mapbox_style,setControlValue:d,aggregation:!0}))},b}(_react.default.PureComponent);DeckGLScreenGrid.propTypes=propTypes,DeckGLScreenGrid.defaultProps=defaultProps;var _default=DeckGLScreenGrid;exports.default=_default;