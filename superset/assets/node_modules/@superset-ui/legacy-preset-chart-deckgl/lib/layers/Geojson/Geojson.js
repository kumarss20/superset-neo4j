"use strict";exports.__esModule=!0,exports.getLayer=getLayer,exports.default=void 0;var _react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_deck=require("deck.gl"),_DeckGLContainer=_interopRequireDefault(require("../../DeckGLContainer")),_colors=require("../../utils/colors"),_sandbox=_interopRequireDefault(require("../../utils/sandbox")),_common=require("../common"),_TooltipRow=_interopRequireDefault(require("../../TooltipRow"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}var features,propertyMap={fillColor:"fillColor",color:"fillColor",fill:"fillColor","fill-color":"fillColor",strokeColor:"strokeColor","stroke-color":"strokeColor","stroke-width":"strokeWidth"},alterProps=function(a,b){var c={};return Object.keys(a).forEach(function(b){b in propertyMap?c[propertyMap[b]]=a[b]:c[b]=a[b]}),"string"==typeof a.fillColor&&(c.fillColor=(0,_colors.hexToRGB)(a.fillColor)),"string"==typeof a.strokeColor&&(c.strokeColor=(0,_colors.hexToRGB)(a.strokeColor)),_extends({},c,{},b)},recurseGeoJson=function(a,b,c){if(a&&a.features&&a.features.forEach(function(d){recurseGeoJson(d,b,a.extraProps||c)}),a&&a.geometry){var d=_extends({},a,{properties:alterProps(a.properties,b)});d.extraProps||(d.extraProps=c),features.push(d)}};function setTooltipContent(a){return a.object.extraProps&&_react.default.createElement("div",{className:"deckgl-tooltip"},Object.keys(a.object.extraProps).map(function(b,c){return _react.default.createElement(_TooltipRow.default,{key:"prop-"+c,label:b+": ",value:""+a.object.extraProps[b]})}))}function getLayer(a,b,c,d){var e=a,f=e.fill_color_picker,g=e.stroke_color_picker,h=[f.r,f.g,f.b,255*f.a],i=[g.r,g.g,g.b,255*g.a],j={};0<h[3]&&(j.fillColor=h),0<i[3]&&(j.strokeColor=i),features=[],recurseGeoJson(b.data,j);var k;return e.js_data_mutator&&(k=(0,_sandbox.default)(e.js_data_mutator),features=k(features)),new _deck.GeoJsonLayer(_extends({id:"geojson-layer-"+e.slice_id,filled:e.filled,data:features,stroked:e.stroked,extruded:e.extruded,pointRadiusScale:e.point_radius_scale},(0,_common.commonLayerProps)(e,d,setTooltipContent)))}var propTypes={formData:_propTypes.default.object.isRequired,payload:_propTypes.default.object.isRequired,setControlValue:_propTypes.default.func.isRequired,viewport:_propTypes.default.object.isRequired,onAddFilter:_propTypes.default.func,setTooltip:_propTypes.default.func},defaultProps={onAddFilter:function onAddFilter(){},setTooltip:function setTooltip(){}};function deckGeoJson(a){var b=a.formData,c=a.payload,d=a.setControlValue,e=a.onAddFilter,f=a.setTooltip,g=a.viewport,h=getLayer(b,c,e,f);// TODO get this to work
// if (formData.autozoom) {
//   viewport = common.fitViewport(viewport, geojsonExtent(payload.data.features));
// }
return _react.default.createElement(_DeckGLContainer.default,{mapboxApiAccessToken:c.data.mapboxApiKey,viewport:g,layers:[h],mapStyle:b.mapbox_style,setControlValue:d})}deckGeoJson.propTypes=propTypes,deckGeoJson.defaultProps=defaultProps;var _default=deckGeoJson;exports.default=_default;