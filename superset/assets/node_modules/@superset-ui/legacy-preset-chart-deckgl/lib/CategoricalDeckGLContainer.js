"use strict";exports.__esModule=!0,exports.default=void 0;var _react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_color=require("@superset-ui/color"),_AnimatableDeckGLContainer=_interopRequireDefault(require("./AnimatableDeckGLContainer")),_Legend=_interopRequireDefault(require("./components/Legend")),_colors=require("./utils/colors"),_time=require("./utils/time"),_sandbox=_interopRequireDefault(require("./utils/sandbox")),_common=require("./layers/common");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}var getScale=_color.CategoricalColorNamespace.getScale;function getCategories(a,b){var e=a.color_picker||{r:0,g:0,b:0,a:1},c=[e.r,e.g,e.b,255*e.a],f=getScale(a.color_scheme),g={};return b.forEach(function(b){if(null!=b.cat_color&&!g.hasOwnProperty(b.cat_color)){var d;d=a.dimension?(0,_colors.hexToRGB)(f(b.cat_color),255*e.a):c,g[b.cat_color]={color:d,enabled:!0}}}),g}var propTypes={formData:_propTypes.default.object.isRequired,mapboxApiKey:_propTypes.default.string.isRequired,setControlValue:_propTypes.default.func.isRequired,viewport:_propTypes.default.object.isRequired,getLayer:_propTypes.default.func.isRequired,getPoints:_propTypes.default.func.isRequired,payload:_propTypes.default.object.isRequired,onAddFilter:_propTypes.default.func,setTooltip:_propTypes.default.func},CategoricalDeckGLContainer=/*#__PURE__*/function(a){/*
   * A Deck.gl container that handles categories.
   *
   * The container will have an interactive legend, populated from the
   * categories present in the data.
   */function b(b){var c;return c=a.call(this,b)||this,c.state=c.getStateFromProps(b),c.getLayers=c.getLayers.bind(_assertThisInitialized(c)),c.onValuesChange=c.onValuesChange.bind(_assertThisInitialized(c)),c.onViewportChange=c.onViewportChange.bind(_assertThisInitialized(c)),c.toggleCategory=c.toggleCategory.bind(_assertThisInitialized(c)),c.showSingleCategory=c.showSingleCategory.bind(_assertThisInitialized(c)),c}_inheritsLoose(b,a);var c=b.prototype;return c.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(a){a.payload.form_data!==this.state.formData&&this.setState(_extends({},this.getStateFromProps(a)))},c.onValuesChange=function onValuesChange(a){this.setState({values:Array.isArray(a)?a:[a,a+this.state.getStep(a)]})},c.onViewportChange=function onViewportChange(a){this.setState({viewport:a})},c.getStateFromProps=function getStateFromProps(a,b){var c=a.payload.data.features||[],d=c.map(function(a){return a.__timestamp}),e=getCategories(a.formData,c);// the state is computed only from the payload; if it hasn't changed, do
// not recompute state since this would reset selections and/or the play
// slider position due to changes in form controls
if(b&&a.payload.form_data===b.formData)return _extends({},b,{categories:e});// the granularity has to be read from the payload form_data, not the
// props formData which comes from the instantaneous controls state
var f=a.payload.form_data.time_grain_sqla||a.payload.form_data.granularity||"P1D",g=(0,_time.getPlaySliderParams)(d,f),h=g.start,i=g.end,j=g.getStep,k=g.values,l=g.disabled,m=a.formData.autozoom?(0,_common.fitViewport)(a.viewport,a.getPoints(c)):a.viewport;return{start:h,end:i,getStep:j,values:k,disabled:l,viewport:m,selected:[],lastClick:0,formData:a.payload.form_data,categories:e}},c.getLayers=function getLayers(a){var b=this.props,c=b.getLayer,d=b.payload,e=b.formData,f=b.onAddFilter,g=b.setTooltip,h=d.data.features?[].concat(d.data.features):[];// Apply user defined data mutator if defined
if(h=this.addColor(h,e),e.js_data_mutator){var k=(0,_sandbox.default)(e.js_data_mutator);h=k(h)}// Filter by time
h=a[0]===a[1]||a[1]===this.end?h.filter(function(b){return b.__timestamp>=a[0]&&b.__timestamp<=a[1]}):h.filter(function(b){return b.__timestamp>=a[0]&&b.__timestamp<a[1]});// Show only categories selected in the legend
var i=this.state.categories;e.dimension&&(h=h.filter(function(a){return i[a.cat_color]&&i[a.cat_color].enabled}));var j=_extends({},d,{data:_extends({},d.data,{features:h})});return[c(e,j,f,g)]},c.addColor=function addColor(a,b){var e=b.color_picker||{r:0,g:0,b:0,a:1},c=getScale(b.color_scheme);return a.map(function(a){var d;return b.dimension?(d=(0,_colors.hexToRGB)(c(a.cat_color),255*e.a),_extends({},a,{color:d})):a})},c.toggleCategory=function toggleCategory(a){var b,c=this.state.categories[a],d=_extends({},this.state.categories,(b={},b[a]=_extends({},c,{enabled:!c.enabled}),b));Object.values(d).every(function(a){return!a.enabled})&&Object.values(d).forEach(function(a){a.enabled=!0}),this.setState({categories:d})},c.showSingleCategory=function showSingleCategory(a){var b=_extends({},this.state.categories);/* eslint-disable no-param-reassign */Object.values(b).forEach(function(a){a.enabled=!1}),b[a].enabled=!0,this.setState({categories:b})},c.render=function render(){return _react.default.createElement("div",{style:{position:"relative"}},_react.default.createElement(_AnimatableDeckGLContainer.default,{getLayers:this.getLayers,start:this.state.start,end:this.state.end,getStep:this.state.getStep,values:this.state.values,onValuesChange:this.onValuesChange,disabled:this.state.disabled,viewport:this.state.viewport,onViewportChange:this.onViewportChange,mapboxApiAccessToken:this.props.mapboxApiKey,mapStyle:this.props.formData.mapbox_style,setControlValue:this.props.setControlValue},_react.default.createElement(_Legend.default,{categories:this.state.categories,toggleCategory:this.toggleCategory,showSingleCategory:this.showSingleCategory,position:this.props.formData.legend_position,format:this.props.formData.legend_format})))},b}(_react.default.PureComponent);exports.default=CategoricalDeckGLContainer,CategoricalDeckGLContainer.propTypes=propTypes;