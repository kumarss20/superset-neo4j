"use strict";var _lodash=require("lodash");exports.__esModule=!0,exports.default=void 0;var _react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_reactMapGl=_interopRequireDefault(require("react-map-gl")),_deck=_interopRequireDefault(require("deck.gl"));require("mapbox-gl/dist/mapbox-gl.css");require("./css/deckgl.css");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}var TICK=2e3,propTypes={viewport:_propTypes.default.object.isRequired,layers:_propTypes.default.array.isRequired,setControlValue:_propTypes.default.func,mapStyle:_propTypes.default.string,mapboxApiAccessToken:_propTypes.default.string.isRequired,onViewportChange:_propTypes.default.func},defaultProps={mapStyle:"light",onViewportChange:function onViewportChange(){},setControlValue:function setControlValue(){}},DeckGLContainer=/*#__PURE__*/function(a){function b(b){var c;return c=a.call(this,b)||this,c.tick=c.tick.bind(_assertThisInitialized(c)),c.onViewportChange=c.onViewportChange.bind(_assertThisInitialized(c)),c.state={previousViewport:b.viewport,timer:setInterval(c.tick,TICK)},c}_inheritsLoose(b,a),b.getDerivedStateFromProps=function getDerivedStateFromProps(a,b){return a.viewport===b.viewport?null:{viewport:_extends({},a.viewport),previousViewport:b.viewport}};var c=b.prototype;return c.componentWillUnmount=function componentWillUnmount(){clearInterval(this.state.timer)},c.onViewportChange=function onViewportChange(a){var b=Object.assign({},a),c=_extends({},this.state.previousViewport,{},b);// delete vp.width;
// delete vp.height;
this.props.onViewportChange(c)},c.tick=function tick(){var a=this;// Limiting updating viewport controls through Redux at most 1*sec
// Deep compare is needed as shallow equality doesn't work here, viewport object
// changes id at every change
if(this.state&&!(0,_lodash.isEqual)(this.state.previousViewport,this.props.viewport)){var b=this.props.setControlValue,c=this.props.viewport;b&&b("viewport",c),this.setState(function(){return{previousViewport:a.props.viewport}})}},c.layers=function layers(){// Support for layer factory
return this.props.layers.some(function(a){return"function"==typeof a})?this.props.layers.map(function(a){return"function"==typeof a?a():a}):this.props.layers},c.render=function render(){var a=this.props.viewport;return _react.default.createElement(_reactMapGl.default,_extends({},a,{mapStyle:this.props.mapStyle,onViewportChange:this.onViewportChange,mapboxApiAccessToken:this.props.mapboxApiAccessToken}),_react.default.createElement(_deck.default,_extends({},a,{layers:this.layers(),initWebGLParameters:!0})))},b}(_react.default.Component);// milliseconds
exports.default=DeckGLContainer,DeckGLContainer.propTypes=propTypes,DeckGLContainer.defaultProps=defaultProps;