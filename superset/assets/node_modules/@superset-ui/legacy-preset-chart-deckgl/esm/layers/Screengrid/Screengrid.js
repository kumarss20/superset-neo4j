function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}/* eslint-disable react/jsx-handler-names */ /* eslint-disable react/destructuring-assignment */ /* eslint-disable no-magic-numbers */ /* eslint-disable sort-keys */ /* eslint-disable react/forbid-prop-types */ /**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */ /* eslint no-underscore-dangle: ["error", { "allow": ["", "__timestamp"] }] */import React from"react";import PropTypes from"prop-types";import{ScreenGridLayer}from"deck.gl";import{t}from"@superset-ui/translation";import AnimatableDeckGLContainer from"../../AnimatableDeckGLContainer";import{getPlaySliderParams}from"../../utils/time";import sandboxedEval from"../../utils/sandbox";import{commonLayerProps,fitViewport}from"../common";import TooltipRow from"../../TooltipRow";function getPoints(a){return a.map(function(a){return a.position})}function setTooltipContent(a){return React.createElement("div",{className:"deckgl-tooltip"},React.createElement(TooltipRow,{label:t("Longitude and Latitude")+": ",value:a.object.position[0]+", "+a.object.position[1]}),React.createElement(TooltipRow,{label:t("Weight")+": ",value:""+a.object.weight}))}export function getLayer(a,b,d,e,f,g,h){var i=a,j=i.color_picker,c=b.data.features.map(function(a){return _extends({},a,{color:[j.r,j.g,j.b,255*j.a]})});if(i.js_data_mutator){// Applying user defined data mutator if defined
var k=sandboxedEval(i.js_data_mutator);c=k(c)}// eslint-disable-next-line no-eq-null
// Passing a layer creator function instead of a layer since the
// layer needs to be regenerated at each render
return null!=h&&h.forEach(function(a){c=c.filter(a)}),new ScreenGridLayer(_extends({id:"screengrid-layer-"+i.slice_id,data:c,pickable:!0,cellSizePixels:i.grid_size,minColor:[j.r,j.g,j.b,0],maxColor:[j.r,j.g,j.b,255*j.a],outline:!1,getWeight:function getWeight(a){return a.weight||0}},commonLayerProps(i,e,setTooltipContent)))}var propTypes={formData:PropTypes.object.isRequired,payload:PropTypes.object.isRequired,setControlValue:PropTypes.func.isRequired,viewport:PropTypes.object.isRequired,onAddFilter:PropTypes.func,setTooltip:PropTypes.func},defaultProps={onAddFilter:function onAddFilter(){},setTooltip:function setTooltip(){}},DeckGLScreenGrid=/*#__PURE__*/function(a){function b(c){var d;return d=a.call(this,c)||this,d.state=b.getDerivedStateFromProps(c),d.getLayers=d.getLayers.bind(_assertThisInitialized(d)),d.onValuesChange=d.onValuesChange.bind(_assertThisInitialized(d)),d.onViewportChange=d.onViewportChange.bind(_assertThisInitialized(d)),d}_inheritsLoose(b,a),b.getDerivedStateFromProps=function getDerivedStateFromProps(a,b){// the state is computed only from the payload; if it hasn't changed, do
// not recompute state since this would reset selections and/or the play
// slider position due to changes in form controls
if(b&&a.payload.form_data===b.formData)return null;var c=a.payload.data.features||[],d=c.map(function(a){return a.__timestamp}),e=a.payload.form_data.time_grain_sqla||a.payload.form_data.granularity||"P1D",f=getPlaySliderParams(d,e),g=f.start,h=f.end,i=f.getStep,j=f.values,k=f.disabled,l=a.formData.autozoom?fitViewport(a.viewport,getPoints(c)):a.viewport;return{start:g,end:h,getStep:i,values:j,disabled:k,viewport:l,selected:[],lastClick:0,formData:a.payload.form_data}};var c=b.prototype;return c.onValuesChange=function onValuesChange(a){this.setState({// eslint-disable-next-line react/no-access-state-in-setstate
values:Array.isArray(a)?a:[a,a+this.state.getStep(a)]})},c.onViewportChange=function onViewportChange(a){this.setState({viewport:a})},c.getLayers=function getLayers(a){var b=[];// time filter
a[0]===a[1]||a[1]===this.end?b.push(function(b){return b.__timestamp>=a[0]&&b.__timestamp<=a[1]}):b.push(function(b){return b.__timestamp>=a[0]&&b.__timestamp<a[1]});var c=getLayer(this.props.formData,this.props.payload,this.props.onAddFilter,this.props.setTooltip,b);return[c]},c.render=function render(){var a=this.props,b=a.formData,c=a.payload,d=a.setControlValue;return React.createElement("div",null,React.createElement(AnimatableDeckGLContainer,{getLayers:this.getLayers,start:this.state.start,end:this.state.end,getStep:this.state.getStep,values:this.state.values,onValuesChange:this.onValuesChange,disabled:this.state.disabled,viewport:this.state.viewport,onViewportChange:this.onViewportChange,mapboxApiAccessToken:c.data.mapboxApiKey,mapStyle:b.mapbox_style,setControlValue:d,aggregation:!0}))},b}(React.PureComponent);DeckGLScreenGrid.propTypes=propTypes,DeckGLScreenGrid.defaultProps=defaultProps;export default DeckGLScreenGrid;