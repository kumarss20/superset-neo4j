import { OverwritePolicy } from '../types';
interface ItemWithValue<T> {
    value: T;
}
interface ItemWithLoader<T> {
    loader: () => T;
}
export interface RegistryConfig {
    name?: string;
    overwritePolicy?: OverwritePolicy;
}
/**
 * Registry class
 *
 * Can use generic to specify type of item in the registry
 * @type V Type of value
 * @type W Type of value returned from loader function when using registerLoader().
 * W can be either V, Promise<V> or V | Promise<V>
 * Set W=V when does not support asynchronous loader.
 * By default W is set to V | Promise<V> to support
 * both synchronous and asynchronous loaders.
 */
export default class Registry<V, W extends V | Promise<V> = V | Promise<V>> {
    name: string;
    overwritePolicy: OverwritePolicy;
    items: {
        [key: string]: ItemWithValue<V> | ItemWithLoader<W>;
    };
    promises: {
        [key: string]: Promise<V>;
    };
    constructor(config?: RegistryConfig);
    clear(): this;
    has(key: string): boolean;
    registerValue(key: string, value: V): this;
    registerLoader(key: string, loader: () => W): this;
    get(key: string): V | W | undefined;
    getAsPromise(key: string): Promise<V>;
    getMap(): {
        [key: string]: V | W | undefined;
    };
    getMapAsPromise(): Promise<{
        [key: string]: V;
    }>;
    keys(): string[];
    values(): (V | W | undefined)[];
    valuesAsPromise(): Promise<V[]>;
    entries(): {
        key: string;
        value: V | W | undefined;
    }[];
    entriesAsPromise(): Promise<{
        key: string;
        value: V;
    }[]>;
    remove(key: string): this;
}
export {};
