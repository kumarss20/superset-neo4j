function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}/* eslint no-console: 0 */import{OverwritePolicy}from"../types";/**
 * Registry class
 *
 * Can use generic to specify type of item in the registry
 * @type V Type of value
 * @type W Type of value returned from loader function when using registerLoader().
 * W can be either V, Promise<V> or V | Promise<V>
 * Set W=V when does not support asynchronous loader.
 * By default W is set to V | Promise<V> to support
 * both synchronous and asynchronous loaders.
 */var Registry=/*#__PURE__*/function(){function a(a){void 0===a&&(a={}),_defineProperty(this,"name",void 0),_defineProperty(this,"overwritePolicy",void 0),_defineProperty(this,"items",void 0),_defineProperty(this,"promises",void 0);var b=a,c=b.name,d=void 0===c?"":c,e=b.overwritePolicy,f=void 0===e?OverwritePolicy.ALLOW:e;this.name=d,this.overwritePolicy=f,this.items={},this.promises={}}var b=a.prototype;return b.clear=function clear(){return this.items={},this.promises={},this},b.has=function has(a){var b=this.items[a];return null!==b&&void 0!==b},b.registerValue=function registerValue(a,b){var c=this.items[a],d=this.has(a)&&("value"in c&&c.value!==b||"loader"in c);if(d)if(this.overwritePolicy===OverwritePolicy.WARN)console.warn("Item with key \""+a+"\" already exists. You are assigning a new value.");else if(this.overwritePolicy===OverwritePolicy.PROHIBIT)throw new Error("Item with key \""+a+"\" already exists. Cannot overwrite.");return(!c||d)&&(this.items[a]={value:b},delete this.promises[a]),this},b.registerLoader=function registerLoader(a,b){var c=this.items[a],d=this.has(a)&&("loader"in c&&c.loader!==b||"value"in c);if(d)if(this.overwritePolicy===OverwritePolicy.WARN)console.warn("Item with key \""+a+"\" already exists. You are assigning a new value.");else if(this.overwritePolicy===OverwritePolicy.PROHIBIT)throw new Error("Item with key \""+a+"\" already exists. Cannot overwrite.");return(!c||d)&&(this.items[a]={loader:b},delete this.promises[a]),this},b.get=function get(a){var b=this.items[a];return void 0===b?void 0:"loader"in b?b.loader&&b.loader():b.value},b.getAsPromise=function getAsPromise(a){var b=this.promises[a];if(b)return b;var c=this.get(a);if(void 0!==c){var d=Promise.resolve(c);return this.promises[a]=d,d}return Promise.reject(new Error("Item with key \""+a+"\" is not registered."))},b.getMap=function getMap(){var a=this;return this.keys().reduce(function(b,c){var d=b;return d[c]=a.get(c),d},{})},b.getMapAsPromise=function getMapAsPromise(){var a=this,b=this.keys();return Promise.all(b.map(function(b){return a.getAsPromise(b)})).then(function(a){return a.reduce(function(a,c,d){var e=a;return e[b[d]]=c,e},{})})},b.keys=function keys(){return Object.keys(this.items)},b.values=function values(){var a=this;return this.keys().map(function(b){return a.get(b)})},b.valuesAsPromise=function valuesAsPromise(){var a=this;return Promise.all(this.keys().map(function(b){return a.getAsPromise(b)}))},b.entries=function entries(){var a=this;return this.keys().map(function(b){return{key:b,value:a.get(b)}})},b.entriesAsPromise=function entriesAsPromise(){var a=this,b=this.keys();return Promise.all(b.map(function(b){return a.getAsPromise(b)})).then(function(a){return a.map(function(a,c){return{key:b[c],value:a}})})},b.remove=function remove(a){return delete this.items[a],delete this.promises[a],this},a}();export{Registry as default};