function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */ /* eslint-disable no-magic-numbers, no-plusplus, react/no-array-index-key, react/jsx-no-bind */import dist from"distributions";import React from"react";import{Table,Tr,Td,Thead,Th}from"reactable-arc";import PropTypes from"prop-types";export var dataPropType=PropTypes.arrayOf(PropTypes.shape({group:PropTypes.arrayOf(PropTypes.string),values:PropTypes.arrayOf(PropTypes.shape({x:PropTypes.number,y:PropTypes.number}))}));var propTypes={alpha:PropTypes.number,data:dataPropType.isRequired,groups:PropTypes.arrayOf(PropTypes.string).isRequired,liftValPrec:PropTypes.number,metric:PropTypes.string.isRequired,pValPrec:PropTypes.number},defaultProps={alpha:.05,liftValPrec:4,pValPrec:6},TTestTable=/*#__PURE__*/function(a){function b(b){var c;return c=a.call(this,b)||this,c.state={control:0,liftValues:[],pValues:[]},c}// eslint-disable-next-line react/no-deprecated
_inheritsLoose(b,a);var c=b.prototype;return c.componentWillMount=function componentWillMount(){var a=this.state.control;this.computeTTest(a)},c.getLiftStatus=function getLiftStatus(a){var b=this.state,c=b.control,d=b.liftValues;// Get a css class name for coloring
if(a===c)return"control";var e=d[a];return Number.isNaN(e)||!Number.isFinite(e)?"invalid":0<=e?"true":"false";// green on true, red on false
},c.getPValueStatus=function getPValueStatus(a){var b=this.state,c=b.control,d=b.pValues;if(a===c)return"control";var e=d[a];return Number.isNaN(e)||!Number.isFinite(e)?"invalid":"";// p-values won't normally be colored
},c.getSignificance=function getSignificance(a){var b=this.state,c=b.control,d=b.pValues,e=this.props.alpha;// Color significant as green, else red
return a===c?"control":d[a]<=e;// p-values significant below set threshold
},c.computeLift=function computeLift(a,b){for(var c=this.props.liftValPrec,d=0,e=0,f=0;f<a.length;f++)d+=a[f].y,e+=b[f].y;return(100*((d-e)/e)).toFixed(c)},c.computePValue=function computePValue(a,b){for(var c,d=this.props.pValPrec,e=0,f=0,g=0,h=0;h<a.length;h++)c=b[h].y-a[h].y,isFinite(c)&&(g++,e+=c,f+=c*c);var j=-Math.abs(e*Math.sqrt((g-1)/(g*f-e*e)));try{return(2*new dist.Studentt(g-1).cdf(j)).toFixed(d);// two-sided test
}catch(a){return NaN}},c.computeTTest=function computeTTest(a){// Compute lift and p-values for each row
// against the selected control
var b=this.props.data,c=[],d=[];if(b){for(var e=0;e<b.length;e++)e===a?(c.push("control"),d.push("control")):(c.push(this.computePValue(b[e].values,b[a].values)),d.push(this.computeLift(b[e].values,b[a].values)));this.setState({control:a,liftValues:d,pValues:c})}},c.render=function render(){var a=this,b=this.props,c=b.data,d=b.metric,e=b.groups,f=this.state,g=f.control,h=f.liftValues,j=f.pValues,k=e.map(function(a,b){return React.createElement(Th,{key:b,column:a},a)}),l=e.length;k.push(React.createElement(Th,{key:l+1,column:"pValue"},"p-value")),k.push(React.createElement(Th,{key:l+2,column:"liftValue"},"Lift %")),k.push(React.createElement(Th,{key:l+3,column:"significant"},"Significant"));var m=c.map(function(b,c){var d=e.map(function(a,c){return(// group names
React.createElement(Td,{key:c,column:a,data:b.group[c]}))});return d.push(React.createElement(Td,{key:l+1,className:a.getPValueStatus(c),column:"pValue",data:j[c]})),d.push(React.createElement(Td,{key:l+2,className:a.getLiftStatus(c),column:"liftValue",data:h[c]})),d.push(React.createElement(Td,{key:l+3,className:a.getSignificance(c).toString(),column:"significant",data:a.getSignificance(c)})),React.createElement(Tr,{key:c,onClick:a.computeTTest.bind(a,c),className:c===g?"control":""},d)}),n=e.concat([{column:"pValue",sortFunction:function sortFunction(c,a){return"control"===c?-1:"control"===a?1:c>a?1:-1;// p-values ascending
}},{column:"liftValue",sortFunction:function sortFunction(c,a){return"control"===c?-1:"control"===a?1:parseFloat(c)>parseFloat(a)?-1:1;// lift values descending
}},{column:"significant",sortFunction:function sortFunction(c,a){return"control"===c?-1:"control"===a?1:c>a?-1:1;// significant values first
}}]);// When sorted ascending, 'control' will always be at top
return React.createElement("div",null,React.createElement("h3",null,d),React.createElement(Table,{className:"table",id:"table_"+d,sortable:n},React.createElement(Thead,null,k),m))},b}(React.Component);TTestTable.propTypes=propTypes,TTestTable.defaultProps=defaultProps;export default TTestTable;