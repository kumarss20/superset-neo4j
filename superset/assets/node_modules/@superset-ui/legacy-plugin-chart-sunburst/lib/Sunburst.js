"use strict";exports.__esModule=!0,exports.default=void 0;var _d=_interopRequireDefault(require("d3")),_propTypes=_interopRequireDefault(require("prop-types")),_color=require("@superset-ui/color"),_numberFormat=require("@superset-ui/number-format"),_wrapSvgText=_interopRequireDefault(require("./utils/wrapSvgText"));require("./Sunburst.css");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */ /* eslint-disable no-param-reassign, sort-keys, no-magic-numbers */ /* eslint-disable complexity, no-plusplus, no-continue, babel/no-invalid-this */var propTypes={// Each row is an array of [hierarchy-lvl1, hierarchy-lvl2, metric1, metric2]
// hierarchy-lvls are string. metrics are number
data:_propTypes.default.arrayOf(_propTypes.default.array),width:_propTypes.default.number,height:_propTypes.default.number,colorScheme:_propTypes.default.string,metrics:_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.object]))};function metricLabel(a){return"string"==typeof a||a instanceof String?a:a.label}// Given a node in a partition layout, return an array of all of its ancestor
// nodes, highest first, but excluding the root.
function getAncestors(a){for(var b=[],c=a;c.parent;)b.unshift(c),c=c.parent;return b}// Modified from http://bl.ocks.org/kerryrodden/7090426
function Sunburst(a,b){function c(a){// -2 bc row contains 2x metrics, +extra for %label and buffer
k=a.length-2+1,l={width:B/k,height:.8*A,// more margin
spacing:3,tipTailWidth:10},o=K.append("svg:g").attr("class","breadcrumbs").attr("transform","translate("+x.left+","+x.top+")"),o.append("svg:text").attr("class","end-label")}// Generate a string that describes the points of a breadcrumb polygon.
function d(a,b){var c=[];return c.push("0,0"),c.push(l.width+",0"),c.push(l.width+l.tipTailWidth+","+l.height/2),c.push(l.width+","+l.height),c.push("0,"+l.height),0<b&&c.push(l.tipTailWidth+","+l.height/2),c.join(" ")}function e(a,b){var c=o.selectAll("g").data(a,function(a){return a.name+a.depth}),e=c.enter().append("svg:g");// Add breadcrumb and label for entering nodes.
// Set position for entering and updating nodes.
// Remove exiting nodes.
// Now move and update the percentage at the end.
// Make the breadcrumb trail visible, if it's hidden.
e.append("svg:polygon").attr("points",d).style("fill",function(a){return E?F(a.name):n(a.m2/a.m1)}),e.append("svg:text").attr("x",(l.width+l.tipTailWidth)/2).attr("y",l.height/4).attr("dy","0.85em").style("fill",function(a){// Make text white or black based on the lightness of the background
var b=_d.default.hsl(E?F(a.name):n(a.m2/a.m1));return .5>b.l?"white":"black"}).attr("class","step-label").text(function(a){return a.name.replace(/_/g," ")}).call(_wrapSvgText.default,l.width,l.height/2),c.attr("transform",function(a,b){return"translate("+b*(l.width+l.spacing)+", 0)"}),c.exit().remove(),o.select(".end-label").attr("x",(a.length+.5)*(l.width+l.spacing)).attr("y",l.height/2).attr("dy","0.35em").text(b),o.style("visibility",null)}// Fade all but the current sequence, and show it in the breadcrumb trail.
function f(a){var b=getAncestors(a),c=b[b.length-2]||null,d=(a.m1/m).toPrecision(3),f=c?(a.m1/c.m1).toPrecision(3):null,g=J(d),h=c?J(f):"",i=["-25","7","35","60"],j=0,k=1e-5>Math.abs(a.m1-a.m2);// Reset and fade all the segments.
// Then highlight only those that are an ancestor of the current segment.
r.selectAll("*").remove(),r.append("text").attr("class","path-abs-percent").attr("y",i[j++]).text(g+" of total"),h&&r.append("text").attr("class","path-cond-percent").attr("y",i[j++]).text(h+" of parent"),r.append("text").attr("class","path-metrics").attr("y",i[j++]).text(metricLabel(w[0])+": "+I(a.m1)+(k?"":", "+metricLabel(w[1])+": "+I(a.m2))),r.append("text").attr("class","path-ratio").attr("y",i[j++]).text(k?"":metricLabel(w[1])+"/"+metricLabel(w[0])+": "+J(a.m2/a.m1)),q.selectAll("path").style("stroke-width",null).style("stroke",null).style("opacity",.3),q.selectAll("path").filter(function(a){return 0<=b.indexOf(a)}).style("opacity",1).style("stroke","#aaa"),e(b,g)}// Restore everything to full opacity when moving off the visualization.
function g(){// Hide the breadcrumb trail
// Deactivate all segments during transition.
// Transition each segment to full opacity and then reactivate it.
o.style("visibility","hidden"),r.selectAll("*").remove(),q.selectAll("path").on("mouseenter",null),q.selectAll("path").transition().duration(200).style("opacity",1).style("stroke",null).style("stroke-width",null).each("end",function(){_d.default.select(this).on("mouseenter",f)})}function h(a){function b(a){if(a.children){for(var c,d=0,e=0,f=0;f<a.children.length;f++)c=b(a.children[f]),d+=c[0],e+=c[1];a.m1=d,a.m2=e}return[a.m1,a.m2]}// each record [groupby1val, groupby2val, (<string> or 0)n, m1, m2]
for(var c={name:"root",children:[]},d=0;d<a.length;d++){var e=a[d],f=+e[e.length-2],g=+e[e.length-1],h=e.slice(0,e.length-2);if(!Number.isNaN(f))// e.g. if this is a header row
for(var j=c,l=0;l<h.length;l++){var m=j.children||[],n=h[l].toString(),o=l>=h.length-1||0===h[l+1],p=void 0,q=void 0;if(!o){// Not yet at the end of the sequence; move down the tree.
for(var r=!1,s=0;s<m.length;s++)if(q=m[s],q.name===n&&q.level===l){p=q,r=!0;break}// If we don't already have a child node for this branch, create it.
r||(p={name:n,children:[],level:l},m.push(p)),j=p}else 0!==n&&(// Reached the end of the sequence; create a leaf node.
p={name:n,m1:f,m2:g},m.push(p))}}return b(c),c}// Main function to draw and set up the visualization, once we have the data.
function i(a){var b=h(a);p=K.append("svg:g").attr("class","sunburst-vis").attr("transform","translate("+(x.left+B/2+",")+(""+(x.top+A+C/2))+")").on("mouseleave",g),q=p.append("svg:g").attr("id","arcs"),r=p.append("svg:g").attr("class","center-label"),q.append("svg:circle").attr("r",D).style("opacity",0);// For efficiency, filter nodes to keep only those large enough to see.
var c,d=G.nodes(b).filter(function(a){return .005<a.dx});// 0.005 radians = 0.29 degrees
// Get total size of the tree = value of root node from partition.
w[0]!==w[1]&&w[1]&&(E=!1,c=_d.default.extent(d,function(a){return a.m2/a.m1}),n=_d.default.scale.linear().domain([c[0],c[0]+(c[1]-c[0])/2,c[1]]).range(["#00D1C1","white","#FFB400"])),q.selectAll("path").data(d).enter().append("svg:path").attr("display",function(a){return a.depth?null:"none"}).attr("d",H).attr("fill-rule","evenodd").style("fill",function(a){return E?F(a.name):n(a.m2/a.m1)}).style("opacity",1).on("mouseenter",f),m=b.value}var j=_d.default.select(a);j.classed("superset-legacy-chart-sunburst",!0);var k,l,m,n,o,p,q,r,s=b.data,t=b.width,u=b.height,v=b.colorScheme,w=b.metrics,x={top:10,right:5,bottom:10,left:5},y=t,z=u,A=.085*z,B=y-x.left-x.right,C=z-x.top-x.bottom-A,D=Math.min(B,C)/2,E=!0,F=_color.CategoricalColorNamespace.getScale(v),G=_d.default.layout.partition().size([2*Math.PI,D*D]).value(function(a){return a.m1}),H=_d.default.svg.arc().startAngle(function(a){return a.x}).endAngle(function(a){return a.x+a.dx}).innerRadius(function(a){return Math.sqrt(a.y)}).outerRadius(function(a){return Math.sqrt(a.y+a.dy)}),I=(0,_numberFormat.getNumberFormatter)(_numberFormat.NumberFormats.SI_3_DIGIT),J=(0,_numberFormat.getNumberFormatter)(_numberFormat.NumberFormats.PERCENT_3_POINT);// vars with shared scope within this function
j.select("svg").remove();var K=j.append("svg:svg").attr("width",y).attr("height",z);c(s[0]),i(s)}Sunburst.displayName="Sunburst",Sunburst.propTypes=propTypes;var _default=Sunburst;exports.default=_default;