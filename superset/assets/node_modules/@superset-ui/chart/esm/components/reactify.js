import _pt from"prop-types";function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}import React from"react";// TODO: Note that id and className can collide between Props and ReactifyProps
// leading to (likely) unexpected behaviors. We should either require Props to not
// contain an id/className, or not combine them (via intersection), instead preferring
// wrapping (composition). As an example:
// interface MyProps {
//   id: number;
// }
// function myRender(container: HTMLDivElement, props: Readonly<MyProps>): void {
//   props.id // unusable: id is string & number
// }
// new (reactify(myRender))({ id: 5 }); // error: id has to be string & number
export default function reactify(a,b){var c=/*#__PURE__*/function(c){// eslint-disable-next-line react/sort-comp
function d(a){var b;return b=c.call(this,a)||this,_defineProperty(_assertThisInitialized(b),"container",void 0),b.setContainerRef=b.setContainerRef.bind(_assertThisInitialized(b)),b}_inheritsLoose(d,c);var e=d.prototype;return e.componentDidMount=function componentDidMount(){this.execute()},e.componentDidUpdate=function componentDidUpdate(){this.execute()},e.componentWillUnmount=function componentWillUnmount(){this.container=void 0,b&&b.componentWillUnmount&&b.componentWillUnmount.bind(this)()},e.setContainerRef=function setContainerRef(a){this.container=a},e.execute=function execute(){this.container&&a(this.container,this.props)},e.render=function render(){var a=this.props,b=a.id,c=a.className;return React.createElement("div",{id:b,className:c,ref:this.setContainerRef})},d}(React.Component);_defineProperty(c,"propTypes",{id:_pt.string,className:_pt.string});var d=c;return a.displayName&&(d.displayName=a.displayName),a.propTypes&&(d.propTypes=_extends({},d.propTypes,{},a.propTypes)),a.defaultProps&&(d.defaultProps=a.defaultProps),c}