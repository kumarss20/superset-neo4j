import { ClientConfig, ClientTimeout, Credentials, CsrfPromise, CsrfToken, Headers, Host, Mode, Protocol, RequestConfig, SupersetClientResponse } from './types';
export default class SupersetClientClass {
    credentials: Credentials;
    csrfToken?: CsrfToken;
    csrfPromise?: CsrfPromise;
    protocol: Protocol;
    host: Host;
    headers: Headers;
    mode: Mode;
    timeout: ClientTimeout;
    constructor({ protocol, host, headers, mode, timeout, credentials, csrfToken, }?: ClientConfig);
    init(force?: boolean): CsrfPromise;
    isAuthenticated(): boolean;
    get(requestConfig: RequestConfig): Promise<SupersetClientResponse>;
    delete(requestConfig: RequestConfig): Promise<SupersetClientResponse>;
    put(requestConfig: RequestConfig): Promise<SupersetClientResponse>;
    post(requestConfig: RequestConfig): Promise<SupersetClientResponse>;
    request({ body, credentials, endpoint, headers, host, method, mode, parseMethod, postPayload, signal, stringify, timeout, url, }: RequestConfig): Promise<SupersetClientResponse>;
    ensureAuth(): CsrfPromise;
    getCSRFToken(): CsrfPromise;
    getUrl({ host: inputHost, endpoint, url, }?: {
        endpoint?: string;
        host?: Host;
        url?: string;
    }): string;
}
