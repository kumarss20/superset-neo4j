import SupersetClientClass from './SupersetClientClass';
export declare type Body = RequestInit['body'];
export declare type Cache = RequestInit['cache'];
export declare type Credentials = RequestInit['credentials'];
export declare type Endpoint = string;
export declare type Headers = {
    [k: string]: string;
};
export declare type Host = string;
export declare type Json = {
    [k: string]: any;
};
export declare type Method = RequestInit['method'];
export declare type PostPayload = {
    [key: string]: any;
};
export declare type Mode = RequestInit['mode'];
export declare type Redirect = RequestInit['redirect'];
export declare type ClientTimeout = number | undefined;
export declare type ParseMethod = 'json' | 'text' | null;
export declare type Signal = RequestInit['signal'];
export declare type Stringify = boolean;
export declare type Url = string;
export interface CallApi {
    body?: Body;
    cache?: Cache;
    credentials?: Credentials;
    headers?: Headers;
    method?: Method;
    mode?: Mode;
    postPayload?: PostPayload;
    redirect?: Redirect;
    signal?: Signal;
    stringify?: Stringify;
    url: Url;
}
export interface RequestBase {
    body?: Body;
    credentials?: Credentials;
    headers?: Headers;
    host?: Host;
    mode?: Mode;
    method?: Method;
    parseMethod?: ParseMethod;
    postPayload?: PostPayload;
    signal?: Signal;
    stringify?: Stringify;
    timeout?: ClientTimeout;
}
export interface RequestWithEndpoint extends RequestBase {
    endpoint: Endpoint;
    url?: undefined;
}
export interface RequestWithUrl extends RequestBase {
    url: Url;
    endpoint?: undefined;
}
export declare type RequestConfig = RequestWithEndpoint | RequestWithUrl;
export interface JsonTextResponse {
    json?: Json;
    response: Response;
    text?: string;
}
export declare type CsrfToken = string;
export declare type CsrfPromise = Promise<string | undefined>;
export declare type Protocol = 'http:' | 'https:';
export interface ClientConfig {
    credentials?: Credentials;
    csrfToken?: CsrfToken;
    headers?: Headers;
    host?: Host;
    protocol?: Protocol;
    mode?: Mode;
    timeout?: ClientTimeout;
}
export interface SupersetClientInterface {
    configure: (config?: ClientConfig) => SupersetClientClass;
    delete: (request: RequestConfig) => Promise<SupersetClientResponse>;
    get: (request: RequestConfig) => Promise<SupersetClientResponse>;
    getInstance: (maybeClient?: SupersetClientClass) => SupersetClientClass;
    init: (force?: boolean) => Promise<string | undefined>;
    isAuthenticated: () => boolean;
    post: (request: RequestConfig) => Promise<SupersetClientResponse>;
    put: (request: RequestConfig) => Promise<SupersetClientResponse>;
    reAuthenticate: () => Promise<string | undefined>;
    request: (request: RequestConfig) => Promise<SupersetClientResponse>;
    reset: () => void;
}
export declare type SupersetClientResponse = Response | JsonTextResponse;
