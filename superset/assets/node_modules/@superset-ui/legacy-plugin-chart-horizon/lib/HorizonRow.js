"use strict";exports.__esModule=!0,exports.default=exports.DEFAULT_COLORS=void 0;var _react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_d3Array=require("d3-array"),_d3Scale=require("d3-scale");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}var DEFAULT_COLORS=["#313695","#4575b4","#74add1","#abd9e9","#fee090","#fdae61","#f46d43","#d73027"];exports.DEFAULT_COLORS=DEFAULT_COLORS;var propTypes={className:_propTypes.default.string,width:_propTypes.default.number,height:_propTypes.default.number,data:_propTypes.default.arrayOf(_propTypes.default.shape({y:_propTypes.default.number})).isRequired,bands:_propTypes.default.number,colors:_propTypes.default.arrayOf(_propTypes.default.string),colorScale:_propTypes.default.string,mode:_propTypes.default.string,offsetX:_propTypes.default.number,title:_propTypes.default.string,yDomain:_propTypes.default.arrayOf(_propTypes.default.number)},defaultProps={className:"",width:800,height:20,bands:DEFAULT_COLORS.length>>1,colors:DEFAULT_COLORS,colorScale:"series",mode:"offset",offsetX:0,title:"",yDomain:void 0},HorizonRow=/*#__PURE__*/function(a){function b(){return a.apply(this,arguments)||this}_inheritsLoose(b,a);var c=b.prototype;return c.componentDidMount=function componentDidMount(){this.drawChart()},c.componentDidUpdate=function componentDidUpdate(){this.drawChart()},c.componentWillUnmount=function componentWillUnmount(){this.canvas=null},c.drawChart=function drawChart(){if(this.canvas){var a=this.props,c=a.data,d=a.yDomain,e=a.width,f=a.height,g=a.bands,h=a.colors,j=a.colorScale,k=a.offsetX,l=a.mode,m="change"===j?c.map(function(a){return _extends({},a,{y:a.y-c[0].y})}):c,n=this.canvas.getContext("2d");n.imageSmoothingEnabled=!1,n.clearRect(0,0,e,f),n.setTransform(1,0,0,1,0,0),n.translate(.5,.5);var o=e/m.length,p=Math.floor(Math.max(0,-(k/o))),q=Math.floor(Math.min(m.length,p+e/o));// the data frame currently being shown:
// skip drawing if there's no data to be drawn
if(p>m.length)return;// Create y-scale
for(var r,s,t=d||(0,_d3Array.extent)(m,function(a){return a.y}),u=t[0],v=t[1],w=(0,_d3Scale.scaleLinear)().domain([0,Math.max(-u,v)]).range([0,f]),x=!1,y=0;y<g;y+=1){n.fillStyle=h[g+y],s=(y+1-g)*f,w.range([g*f+s,s]);// only the current data frame is being drawn i.e. what's visible:
for(var z=p;z<q;z++){if(r=m[z].y,0>=r){x=!0;continue}void 0!==r&&n.fillRect(k+z*o,w(r),o+1,w(0)-w(r))}}// draw negative bands
if(x){"offset"===l&&(n.translate(0,f),n.scale(1,-1));for(var i=0;i<g;i++){n.fillStyle=h[g-i-1],s=(i+1-g)*f,w.range([g*f+s,s]);// only the current data frame is being drawn i.e. what's visible:
for(var A=p;A<q;A++)(r=m[A].y,!(0<=r))&&n.fillRect(k+A*o,w(-r),o+1,w(0)-w(-r))}}}},c.render=function render(){var a=this,b=this.props,c=b.className,d=b.title,e=b.width,f=b.height;return _react.default.createElement("div",{className:"horizon-row "+c},_react.default.createElement("span",{className:"title"},d),_react.default.createElement("canvas",{width:e,height:f,ref:function ref(b){a.canvas=b}}))},b}(_react.default.PureComponent);HorizonRow.propTypes=propTypes,HorizonRow.defaultProps=defaultProps;var _default=HorizonRow;exports.default=_default;