function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}import{CategoricalColorNamespace,CategoricalColorScale}from"@superset-ui/color";import{scaleLinear,scaleLog,scalePow,scaleSqrt,scaleTime,scaleUtc,scaleQuantile,scaleQuantize,scaleThreshold,scaleOrdinal,scalePoint,scaleBand}from"d3-scale";import{ScaleType}from"vega-lite/build/src/scale";import{isNonValueDef,isTypedFieldDef}from"../types/ChannelDef";import isDisabled from"../utils/isDisabled";// eslint-disable-next-line complexity
export function deriveScaleTypeFromDataTypeAndChannelType(a,b,c){if(void 0===c&&(c=!1),"undefined"==typeof a)return void 0;if("nominal"===a||"ordinal"===a)switch(b){// For positional (x and y) ordinal and ordinal fields,
// "point" is the default scale type for all marks
// except bar and rect marks, which use "band" scales.
// https://vega.github.io/vega-lite/docs/scale.html
case"XBand":case"YBand":return ScaleType.BAND;case"X":case"Y":case"Numeric":return ScaleType.POINT;case"Color":case"Category":return ScaleType.ORDINAL;default:}else if("quantitative"===a)switch(b){case"XBand":case"YBand":case"X":case"Y":case"Numeric":return ScaleType.LINEAR;case"Color":return c?ScaleType.LINEAR:ScaleType.BIN_ORDINAL;default:}else if("temporal"===a)switch(b){case"XBand":case"YBand":case"X":case"Y":case"Numeric":return ScaleType.TIME;case"Color":return ScaleType.LINEAR;default:}}// eslint-disable-next-line complexity
function createScaleFromType(a){return a===ScaleType.LINEAR?scaleLinear():a===ScaleType.LOG?scaleLog():a===ScaleType.POW?scalePow():a===ScaleType.SQRT?scaleSqrt():a===ScaleType.SYMLOG?void 0:a===ScaleType.TIME?scaleTime():a===ScaleType.UTC?scaleUtc():a===ScaleType.QUANTILE?scaleQuantile():a===ScaleType.QUANTIZE?scaleQuantize():a===ScaleType.THRESHOLD?scaleThreshold():a===ScaleType.BIN_ORDINAL?scaleOrdinal():a===ScaleType.ORDINAL?scaleOrdinal():a===ScaleType.POINT?scalePoint():a===ScaleType.BAND?scaleBand():void 0}// eslint-disable-next-line complexity
function createScale(a,b,c){var d=c.namespace;if("Color"===a){var e=c.scheme;return"string"==typeof e||"undefined"==typeof e?CategoricalColorNamespace.getScale(e,d):// TODO: fully use SchemeParams
CategoricalColorNamespace.getScale(e.name,d)}var f=createScaleFromType(b);return"undefined"!=typeof f&&(f.domain&&"undefined"!=typeof c.domain&&f.domain(c.domain),f.range&&"undefined"!=typeof c.range&&f.range(c.range),"nice"in f&&f.nice&&!1!==c.nice&&f.nice(),"clamp"in f&&"undefined"!=typeof f.clamp&&"undefined"!=typeof c.clamp&&f.clamp(c.clamp)),f}var continuousScaleTypes=new Set(["linear","pow","sqrt","symlog","log","time","utc"]),discreteScaleTypes=new Set(["band","point","ordinal"]),discretizingScaleTypes=new Set(["bin-ordinal","quantile","quantize","threshold"]);function getScaleTypeCategory(a){return continuousScaleTypes.has(a)?"continuous":discreteScaleTypes.has(a)?"discrete":discretizingScaleTypes.has(a)?"discretizing":(console.warn("Unknown scaleType "+a),void 0)}export default function extractScale(a,b,c){if(isNonValueDef(b)){var d="scale"in b&&"undefined"!=typeof b.scale?b.scale:{};// return if scale is disabled
if(isDisabled(d))return void 0;var e=d.type;if("undefined"==typeof e){// If scale type is not defined, try to derive scale type from field type
var f=isTypedFieldDef(b)?b.type:void 0;// If still do not have scale type, cannot create scale
if(e=deriveScaleTypeFromDataTypeAndChannelType(f,a),"undefined"==typeof e)return void 0}var g=createScale(a,e,_extends({namespace:c},d));if(g){var h=g instanceof CategoricalColorScale||"undefined"==typeof g.domain?function(){}:g.domain;return{config:_extends({},d,{type:e}),encodeValue:g,scale:g,scaleTypeCategory:getScaleTypeCategory(e),setDomain:h}}}// ValueDef does not have scale
return void 0}