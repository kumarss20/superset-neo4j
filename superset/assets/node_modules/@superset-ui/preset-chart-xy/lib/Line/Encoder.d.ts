import { Value } from 'vega-lite/build/src/channeldef';
import { ChannelTypeToDefMap } from '../encodeable/types/Channel';
import { ExtractChannelOutput } from '../encodeable/types/ChannelDef';
/**
 * Define channel names and their types
 */
declare const channelTypes: {
    readonly fill: "Category";
    readonly stroke: "Color";
    readonly strokeDasharray: "Category";
    readonly strokeWidth: "Numeric";
    readonly x: "X";
    readonly y: "Y";
};
export declare type ChannelTypes = typeof channelTypes;
/**
 * TEMPLATE:
 * Helper for defining encoding
 */
declare type CreateChannelDef<ChannelName extends keyof ChannelTypes, Output extends Value> = ChannelTypeToDefMap<Output>[ChannelTypes[ChannelName]];
/**
 * Encoding definition
 */
export declare type Encoding = {
    fill: CreateChannelDef<'fill', boolean>;
    stroke: CreateChannelDef<'stroke', string>;
    strokeDasharray: CreateChannelDef<'strokeDasharray', string>;
    strokeWidth: CreateChannelDef<'strokeWidth', number>;
    x: CreateChannelDef<'x', number>;
    y: CreateChannelDef<'y', number>;
};
/**
 * TEMPLATE:
 * Can use this to get returned type of a Channel
 * example usage: ChannelOutput<'x'>
 */
export declare type ChannelOutput<ChannelName extends keyof Encoding> = ExtractChannelOutput<Encoding[ChannelName]>;
declare const Encoder_base: {
    new (spec: import("../encodeable/types/Specification").PartialSpec<Encoding, import("../encodeable/types/Specification").BaseOptions>): {
        readonly spec: import("../encodeable/types/Specification").FullSpec<Encoding, import("../encodeable/types/Specification").BaseOptions>;
        readonly channelTypes: {
            readonly fill: "Category";
            readonly stroke: "Color";
            readonly strokeDasharray: "Category";
            readonly strokeWidth: "Numeric";
            readonly x: "X";
            readonly y: "Y";
        };
        readonly channels: {
            readonly fill: import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").MarkPropChannelDef<boolean>>;
            readonly stroke: import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").MarkPropChannelDef<string>>;
            readonly strokeDasharray: import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").MarkPropChannelDef<string>>;
            readonly strokeWidth: import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").MarkPropChannelDef<number>>;
            readonly x: import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").XFieldDef<number>>;
            readonly y: import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").YFieldDef<number>>;
        };
        readonly legends: {
            [key: string]: ("fill" | "stroke" | "x" | "y" | "strokeWidth" | "strokeDasharray")[];
        };
        createFullSpec(spec: import("../encodeable/types/Specification").PartialSpec<Encoding, import("../encodeable/types/Specification").BaseOptions>, defaultEncoding?: Encoding | undefined): import("../encodeable/types/Specification").FullSpec<Encoding, import("../encodeable/types/Specification").BaseOptions>;
        getChannelNames(): ("fill" | "stroke" | "x" | "y" | "strokeWidth" | "strokeDasharray")[];
        getChannelsAsArray(): (import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").MarkPropChannelDef<string>> | import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").MarkPropChannelDef<number>> | import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").XFieldDef<number>> | import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").YFieldDef<number>> | import("../encodeable/ChannelEncoder").default<import("../encodeable/types/ChannelDef").MarkPropChannelDef<boolean>>)[];
        getGroupBys(): string[];
        getLegendInfos(data: Partial<import("../encodeable/types/Data").PlainObject<string, any>>[]): {
            field: string;
            value: string | number | boolean | Date | null | undefined;
            encodedValues: Partial<Record<"fill" | "stroke" | "x" | "y" | "strokeWidth" | "strokeDasharray", string | number | boolean | null | undefined>>;
        }[][];
        hasLegend(): boolean;
    };
    readonly DEFAULT_ENCODING: Encoding;
    readonly ALL_CHANNEL_OPTIONS: Partial<{
        fill: import("../encodeable/types/Channel").ChannelOptions;
        stroke: import("../encodeable/types/Channel").ChannelOptions;
        strokeDasharray: import("../encodeable/types/Channel").ChannelOptions;
        strokeWidth: import("../encodeable/types/Channel").ChannelOptions;
        x: import("../encodeable/types/Channel").ChannelOptions;
        y: import("../encodeable/types/Channel").ChannelOptions;
    }>;
};
export default class Encoder extends Encoder_base {
}
export {};
