import { CategoricalColorScale } from '@superset-ui/color';
import { ScaleOrdinal, ScaleLinear, ScaleLogarithmic, ScalePower, ScaleTime, ScaleQuantile, ScaleQuantize, ScaleThreshold, ScalePoint, ScaleBand } from 'd3-scale';
import { Value } from 'vega-lite/build/src/channeldef';
import { Type } from 'vega-lite/build/src/type';
import { ScaleType } from 'vega-lite/build/src/scale';
import { ChannelDef, ExtractChannelOutput } from '../types/ChannelDef';
import { ChannelType } from '../types/Channel';
import { Scale } from '../types/Scale';
export interface ScaleAgent<Output extends Value> {
    config: Scale<Output>;
    setDomain: (newDomain: number[] | string[] | boolean[] | Date[]) => void;
    encodeValue: (value: number | string | boolean | null | undefined | Date) => Output;
    scale: CategoricalColorScale | ScaleLinear<Output, Output> | ScaleLogarithmic<Output, Output> | ScalePower<Output, Output> | ScaleLogarithmic<Output, Output> | ScaleTime<Output, Output> | ScaleQuantile<Output> | ScaleQuantize<Output> | ScaleThreshold<number | string | Date, Output> | ScaleOrdinal<{
        toString(): string;
    }, Output> | ScalePoint<{
        toString(): string;
    }> | ScaleBand<{
        toString(): string;
    }>;
    scaleTypeCategory: 'continuous' | 'discrete' | 'discretizing' | undefined;
}
export interface ScaleTypeToD3ScaleType<Output> {
    [ScaleType.LINEAR]: ScaleLinear<Output, Output>;
    [ScaleType.LOG]: ScaleLogarithmic<Output, Output>;
    [ScaleType.POW]: ScalePower<Output, Output>;
    [ScaleType.SQRT]: ScalePower<Output, Output>;
    [ScaleType.SYMLOG]: ScaleLogarithmic<Output, Output>;
    [ScaleType.TIME]: ScaleTime<Output, Output>;
    [ScaleType.UTC]: ScaleTime<Output, Output>;
    [ScaleType.QUANTILE]: ScaleQuantile<Output>;
    [ScaleType.QUANTIZE]: ScaleQuantize<Output>;
    [ScaleType.THRESHOLD]: ScaleThreshold<number | string | Date, Output>;
    [ScaleType.BIN_ORDINAL]: ScaleOrdinal<{
        toString(): string;
    }, Output>;
    [ScaleType.ORDINAL]: ScaleOrdinal<{
        toString(): string;
    }, Output>;
    [ScaleType.POINT]: ScalePoint<{
        toString(): string;
    }>;
    [ScaleType.BAND]: ScaleBand<{
        toString(): string;
    }>;
}
export declare function deriveScaleTypeFromDataTypeAndChannelType(dataType: Type | undefined, channelType: ChannelType, isBinned?: boolean): ScaleType | undefined;
export default function extractScale<Def extends ChannelDef>(channelType: ChannelType, definition: Def, namespace?: string): ScaleAgent<ExtractChannelOutput<Def>> | undefined;
