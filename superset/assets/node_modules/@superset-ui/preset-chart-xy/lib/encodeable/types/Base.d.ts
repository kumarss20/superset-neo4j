export declare type ObjectWithKeysFromAndValueType<T extends {}, V> = {
    [key in keyof T]: V;
};
export declare type Unarray<T> = T extends Array<infer U> ? U : T;
export declare type MayBeArray<T> = T | T[];
export declare function isArray<T>(maybeArray: T | T[]): maybeArray is T[];
export declare function isNotArray<T>(maybeArray: T | T[]): maybeArray is T;
export declare function isDefined<T>(x: any): x is T;
