import { ValueDef, Value } from 'vega-lite/build/src/channeldef';
import { Type } from 'vega-lite/build/src/type';
import { TimeFormatter } from '@superset-ui/time-format';
import { NumberFormatter } from '@superset-ui/number-format';
import { WithScale } from './Scale';
import { WithXAxis, WithYAxis, WithAxis } from './Axis';
import { WithLegend } from './Legend';
export declare type Formatter = NumberFormatter | TimeFormatter | ((d: any) => string);
export interface FieldDef {
    field: string;
    format?: string;
    title?: string;
}
export interface TypedFieldDef extends FieldDef {
    type: Type;
}
export declare type TextFieldDef = FieldDef;
declare type ScaleFieldDef<Output extends Value = Value> = TypedFieldDef & WithScale<Output>;
export declare type MarkPropFieldDef<Output extends Value = Value> = ScaleFieldDef<Output> & WithLegend;
declare type PositionFieldDefBase<Output extends Value = Value> = ScaleFieldDef<Output>;
export declare type XFieldDef<Output extends Value = Value> = PositionFieldDefBase<Output> & WithXAxis;
export declare type YFieldDef<Output extends Value = Value> = PositionFieldDefBase<Output> & WithYAxis;
export declare type PositionFieldDef<Output extends Value = Value> = ScaleFieldDef<Output> & WithAxis;
export declare type MarkPropChannelDef<Output extends Value = Value> = MarkPropFieldDef<Output> | ValueDef<Output>;
export declare type TextChannelDef<Output extends Value = Value> = TextFieldDef | ValueDef<Output>;
export declare type NonValueDef<Output extends Value = Value> = XFieldDef<Output> | YFieldDef<Output> | MarkPropFieldDef<Output> | TextFieldDef;
export declare type ChannelDef<Output extends Value = Value> = NonValueDef<Output> | ValueDef<Output>;
export declare type ExtractChannelOutput<Def> = Def extends ChannelDef<infer Output> ? Output : never;
export declare function isValueDef<Output extends Value>(channelDef: ChannelDef<Output>): channelDef is ValueDef<Output>;
export declare function isNonValueDef<Output extends Value>(channelDef: ChannelDef<Output>): channelDef is NonValueDef<Output>;
export declare function isFieldDef<Output extends Value>(channelDef: ChannelDef<Output>): channelDef is FieldDef;
export declare function isTypedFieldDef<Output extends Value>(channelDef: ChannelDef<Output>): channelDef is TypedFieldDef;
export declare function isScaleFieldDef<Output extends Value>(channelDef: ChannelDef<Output>): channelDef is ScaleFieldDef<Output>;
export declare function isMarkPropFieldDef<Output extends Value>(channelDef: ChannelDef<Output>): channelDef is MarkPropFieldDef<Output>;
export declare function isPositionFieldDef<Output extends Value>(channelDef: ChannelDef<Output>): channelDef is PositionFieldDef<Output>;
export {};
