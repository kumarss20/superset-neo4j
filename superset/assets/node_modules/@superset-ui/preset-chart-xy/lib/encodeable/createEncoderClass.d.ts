import { PartialSpec, BaseOptions } from './types/Specification';
import { MayBeArray } from './types/Base';
import { ChannelDef } from './types/ChannelDef';
import { ChannelType, AllChannelOptions } from './types/Channel';
export default function createEncoderClass<ChannelTypes extends Record<string, ChannelType>, Encoding extends Record<keyof ChannelTypes, MayBeArray<ChannelDef>>, Options extends BaseOptions = BaseOptions>({ channelTypes, defaultEncoding, allChannelOptions: allChannelOptions, }: {
    channelTypes: ChannelTypes;
    defaultEncoding: Encoding;
    allChannelOptions?: AllChannelOptions<Encoding>;
}): {
    new (spec: PartialSpec<Encoding, Options>): {
        readonly spec: import("./types/Specification").FullSpec<Encoding, Options>;
        readonly channelTypes: ChannelTypes;
        readonly channels: { readonly [k in keyof Encoding]: Encoding[k] extends any[] ? import("./ChannelEncoder").default<import("./types/Base").Unarray<Encoding[k]>>[] : import("./ChannelEncoder").default<import("./types/Base").Unarray<Encoding[k]>>; };
        readonly legends: {
            [key: string]: (keyof Encoding)[];
        };
        createFullSpec(spec: PartialSpec<Encoding, Options>, defaultEncoding?: Encoding | undefined): import("./types/Specification").FullSpec<Encoding, Options>;
        getChannelNames(): (keyof ChannelTypes)[];
        getChannelsAsArray(): { readonly [k in keyof Encoding]: Encoding[k] extends any[] ? import("./ChannelEncoder").default<import("./types/Base").Unarray<Encoding[k]>>[] : import("./ChannelEncoder").default<import("./types/Base").Unarray<Encoding[k]>>; }[keyof ChannelTypes][];
        getGroupBys(): string[];
        getLegendInfos(data: Partial<import("./types/Data").PlainObject<string, any>>[]): {
            field: string;
            value: string | number | boolean | Date | null | undefined;
            encodedValues: Partial<Record<keyof Encoding, string | number | boolean | null | undefined>>;
        }[][];
        hasLegend(): boolean;
    };
    readonly DEFAULT_ENCODING: Encoding;
    readonly ALL_CHANNEL_OPTIONS: Partial<{ [k in keyof Encoding]: import("./types/Channel").ChannelOptions; }>;
};
