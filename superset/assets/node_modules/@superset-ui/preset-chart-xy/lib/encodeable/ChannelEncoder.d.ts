import { ScaleAgent } from './parsers/extractScale';
import { ChannelOptions, ChannelType, ChannelInput } from './types/Channel';
import { PlainObject, Dataset } from './types/Data';
import { ChannelDef, ExtractChannelOutput } from './types/ChannelDef';
import AxisAgent from './AxisAgent';
export default class ChannelEncoder<Def extends ChannelDef> {
    readonly name: string | Symbol | number;
    readonly type: ChannelType;
    readonly definition: Def;
    readonly options: ChannelOptions;
    protected readonly getValue: (datum: PlainObject) => ChannelInput;
    readonly encodeValue: (value: ChannelInput) => ExtractChannelOutput<Def> | null | undefined;
    readonly formatValue: (value: ChannelInput | {
        toString(): string;
    }) => string;
    readonly scale?: ScaleAgent<ExtractChannelOutput<Def>>;
    readonly axis?: AxisAgent<Def>;
    constructor({ name, type, definition, options, }: {
        name: string | Symbol | number;
        type: ChannelType;
        definition: Def;
        options?: ChannelOptions;
    });
    encode(datum: PlainObject): ExtractChannelOutput<Def> | null | undefined;
    encode(datum: PlainObject, otherwise: ExtractChannelOutput<Def>): ExtractChannelOutput<Def>;
    format(datum: PlainObject): string;
    get<T extends ChannelInput>(datum: PlainObject, otherwise?: T): T;
    getDomain(data: Dataset): string[] | number[] | [Date, Date];
    getTitle(): string;
    hasLegend(): boolean;
    isGroupBy(): boolean;
    isX(): boolean;
    isXY(): boolean;
    isY(): boolean;
}
