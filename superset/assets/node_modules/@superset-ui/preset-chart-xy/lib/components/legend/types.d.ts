import { Value } from 'vega-lite/build/src/channeldef';
import { CSSProperties } from 'react';
import { ChannelInput } from '../../encodeable/types/Channel';
import AbstractEncoder from '../../encodeable/AbstractEncoder';
export declare type LegendItemInfo<Encoding> = {
    field: string;
    value: ChannelInput;
    encodedValues: Partial<Record<keyof Encoding, Value | undefined>>;
};
export declare type LegendItemMarkRendererType<Encoding> = React.ComponentType<{
    item: LegendItemInfo<Encoding>;
}>;
export declare type LegendItemLabelRendererType<Encoding> = React.ComponentType<{
    item: LegendItemInfo<Encoding>;
}>;
export declare type LegendItemRendererProps<Encoding> = {
    item: LegendItemInfo<Encoding>;
    MarkRenderer?: LegendItemMarkRendererType<Encoding>;
    LabelRenderer?: LegendItemLabelRendererType<Encoding>;
};
export declare type LegendItemRendererType<Encoding> = React.ComponentType<LegendItemRendererProps<Encoding>>;
export declare type LegendGroupRendererProps<Encoding> = {
    items: LegendItemInfo<Encoding>[];
    ItemRenderer?: LegendItemRendererType<Encoding>;
    ItemMarkRenderer?: LegendItemMarkRendererType<Encoding>;
    ItemLabelRenderer?: LegendItemLabelRendererType<Encoding>;
    style?: CSSProperties;
};
export declare type LegendGroupRendererType<Encoding> = React.ComponentType<LegendGroupRendererProps<Encoding>>;
export declare type LegendRendererProps<Encoding> = {
    groups: LegendItemInfo<Encoding>[][];
    LegendGroupRenderer?: LegendGroupRendererType<Encoding>;
    LegendItemRenderer?: LegendItemRendererType<Encoding>;
    LegendItemMarkRenderer?: LegendItemMarkRendererType<Encoding>;
    LegendItemLabelRenderer?: LegendItemLabelRendererType<Encoding>;
    style?: CSSProperties;
};
export declare type LegendRendererType<Encoder> = React.ComponentType<LegendRendererProps<Encoder>>;
export declare type LegendHooks<Encoder, Encoding = Encoder extends AbstractEncoder<any, infer Encoding> ? Encoding : never> = {
    LegendRenderer?: LegendRendererType<Encoding>;
    LegendGroupRenderer?: LegendGroupRendererType<Encoding>;
    LegendItemRenderer?: LegendItemRendererType<Encoding>;
    LegendItemMarkRenderer?: LegendItemMarkRendererType<Encoding>;
    LegendItemLabelRenderer?: LegendItemLabelRendererType<Encoding>;
};
