function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}/* eslint-disable camelcase */import{isSqlaFormData}from"./types/QueryFormData";import convertMetric from"./convertMetric";import processFilters from"./processFilters";import processMetrics from"./processMetrics";import processExtras from"./processExtras";export var DTTM_ALIAS="__timestamp";function processGranularity(a){return isSqlaFormData(a)?a.granularity_sqla:a.granularity}/**
 * Build the common segments of all query objects (e.g. the granularity field derived from
 * either sql alchemy or druid). The segments specific to each viz type is constructed in the
 * buildQuery method for each viz type (see `wordcloud/buildQuery.ts` for an example).
 * Note the type of the formData argument passed in here is the type of the formData for a
 * specific viz, which is a subtype of the generic formData shared among all viz types.
 */export default function buildQueryObject(a){var b=a.time_range,c=a.since,d=a.until,e=a.columns,f=void 0===e?[]:e,g=a.groupby,h=void 0===g?[]:g,i=a.order_desc,j=a.row_limit,k=a.limit,l=a.timeseries_limit_metric,m=new Set([].concat(f,h)),n=_extends({extras:processExtras(a),granularity:processGranularity(a),groupby:Array.from(m),is_timeseries:m.has(DTTM_ALIAS),metrics:processMetrics(a),order_desc:!("undefined"!=typeof i)||i,orderby:[],row_limit:+j,since:c,time_range:b,timeseries_limit:k?+k:0,timeseries_limit_metric:l?convertMetric(l):null,until:d},processFilters(a));return n}