import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
export default function withIcon(name) {
  return WrappedComponent => {
    var _class, _temp;

    return _temp = _class = class Icon extends React.Component {
      render() {
        const {
          accessibilityLabel,
          color,
          decorative,
          flip,
          flipVertical,
          inline,
          size
        } = this.props;
        const props = {
          focusable: 'false',
          role: decorative ? 'presentation' : 'img',
          style: {
            height: size,
            width: size,
            display: inline ? 'inline' : 'block',
            fill: color,
            transform: flip || flipVertical ? "scale(" + (flip ? -1 : 1) + ", " + (flipVertical ? -1 : 1) + ")" : 'scale(1)',
            // keep scale(1) for transition flipping
            transition: 'transform 300ms ease-out'
          }
        };

        if ("production" !== process.env.NODE_ENV) {
          if (!accessibilityLabel && !decorative) {
            // eslint-disable-next-line no-console
            console.error('Missing `accessibilityLabel` or `decorative` for accessibility.');
          }

          if (accessibilityLabel && decorative) {
            // eslint-disable-next-line no-console
            console.error('Only one of `accessibilityLabel` or `decorative` may be used.');
          }
        }

        if (decorative) {
          props['aria-hidden'] = true;
        }

        if (accessibilityLabel) {
          props['aria-label'] = accessibilityLabel;
        }

        return React.createElement(WrappedComponent, props);
      }

    }, _defineProperty(_class, "propTypes", {
      accessibilityLabel: _pt.string,
      decorative: _pt.bool,
      flip: _pt.bool,
      flipVertical: _pt.bool,
      size: _pt.oneOfType([_pt.number, _pt.string]),
      color: _pt.string,
      inline: _pt.bool
    }), _defineProperty(_class, "displayName", name), _defineProperty(_class, "WrappedComponent", WrappedComponent), _defineProperty(_class, "defaultProps", {
      color: 'currentColor',
      flip: false,
      flipVertical: false,
      inline: false,
      size: '1em'
    }), _temp;
  };
}