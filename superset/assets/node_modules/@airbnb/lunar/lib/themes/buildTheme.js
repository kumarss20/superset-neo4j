"use strict";

exports.__esModule = true;
exports.default = buildTheme;

var _buildFont = _interopRequireDefault(require("./buildFont"));

var _size = require("./size");

var _toRGBA = _interopRequireDefault(require("../utils/toRGBA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const borderWidth = 1;
const borderWidthThick = 2;

function buildTheme(options, accents) {
  if (accents === void 0) {
    accents = {};
  }

  const {
    base,
    borderRadius = 4,
    boxShadow = [2, 3],
    brand,
    color,
    disabledOpacity = 0.3,
    transitionTime = '300ms'
  } = options;

  const accent = _extends({
    bg: base,
    bgHover: color.neutral[0],
    bgError: color.danger[0],
    border: color.neutral[2],
    borderActive: color.primary[3],
    // Also focus/selected
    borderHover: color.neutral[3],
    borderError: color.danger[3],
    text: color.neutral[5],
    textActive: color.primary[3],
    textError: color.danger[3]
  }, accents);

  const ui = {
    border: borderWidth + "px solid " + accent.border,
    borderThick: borderWidthThick + "px solid " + accent.border,
    borderRadius,
    borderRadiusThick: borderRadius * 2,
    borderWidth,
    borderWidthThick,
    boxShadow: "0 " + boxShadow[0] + "px " + boxShadow[1] + "px " + (0, _toRGBA.default)(color.neutral[6], 10),
    boxShadowMedium: "0 " + boxShadow[0] * 3 + "px " + boxShadow[1] * 2 + "px " + (0, _toRGBA.default)(color.neutral[6], 15),
    boxShadowLarge: "0 " + boxShadow[0] * 4 + "px " + boxShadow[1] * 4 + "px " + (0, _toRGBA.default)(color.neutral[6], 20),
    disabledOpacity,
    transitionTime
  };
  const font = (0, _buildFont.default)(options.fontFamily);
  const unit = 8;
  return {
    color: {
      accent,
      base,
      brand,
      core: color,
      clear: 'transparent',
      muted: color.neutral[4]
    },
    font,
    pattern: {
      box: {
        border: ui.border,
        borderRadius,
        boxShadow: ui.boxShadow
      },
      disabled: {
        opacity: disabledOpacity,
        cursor: 'normal'
      },
      focused: {
        borderColor: accent.borderActive,
        outline: 'none'
      },
      invalid: {
        color: accent.textError,
        backgroundColor: accent.bgError,
        borderColor: accent.borderError
      },
      offscreen: {
        position: 'absolute',
        left: -9999,
        width: 1,
        height: 1,
        overflow: 'hidden'
      },
      resetButton: {
        appearance: 'none',
        background: 'transparent',
        cursor: 'pointer',
        margin: 0,
        padding: 0,
        border: 0,
        userSelect: 'auto',
        textDecoration: 'none',
        fontSize: 'inherit',
        verticalAlign: 'middle',
        display: 'inline-block'
      },
      smallButton: _extends({}, font.textSmall, {
        padding: unit - borderWidthThick + "px " + (unit * 1.5 - borderWidthThick) + "px"
      }),
      regularButton: _extends({}, font.textRegular, {
        padding: unit * 1.25 - borderWidthThick + "px " + (unit * 1.5 - borderWidthThick) + "px"
      }),
      largeButton: _extends({}, font.textLarge, {
        padding: unit * 1.5 - borderWidthThick + "px " + (unit * 2 - borderWidthThick) + "px"
      })
    },
    breakpoints: _size.breakpoints,
    responsive: _size.responsive,
    transition: {
      box: {
        transition: "background " + transitionTime + ", border " + transitionTime + ", color " + transitionTime
      },
      fade: {
        opacity: 1,
        transition: "opacity " + transitionTime
      }
    },
    ui,
    unit
  };
}