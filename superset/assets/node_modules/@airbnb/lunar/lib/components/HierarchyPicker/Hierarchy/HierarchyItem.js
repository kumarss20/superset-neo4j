"use strict";

exports.__esModule = true;
exports.default = HierarchyItem;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _IconChevronLeft = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconChevronLeft"));

var _IconChevronRight = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconChevronRight"));

var _IconCheck = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconCheck"));

var _useStyles = _interopRequireDefault(require("../../../hooks/useStyles"));

var _useTheme = _interopRequireDefault(require("../../../hooks/useTheme"));

var _keys = require("../../../keys");

var _DirectionalIcon = _interopRequireDefault(require("../../DirectionalIcon"));

var _Text = _interopRequireDefault(require("../../Text"));

var _styles = require("./styles");

exports.ICON_SIZE = _styles.ICON_SIZE;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function HierarchyItem(_ref) {
  let {
    item,
    definition,
    renderItem,
    selected,
    focused,
    onSubtree,
    onItemPicked,
    onDomFocusDeeper,
    onDomFocusShallower
  } = _ref;
  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheetItem);
  const theme = (0, _useTheme.default)();

  const goDeeper = () => {
    if (item.items || item.description) {
      onSubtree(definition, onDomFocusDeeper, true);
    }
  };

  const maybePick = () => {
    if (item.readonly) {
      onItemPicked(null);
      goDeeper();
    } else {
      onItemPicked(definition);
    }
  };

  const goShallower = () => {
    onDomFocusShallower();
    onSubtree(definition.slice(0, -2), undefined, true);
  };

  const handleClick = () => {
    maybePick();
  };

  const handleMouseMove = () => {
    onSubtree(definition);
  };

  const handleKeyDown = event => {
    switch (event.key) {
      case _keys.ENTER:
      case _keys.SPACE:
        maybePick();
        break;

      case _keys.ARROW_RIGHT:
        goDeeper();
        break;

      case _keys.ARROW_LEFT:
        goShallower();
        break;

      default:
        break;
    }
  };

  const getRenderItem = () => {
    return renderItem ? renderItem(item, selected, focused) : _react.default.createElement(_react.default.Fragment, null, selected && _react.default.createElement("span", {
      className: cx(styles.checkmark)
    }, _react.default.createElement(_IconCheck.default, {
      decorative: true,
      color: theme.color.core.primary[3],
      size: _styles.ICON_SIZE
    })), _react.default.createElement("span", {
      className: cx(styles.label)
    }, _react.default.createElement(_Text.default, null, item.label || item.name)));
  };

  return _react.default.createElement("div", {
    className: cx(styles.item, focused && styles.item_focused, item.readonly && styles.item_readonly),
    role: "option",
    "aria-selected": selected,
    tabIndex: focused ? 1 : 0,
    onMouseMove: handleMouseMove,
    onClick: handleClick // this is needed to find a focused parent item in a vertically aligned list
    ,
    onKeyDown: handleKeyDown
  }, getRenderItem(), item.items && _react.default.createElement(_DirectionalIcon.default, {
    decorative: true,
    inline: true,
    direction: "right",
    left: _IconChevronLeft.default,
    right: _IconChevronRight.default,
    size: "1.4em"
  }));
}

HierarchyItem.propTypes = {
  item: _propTypes.default.any.isRequired,
  definition: _propTypes.default.any.isRequired,
  renderItem: _propTypes.default.any,
  selected: _propTypes.default.bool.isRequired,
  focused: _propTypes.default.bool.isRequired,
  onSubtree: _propTypes.default.func.isRequired,
  onItemPicked: _propTypes.default.func.isRequired,
  onDomFocusDeeper: _propTypes.default.func.isRequired,
  onDomFocusShallower: _propTypes.default.func.isRequired
};