"use strict";

exports.__esModule = true;
exports.default = Highlight;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _useStyles = _interopRequireDefault(require("../../../hooks/useStyles"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Highlight(_ref) {
  let {
    fallback,
    match,
    word: searchWord
  } = _ref;
  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheetHighlight);

  if (!match) {
    return _react.default.createElement("span", null, fallback);
  }

  const {
    value,
    indices = []
  } = match;
  const matchIndices = [...indices]; // clean ref

  const output = [];
  let pair = matchIndices.shift();
  let substr = '';

  for (let i = 0; i < value.length; i += 1) {
    // if substr exists and we reach the start index of a match, push current substr and reset
    if (pair && substr && i === pair[0]) {
      output.push(_react.default.createElement("span", {
        key: i + "-start"
      }, substr));
      substr = '';
    }

    substr += value.charAt(i); // push highlight when we reach the end index of a match

    if (pair && i === pair[1]) {
      if (substr) {
        output.push(_react.default.createElement("span", {
          key: "end-" + i,
          className: cx(styles.highlight, substr.trim().toLowerCase() === searchWord && styles.highlight_dark)
        }, _react.default.createElement("mark", null, substr)));
      }

      substr = '';
      pair = matchIndices.shift();
    }
  }

  if (substr) {
    output.push(_react.default.createElement("span", {
      key: "last"
    }, substr));
  }

  return _react.default.createElement("span", null, output);
}

Highlight.propTypes = {
  fallback: _propTypes.default.string,
  match: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.oneOf([null])]),
  word: _propTypes.default.string
};