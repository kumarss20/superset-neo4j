import React from 'react';
import { FuseOptions } from 'fuse.js';
import { WithStylesProps } from '../../composers/withStyles';
import { ItemPickedHandler, ItemRenderer, ItemShape, Labeler, ToggleHandler, TreePath } from './types';
import defaultFormatter from './defaultFormatter';
export declare type Props = {
    /** Content to display in the select button. */
    children?: React.ReactNode;
    /** An array of names define the path to the currently selected item. */
    chosen?: TreePath;
    /** Disables the picker. */
    disabled?: boolean;
    /** A function to format the display of choice. */
    formatter?: (chosen: TreePath, labeler: Labeler) => string;
    /** Fuse.js search options to override. */
    fuseOptions?: FuseOptions<{}>;
    /** Maximum height of a (vertically aligned) hierarchy menu. */
    hierarchyMaxHeight?: number;
    /** Width of a single level of the hierarchy menu. */
    hierarchyWidth?: number;
    /** Include path of parent nodes in search index. */
    indexParentPath?: boolean;
    /** Styles the picker as containing an invalid value. */
    invalid?: boolean;
    /** The hierarchy of things to choose from. */
    items: ItemShape[];
    /** Text to show when there are no search results. */
    noResultsLabel?: string;
    /** Callback for when user selects an item. */
    onItemPicked: ItemPickedHandler;
    /** Callback for when user opens/closes the dropdown. */
    onPickerToggle?: ToggleHandler;
    /** Override rendering of a hierarchy list item. */
    renderItem?: ItemRenderer;
    /** Maximum height of Hierarchy Search result list. */
    searchMaxHeight?: number;
    /** Placeholder label for the search input. */
    searchPlaceholder?: string;
    /** Width of the Hierarchy Search result list. */
    searchWidth?: number;
    /** Vertically align nested hierarchy levels. */
    verticallyAlign?: boolean;
};
export declare type State = {
    open: boolean;
};
export declare class HierarchyPicker extends React.Component<Props & WithStylesProps, State> {
    static defaultProps: {
        chosen: never[];
        disabled: boolean;
        formatter: typeof defaultFormatter;
        hierarchyMaxHeight: number;
        hierarchyWidth: number;
        invalid: boolean;
        onPickerToggle: () => void;
        searchMaxHeight: number;
        searchWidth: number;
        verticallyAlign: boolean;
    };
    state: {
        open: boolean;
    };
    ref: React.RefObject<HTMLDivElement>;
    /**
     * Given a "chosen" array, what's the best label for the item?
     */
    getLabel: (chosen: TreePath) => string;
    boundFormatter: (chosen: TreePath) => string;
    toggle: () => void;
    private handleClose;
    private handleClick;
    private handleKeyDown;
    render(): JSX.Element;
}
declare const _default: import("aesthetic-react").StyledComponent<import("../../types").Theme, Props & import("aesthetic-react").WithStylesWrapperProps>;
export default _default;
//# sourceMappingURL=index.d.ts.map