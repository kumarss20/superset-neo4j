import React from 'react';
import Fuse from 'fuse.js';
import { WithStylesProps } from '../../../composers/withStyles';
import { Formatter, ItemPickedHandler, ItemShape, SearchItemShape, SearchItemResult } from '../types';
export declare type Props = {
    items?: ItemShape[];
    onItemPicked: ItemPickedHandler;
    formatter: Formatter;
    query?: string;
    noResultsLabel: NonNullable<React.ReactNode>;
    onSearch: (searchQuery: string) => void;
    placeholder?: string;
    indexParentPath?: boolean;
    fuseOptions?: Fuse.FuseOptions<SearchItemShape>;
    width: number;
    maxHeight?: number;
};
export declare class Search extends React.Component<Props & WithStylesProps> {
    static defaultProps: {
        fuseOptions: {};
        items: never[];
        query: string;
    };
    fuse?: Fuse<SearchItemShape, Fuse.FuseOptions<SearchItemShape>>;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props): void;
    buildIndex(inputItems?: ItemShape[]): void;
    getItemValue: (result: SearchItemResult) => string;
    handleItemPicked: (itemValue: string, result: SearchItemResult | null) => void;
    handleSearch: (query: string) => SearchItemResult[];
    handleAsyncSearch: (query: string) => Promise<SearchItemResult[]>;
    renderItem: ({ matches, item: { formattedParents, ...item } }: SearchItemResult) => JSX.Element;
    render(): JSX.Element;
}
declare const _default: import("aesthetic-react").StyledComponent<import("../../../types").Theme, Props & import("aesthetic-react").WithStylesWrapperProps>;
export default _default;
//# sourceMappingURL=index.d.ts.map