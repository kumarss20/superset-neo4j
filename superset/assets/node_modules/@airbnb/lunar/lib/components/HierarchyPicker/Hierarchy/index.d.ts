/// <reference types="lodash" />
import React from 'react';
import { DeepFocusHandler, Formatter, ItemRenderer, ItemShape, ItemPickedHandler, TreePath } from '../types';
export declare type Props = {
    /** An array of names define the path to the currently selected item. */
    chosen?: TreePath;
    /** A function to format the display of choice. */
    formatter: Formatter;
    /** Maximum height of the hierarchy menu. */
    hierarchyMaxHeight?: number;
    /** Width of a single level of the hierarchy menu. */
    hierarchyWidth?: number;
    /** The hierarchy of things to choose from. */
    items?: ItemShape[];
    /** Callback for when user selects an item. */
    onItemPicked: ItemPickedHandler;
    /** Render a hierarchy item */
    renderItem?: ItemRenderer;
    /** Vertically align nested hierarchy levels. */
    verticallyAlign?: boolean;
};
export declare type State = {
    focusDef: TreePath;
    filteredItems: ItemShape[];
};
export default class Hierarchy extends React.Component<Props, State> {
    static defaultProps: {
        chosen: never[];
        items: never[];
    };
    state: {
        focusDef: never[];
        filteredItems: never[];
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props): void;
    filterItems(): void;
    setFocus(focusDef: TreePath, callback?: DeepFocusHandler): void;
    setFocusDebounced: ((focusDef: TreePath, callback?: DeepFocusHandler | undefined) => void) & import("lodash").Cancelable;
    private handleSubtree;
    private handleItemPicked;
    render(): JSX.Element;
}
//# sourceMappingURL=index.d.ts.map