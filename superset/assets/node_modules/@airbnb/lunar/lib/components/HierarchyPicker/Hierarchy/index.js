"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _HierarchyList = _interopRequireDefault(require("./HierarchyList"));

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Hierarchy extends _react.default.Component {
  constructor() {
    var _this;

    super(...arguments);
    _this = this;

    _defineProperty(this, "state", {
      focusDef: [],
      filteredItems: []
    });

    _defineProperty(this, "setFocusDebounced", (0, _debounce.default)(this.setFocus, 100));

    _defineProperty(this, "handleSubtree", function (focusDef, callback, immediate) {
      if (immediate === void 0) {
        immediate = false;
      }

      if (immediate) {
        _this.setFocus(focusDef, callback);
      } else {
        _this.setFocusDebounced(focusDef, callback);
      }
    });

    _defineProperty(this, "handleItemPicked", chosen => {
      this.props.onItemPicked(chosen, {
        origin: 'Hierarchy'
      });
    });
  }

  componentDidMount() {
    this.filterItems();
  }

  componentDidUpdate(prevProps) {
    if (this.props.items !== prevProps.items) {
      this.filterItems();
    }
  }

  filterItems() {
    this.setState({
      filteredItems: (this.props.items || []).reduce(_helpers.readonlyReducer, [])
    });
  }

  setFocus(focusDef, callback) {
    this.setState({
      focusDef
    }, callback);
  }

  render() {
    const {
      filteredItems,
      focusDef
    } = this.state;
    const {
      chosen,
      renderItem,
      hierarchyMaxHeight,
      hierarchyWidth,
      verticallyAlign
    } = this.props;
    return _react.default.createElement(_HierarchyList.default, {
      chosen: chosen,
      focus: focusDef,
      items: filteredItems,
      maxHeight: hierarchyMaxHeight,
      renderItem: renderItem,
      width: hierarchyWidth,
      verticallyAlign: verticallyAlign,
      onItemPicked: this.handleItemPicked,
      onSubtree: this.handleSubtree
    });
  }

}

exports.default = Hierarchy;

_defineProperty(Hierarchy, "propTypes", {
  chosen: _propTypes.default.any,
  formatter: _propTypes.default.any.isRequired,
  hierarchyMaxHeight: _propTypes.default.number,
  hierarchyWidth: _propTypes.default.number,
  items: _propTypes.default.arrayOf(_propTypes.default.any),
  onItemPicked: _propTypes.default.func.isRequired,
  renderItem: _propTypes.default.any,
  verticallyAlign: _propTypes.default.bool
});

_defineProperty(Hierarchy, "defaultProps", {
  chosen: [],
  items: []
});