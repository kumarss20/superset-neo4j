"use strict";

exports.__esModule = true;
exports.default = HierarchyList;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Text = _interopRequireDefault(require("../../Text"));

var _useStyles = _interopRequireDefault(require("../../../hooks/useStyles"));

var _HierarchyItem = _interopRequireDefault(require("./HierarchyItem"));

var _ItemDescription = _interopRequireDefault(require("./ItemDescription"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function HierarchyList(_ref) {
  let {
    items = [],
    chosen = [],
    focus = [],
    maxHeight,
    renderItem,
    parents = [],
    onSubtree,
    onItemPicked,
    width,
    verticallyAlign
  } = _ref;

  const ref = _react.default.createRef();

  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheetList);
  const passThruProps = {
    chosen,
    maxHeight,
    renderItem,
    onSubtree,
    onItemPicked,
    width
  };

  const isChosen = definition => definition.every((name, i) => chosen[i] === name);
  /** Returns the closest <li> to the current document activeElement */


  const closestRowToActiveElement = () => {
    const {
      activeElement
    } = document;

    if (!activeElement || !activeElement.closest || !ref.current) {
      return null;
    }

    return activeElement.closest('li');
  };

  const handleDomFocusDeeper = () => {
    const li = closestRowToActiveElement();
    let deeper;

    if (verticallyAlign) {
      // next HierarchyList is a sibling
      const ul = li && li.parentElement;
      const parentDiv = ul && ul.parentElement;
      const nextMenu = parentDiv && parentDiv.nextElementSibling;
      deeper = nextMenu && nextMenu.querySelector('[tabindex]');
    } else {
      // next HierarchyList is a child
      const ul = li && li.lastElementChild;
      deeper = ul && ul.querySelector('[tabindex]');
    }

    if (deeper) {
      deeper.focus();
    }
  };

  const handleDomFocusShallower = () => {
    const li = closestRowToActiveElement();
    let shallower;

    if (verticallyAlign) {
      // prev HierarchyList is a sibling
      const ul = li && li.parentElement;
      const parentDiv = ul && ul.parentElement;
      const prevMenu = parentDiv && parentDiv.previousElementSibling; // focused parent tabIndex is higher than other parents

      shallower = prevMenu && prevMenu.querySelector('[tabindex="1"]');
    } else {
      // prev HierarchyList is a parent
      const parentLi = li && li.parentElement && li.parentElement.closest('li');
      shallower = parentLi && parentLi.querySelector('[tabindex]');
    }

    if (shallower) {
      shallower.focus();
    }
  };

  const renderAside = item => {
    if (item.items || !item.description) {
      return null;
    }

    return _react.default.createElement("aside", {
      className: cx(styles.pane, // descriptions are always nested
      styles.pane_nested, !verticallyAlign && styles.pane_verticallyOffset, styles.aside, {
        width
      })
    }, _react.default.createElement("button", {
      className: cx(styles.asideButton),
      tabIndex: -1,
      type: "button",
      onClick: () => onItemPicked([...parents, item.name])
    }, _react.default.createElement(_ItemDescription.default, {
      item: item
    })));
  };

  if (items.length === 0) {
    return null;
  }

  const [focusName, ...focusRest] = focus;
  const isNested = parents.length > 0; // Track focused item to render as a sibling if vertically aligned

  let focusedItem;
  let currentSection;
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", {
    key: "list",
    ref: ref,
    className: cx(styles.pane, verticallyAlign && styles.pane_verticallyAlign, isNested && styles.pane_nested, isNested && !verticallyAlign && styles.pane_verticallyOffset, {
      width,
      maxHeight: verticallyAlign ? maxHeight : undefined,
      zIndex: 1
    })
  }, _react.default.createElement("ul", {
    className: cx(styles.list)
  }, items.map((item, index) => {
    const {
      name,
      section
    } = item;
    const definition = parents.concat(name);
    const isFocused = name === focusName;
    const shouldRenderSection = typeof section === 'string' && section !== currentSection;
    focusedItem = verticallyAlign && isFocused ? item : focusedItem;
    currentSection = shouldRenderSection ? section : currentSection;
    return _react.default.createElement(_react.default.Fragment, {
      key: item.name
    }, shouldRenderSection && index > 0 ? _react.default.createElement("li", {
      className: cx(styles.divider)
    }) : null, shouldRenderSection && section ? _react.default.createElement("li", {
      className: cx(styles.sectionHeader)
    }, _react.default.createElement(_Text.default, {
      small: true,
      bold: true,
      uppercased: true
    }, section)) : null, _react.default.createElement("li", {
      className: cx(styles.row)
    }, _react.default.createElement(_HierarchyItem.default, _extends({}, passThruProps, {
      item: item,
      definition: definition,
      selected: isChosen(definition),
      focused: isFocused,
      onDomFocusDeeper: handleDomFocusDeeper,
      onDomFocusShallower: handleDomFocusShallower
    })), !verticallyAlign && isFocused && item.items && item.items.length > 0 ? _react.default.createElement(HierarchyList, _extends({}, passThruProps, {
      items: item.items,
      focus: focusRest,
      parents: parents.concat(item.name),
      verticallyAlign: false
    })) : !verticallyAlign && isFocused && renderAside(item)));
  }))), verticallyAlign && focusedItem && focusedItem.items && focusedItem.items.length > 0 ? _react.default.createElement(HierarchyList, _extends({
    key: "sub-list"
  }, passThruProps, {
    verticallyAlign: true,
    items: focusedItem.items,
    focus: focusRest,
    parents: parents.concat(focusedItem.name)
  })) : verticallyAlign && focusedItem && renderAside(focusedItem));
}

HierarchyList.propTypes = {
  items: _propTypes.default.arrayOf(_propTypes.default.any),
  chosen: _propTypes.default.any,
  focus: _propTypes.default.any.isRequired,
  maxHeight: _propTypes.default.number,
  renderItem: _propTypes.default.any,
  parents: _propTypes.default.any,
  onSubtree: _propTypes.default.func.isRequired,
  onItemPicked: _propTypes.default.func.isRequired,
  width: _propTypes.default.number,
  verticallyAlign: _propTypes.default.bool
};