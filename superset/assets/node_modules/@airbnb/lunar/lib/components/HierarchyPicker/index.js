"use strict";

exports.__esModule = true;
exports.default = exports.HierarchyPicker = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _IconCaretDown = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconCaretDown"));

var _Overlay = _interopRequireDefault(require("../Overlay"));

var _keys = require("../../keys");

var _Translate = _interopRequireDefault(require("../Translate"));

var _Text = _interopRequireDefault(require("../Text"));

var _Picker = _interopRequireDefault(require("./Picker"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _styles = require("./styles");

var _defaultFormatter = _interopRequireDefault(require("./defaultFormatter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class HierarchyPicker extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      open: false
    });

    _defineProperty(this, "ref", _react.default.createRef());

    _defineProperty(this, "getLabel", chosen => {
      const label = chosen.reduce((items, path, i) => {
        if (Array.isArray(items) && items.length > 0) {
          const item = items.find((_ref) => {
            let {
              name
            } = _ref;
            return path === name;
          });

          if (!item) {
            return '';
          }

          return i < chosen.length - 1 ? item.items || [] : item.label || item.name;
        }

        return '';
      }, this.props.items);
      return typeof label === 'string' ? label : '';
    });

    _defineProperty(this, "boundFormatter", chosen => this.props.formatter(chosen, this.getLabel));

    _defineProperty(this, "toggle", () => {
      if (this.props.disabled) {
        return;
      }

      this.setState(state => ({
        open: !state.open
      }), () => {
        const {
          open
        } = this.state;

        if (open) {
          this.props.onPickerToggle(true);
        } else {
          this.handleClose();
        }
      });
    });

    _defineProperty(this, "handleClose", () => {
      this.props.onPickerToggle(false);
      this.setState({
        open: false
      });
      const el = this.ref.current;

      if (el) {
        el.focus();
      }
    });

    _defineProperty(this, "handleClick", () => {
      this.toggle();
    });

    _defineProperty(this, "handleKeyDown", event => {
      if (event.target !== this.ref.current) {
        return;
      }

      switch (event.key) {
        case _keys.ENTER:
        case _keys.SPACE:
          event.preventDefault();
          this.toggle();
          break;

        default:
          break;
      }
    });
  }

  render() {
    const _this$props = this.props,
          {
      cx,
      children,
      disabled,
      invalid,
      noResultsLabel,
      searchPlaceholder,
      styles
    } = _this$props,
          passThruProps = _objectWithoutPropertiesLoose(_this$props, ["cx", "children", "disabled", "invalid", "noResultsLabel", "searchPlaceholder", "styles"]);

    const {
      chosen
    } = passThruProps;
    const {
      open
    } = this.state;
    return _react.default.createElement("div", null, _react.default.createElement("div", {
      ref: this.ref,
      className: cx(styles.selectlike, !disabled && styles.selectlike_enabled, styles.input, styles.select, invalid && styles.input_invalid, disabled && styles.input_disabled),
      tabIndex: disabled ? -1 : 0,
      role: "button",
      onKeyDown: this.handleKeyDown,
      onClick: this.handleClick
    }, children || _react.default.createElement(_Text.default, null, this.boundFormatter(chosen || [])), _react.default.createElement("span", {
      className: cx(styles.arrow)
    }, _react.default.createElement(_IconCaretDown.default, {
      decorative: true,
      size: "1.5em"
    }))), _react.default.createElement(_Overlay.default, {
      open: open,
      onClose: this.handleClose
    }, _react.default.createElement(_Picker.default, _extends({}, passThruProps, {
      formatter: this.boundFormatter,
      searchPlaceholder: searchPlaceholder || _Translate.default.phrase('Search', {}, {
        context: 'Search for a topic within the hierarchy picker',
        key: 'lunar.common.search'
      }),
      noResultsLabel: noResultsLabel || _Translate.default.phrase('No results', {}, {
        context: 'Label to display when no results are found for hierarchy picker search',
        key: 'lunar.picker.noResults'
      }),
      onClose: this.handleClose
    }))));
  }

}

exports.HierarchyPicker = HierarchyPicker;

_defineProperty(HierarchyPicker, "propTypes", {
  children: _propTypes.default.node,
  chosen: _propTypes.default.any,
  disabled: _propTypes.default.bool,
  formatter: _propTypes.default.func,
  fuseOptions: _propTypes.default.any,
  hierarchyMaxHeight: _propTypes.default.number,
  hierarchyWidth: _propTypes.default.number,
  indexParentPath: _propTypes.default.bool,
  invalid: _propTypes.default.bool,
  items: _propTypes.default.arrayOf(_propTypes.default.any).isRequired,
  noResultsLabel: _propTypes.default.string,
  onItemPicked: _propTypes.default.func.isRequired,
  onPickerToggle: _propTypes.default.func,
  renderItem: _propTypes.default.any,
  searchMaxHeight: _propTypes.default.number,
  searchPlaceholder: _propTypes.default.string,
  searchWidth: _propTypes.default.number,
  verticallyAlign: _propTypes.default.bool
});

_defineProperty(HierarchyPicker, "defaultProps", {
  chosen: [],
  disabled: false,
  formatter: _defaultFormatter.default,
  hierarchyMaxHeight: 400,
  hierarchyWidth: 225,
  invalid: false,
  onPickerToggle: () => {},
  searchMaxHeight: 400,
  searchWidth: 300,
  verticallyAlign: false
});

var _default = (0, _withStyles.default)(_styles.styleSheet)(HierarchyPicker);

exports.default = _default;