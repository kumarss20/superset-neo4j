"use strict";

exports.__esModule = true;
exports.default = exports.Toast = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _airbnbPropTypes = require("airbnb-prop-types");

var _IconClose = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconClose"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _ErrorMessage = require("../ErrorMessage");

var _IconButton = _interopRequireDefault(require("../IconButton"));

var _Button = _interopRequireDefault(require("../Button"));

var _Text = _interopRequireDefault(require("../Text"));

var _Translate = _interopRequireDefault(require("../Translate"));

var _Spacing = _interopRequireDefault(require("../Spacing"));

var _crosstab = _interopRequireDefault(require("../../crosstab"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const statusPropType = (0, _airbnbPropTypes.mutuallyExclusiveTrueProps)('danger', 'success');

/** Abstract component for displaying a toast message above the pages content. */
class Toast extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "hideTimer", 0);

    _defineProperty(this, "state", {
      visible: false
    });

    _defineProperty(this, "showToast", () => {
      this.setState({
        visible: true
      }, () => {
        if (this.props.onOpen) {
          this.props.onOpen();
        }
      });
    });

    _defineProperty(this, "handleClosePress", () => {
      this.handleClose();

      if (this.props.crosstabClose) {
        _crosstab.default.emit(this.crosstabCloseEvent());
      }
    });

    _defineProperty(this, "handleClose", () => {
      window.clearTimeout(this.hideTimer);
      this.setState({
        visible: false
      }, () => {
        // Wait for the transition
        window.setTimeout(() => {
          if (this.props.onClose) {
            this.props.onClose();
          }

          if (this.props.onRemove) {
            this.props.onRemove(this.props.id);
          }
        }, 150);
      });
    });
  }

  componentDidMount() {
    const {
      delay = 0,
      duration = 0,
      crosstabClose
    } = this.props;
    window.setTimeout(this.showToast, delay);

    if (duration > 0) {
      this.hideTimer = window.setTimeout(this.handleClose, delay + duration);
    }

    if (crosstabClose) {
      _crosstab.default.on(this.crosstabCloseEvent(), this.handleClose);
    }
  }

  componentWillUnmount() {
    _crosstab.default.off(this.crosstabCloseEvent(), this.handleClose);
  }

  /* istanbul ignore next */
  handleRefreshPress() {
    global.location.reload();
  }

  crosstabCloseEvent() {
    return "toast:crosstabClose:" + this.props.id;
  }

  render() {
    const {
      visible
    } = this.state;
    const {
      cx,
      styles,
      message,
      title,
      danger,
      success,
      refresh
    } = this.props;
    const isError = message instanceof Error;
    const failed = danger || isError;
    return _react.default.createElement("div", {
      className: cx(styles.container, visible && styles.container_visible, failed && styles.container_danger, success && styles.container_success),
      role: "status"
    }, refresh ? _react.default.createElement("div", null, _react.default.createElement(_Text.default, {
      bold: true,
      inverted: true
    }, message), _react.default.createElement(_Spacing.default, {
      top: 0.5
    }, _react.default.createElement(_Button.default, {
      small: true,
      onClick: this.handleRefreshPress
    }, _react.default.createElement(_Translate.default, {
      k: "lunar.common.refresh",
      phrase: "Refresh",
      context: "Refresh the page that was triggerd by a toast"
    })))) : _react.default.createElement("div", null, title && _react.default.createElement(_Text.default, {
      bold: true,
      inverted: true
    }, title), _react.default.createElement(_Text.default, {
      inverted: true
    }, isError ? (0, _ErrorMessage.getErrorMessage)(message, true) : message)), _react.default.createElement("div", {
      className: cx(styles.right)
    }, _react.default.createElement(_IconButton.default, {
      inverted: true,
      onClick: this.handleClosePress
    }, _react.default.createElement(_IconClose.default, {
      size: "1.5em",
      accessibilityLabel: _Translate.default.phrase('Close', {}, {
        context: 'Close a toast popup',
        key: 'lunar.common.close'
      })
    }))));
  }

}

exports.Toast = Toast;

_defineProperty(Toast, "propTypes", {
  title: _propTypes.default.node,
  refresh: _propTypes.default.bool,
  onRemove: _propTypes.default.func,
  onClose: _propTypes.default.func,
  onOpen: _propTypes.default.func,
  message: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(Error)]).isRequired,
  id: _propTypes.default.string.isRequired,
  duration: _propTypes.default.number,
  delay: _propTypes.default.number,
  crosstabClose: _propTypes.default.bool,
  danger: statusPropType,
  success: statusPropType
});

_defineProperty(Toast, "defaultProps", {
  danger: false,
  delay: 250,
  duration: 10000,
  refresh: false,
  success: false,
  title: null
});

var _default = (0, _withStyles.default)(_styles.styleSheet)(Toast);

exports.default = _default;