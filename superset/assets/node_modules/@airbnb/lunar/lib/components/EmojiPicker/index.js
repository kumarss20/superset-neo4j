"use strict";

exports.__esModule = true;
exports.default = EmojiPicker;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _interweaveEmojiPicker = _interopRequireDefault(require("interweave-emoji-picker"));

var _IconBolt = _interopRequireDefault(require("@airbnb/lunar-icons/lib/general/IconBolt"));

var _IconBulb = _interopRequireDefault(require("@airbnb/lunar-icons/lib/general/IconBulb"));

var _IconClock = _interopRequireDefault(require("@airbnb/lunar-icons/lib/general/IconClock"));

var _IconFlag = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconFlag"));

var _IconFlower = _interopRequireDefault(require("@airbnb/lunar-icons/lib/general/IconFlower"));

var _IconPlane = _interopRequireDefault(require("@airbnb/lunar-icons/lib/general/IconPlane"));

var _IconSmile = _interopRequireDefault(require("@airbnb/lunar-icons/lib/general/IconSmile"));

var _IconThumbUp = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconThumbUp"));

var _IconUtensils = _interopRequireDefault(require("@airbnb/lunar-icons/lib/general/IconUtensils"));

var _IconVideoGame = _interopRequireDefault(require("@airbnb/lunar-icons/lib/general/IconVideoGame"));

var _IconCloseAlt = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconCloseAlt"));

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

var _ = _interopRequireDefault(require("../.."));

var _keys = require("../../keys");

var _Translate = _interopRequireDefault(require("../Translate"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Exclude inappropriate or offensive emojis
const blockList = ['1F621', // 😡 pouting face
'1F620', // 😠 angry face
'1F47F', // 👿 angry face with horns
'1F4A9', // 💩 pile of poo
'1F595', // 🖕 middle finger
'1F445', // 👅 tongue
'1F444', // 👄 mouth
'1F48B', // 💋 kiss mark
'1F4A3', // 💣️ bomb
'1F346', // 🍆 eggplant
'1F52A', // 🔪 kitchen knife
'1F3E9', // 🏩 love hotel
'1F52B', // 🔫 pistol
'1F489', // 💉 syringe
'1F48A' // 💊 pill
];
const groupIcons = {
  commonlyUsed: _react.default.createElement(_IconClock.default, {
    decorative: true
  }),
  smileysEmotion: _react.default.createElement(_IconSmile.default, {
    decorative: true
  }),
  peopleBody: _react.default.createElement(_IconThumbUp.default, {
    decorative: true
  }),
  animalsNature: _react.default.createElement(_IconFlower.default, {
    decorative: true
  }),
  foodDrink: _react.default.createElement(_IconUtensils.default, {
    decorative: true
  }),
  travelPlaces: _react.default.createElement(_IconPlane.default, {
    decorative: true
  }),
  activities: _react.default.createElement(_IconVideoGame.default, {
    decorative: true
  }),
  objects: _react.default.createElement(_IconBulb.default, {
    decorative: true
  }),
  symbols: _react.default.createElement(_IconBolt.default, {
    decorative: true
  }),
  flags: _react.default.createElement(_IconFlag.default, {
    decorative: true
  })
};

const clearIcon = _react.default.createElement(_IconCloseAlt.default, {
  decorative: true,
  size: "1.325em"
});

/**
 * Display an emoji picker using [interweave-emoji-picker](https://github.com/milesj/interweave/tree/master/packages/interweave-emoji-picker).
 * Should primarily be used for private to public communication.
 */
function EmojiPicker(_ref) {
  let {
    disableAutoFocus,
    onClosePicker
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["disableAutoFocus", "onClosePicker"]);

  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheet);

  const handleKeyUp = event => {
    // When the picker wrapper is focused, we need to close on esc
    if (event.key === _keys.ESCAPE && onClosePicker) {
      onClosePicker();
    }
  };

  const classNames = {
    picker: cx(styles.picker),
    emoji: cx(styles.emoji),
    emojiActive: cx(styles.emoji_active),
    emojis: cx(styles.emojis),
    emojisSection: cx(styles.emojisSection),
    emojisHeader: cx(styles.emojisHeader),
    emojisHeaderSticky: cx(styles.emojisHeader_sticky),
    emojisBody: cx(styles.emojisBody),
    group: cx(styles.group),
    groupActive: cx(styles.group_active),
    groups: cx(styles.groups),
    groupsList: cx(styles.list),
    skinTone: cx(styles.skinTone),
    skinToneActive: cx(styles.skinTone_active),
    skinTones: cx(styles.skinTones),
    skinTonesList: cx(styles.list),
    noPreview: cx(styles.noPreview),
    noResults: cx(styles.noResults),
    preview: cx(styles.preview),
    previewEmoji: cx(styles.previewEmoji),
    previewTitle: cx(styles.previewTitle),
    previewSubtitle: cx(styles.previewSubtitle),
    previewShiftMore: cx(styles.previewShiftMore),
    search: cx(styles.search),
    searchInput: cx(styles.searchInput),
    clear: cx(styles.clear)
  };
  const messages = {
    recentlyUsed: _Translate.default.phrase('Recently Used', null, {
      key: 'lunar.emoji.recentlyUsed'
    }),
    frequentlyUsed: _Translate.default.phrase('Frequently Used', null, {
      key: 'lunar.emoji.frequentlyUsed'
    }),
    smileysEmotion: _Translate.default.phrase('Smileys & Emotions', null, {
      key: 'lunar.emoji.smileysEmotion'
    }),
    peopleBody: _Translate.default.phrase('People & Bodies', null, {
      key: 'lunar.emoji.peopleBody'
    }),
    animalsNature: _Translate.default.phrase('Animals & Nature', null, {
      key: 'lunar.emoji.animalsNature'
    }),
    foodDrink: _Translate.default.phrase('Food & Drink', null, {
      key: 'lunar.emoji.foodDrink'
    }),
    travelPlaces: _Translate.default.phrase('Travel & Weather', null, {
      key: 'lunar.emoji.travelWeather'
    }),
    activities: _Translate.default.phrase('Activities', null, {
      key: 'lunar.emoji.activities'
    }),
    objects: _Translate.default.phrase('Objects', null, {
      key: 'lunar.emoji.objects'
    }),
    symbols: _Translate.default.phrase('Symbols', null, {
      key: 'lunar.emoji.symbols'
    }),
    flags: _Translate.default.phrase('Flags', null, {
      key: 'lunar.emoji.flags'
    }),
    variations: _Translate.default.phrase('Variations', null, {
      key: 'lunar.emoji.variations'
    }),
    searchResults: _Translate.default.phrase('Search results', null, {
      key: 'lunar.emoji.searchResults'
    }),
    none: _Translate.default.phrase('All emojis', null, {
      key: 'lunar.emoji.allResults'
    }),
    skinNone: _Translate.default.phrase('No skin tone', null, {
      key: 'lunar.emoji.noSkinTone'
    }),
    skinLight: _Translate.default.phrase('Light skin tone', null, {
      key: 'lunar.emoji.lightSkinTone'
    }),
    skinMediumLight: _Translate.default.phrase('Medium-light skin tone', null, {
      key: 'lunar.emoji.mediumLightSkinTone'
    }),
    skinMedium: _Translate.default.phrase('Medium skin tone', null, {
      key: 'lunar.emoji.mediumSkinTone'
    }),
    skinMediumDark: _Translate.default.phrase('Medium-dark skin tone', null, {
      key: 'lunar.emoji.mediumDarkSkinTone'
    }),
    skinDark: _Translate.default.phrase('Dark skin tone', null, {
      key: 'lunar.emoji.darkSkinTone'
    }),
    search: _Translate.default.phrase('Search emojis', null, {
      key: 'lunar.emoji.search'
    }),
    searchA11y: _Translate.default.phrase('Search for emojis by keyword', null, {
      key: 'lunar.emoji.searchKeyword'
    }),
    noResults: _Translate.default.phrase('No results, please try again.', null, {
      key: 'lunar.emoji.noResults'
    }),
    clearUsed: _Translate.default.phrase('Clear frequently used', null, {
      key: 'lunar.emoji.clearFrequentlyUsed'
    })
  };
  return _react.default.createElement("div", {
    role: "presentation",
    onKeyUp: handleKeyUp
  }, _react.default.createElement(_interweaveEmojiPicker.default, _extends({
    stickyGroupHeader: true,
    autoFocus: !disableAutoFocus,
    columnCount: 10,
    commonMode: "frequently-used",
    emojiLargeSize: 48,
    emojiPadding: 5,
    emojiPath: _.default.settings.emojiCDN,
    emojiSize: 20
  }, props, {
    blockList: blockList,
    classNames: classNames,
    clearIcon: clearIcon,
    displayOrder: ['preview', 'emojis', 'search', 'groups'],
    groupIcons: groupIcons,
    messages: messages
  })));
}

EmojiPicker.propTypes = {
  disableAutoFocus: _propTypes.default.bool,
  onClosePicker: _propTypes.default.func.isRequired
};