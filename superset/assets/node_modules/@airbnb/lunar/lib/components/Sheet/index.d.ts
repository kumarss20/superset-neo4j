import React from 'react';
import { WithStylesProps } from '../../composers/withStyles';
import SheetArea from './SheetArea';
import SheetContext, { Context } from './SheetContext';
export { SheetArea, SheetContext };
export declare type Props = {
    /** The contents of the sheet. */
    children: NonNullable<React.ReactNode>;
    /** Render with reduced padding */
    compact?: boolean;
    /** Determines if the sheet has a side gap. */
    gap?: boolean;
    /** Content of the header bar */
    header?: React.ReactNode;
    /** Render the header area with a drop-shadow */
    headerShadow?: boolean;
    /** Determines if the sheet animates in/out. */
    noAnimation?: boolean;
    /** Invoked when the sheet close button is pressed, or when escape is pressed when displaying a portal sheet. This function should set the `visible` prop to false. */
    onClose: () => void;
    /** Determines if the sheet is displayed as a full-page view that covers the entire application. */
    portal?: boolean;
    /** Determines if the sheet is currently visible or not. */
    visible?: boolean;
};
export declare type PrivateProps = {
    /** @ignore */
    setSheetVisible: Context;
};
export declare type State = {
    animating: boolean;
};
/** @ignore */
export declare class BaseSheet extends React.Component<Props & PrivateProps & WithStylesProps, State> {
    static defaultProps: {
        gap: boolean;
        noAnimation: boolean;
        portal: boolean;
        visible: boolean;
    };
    lastActiveElement: HTMLElement | null;
    openTimeout: number;
    sheetRef: React.RefObject<HTMLDivElement>;
    wrapperRef: React.RefObject<HTMLDivElement>;
    state: {
        animating: boolean;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props): void;
    componentWillUnmount(): void;
    cleanupPortal(): void;
    visibilityChange(): void;
    private handleAnimationEnd;
    private handleKeyDown;
    private handleClose;
    render(): JSX.Element | null;
}
/**
 * A modal-like UI that is used to display content in a sheet that covers the existing UI. There are
 * two versions of the Sheet: one that displays inline, and one that displays in a portal.

 * If you want to display a sheet inline, you must wrap the `Sheet` component in the exported
 * `SheetArea`. The wrapping component ensures that the positioning and scroll of the nested content
 * and sheet works as expected.

 * If you want to display a sheet in a portal, you can simply pass the `portal` prop to the `Sheet`
 * component, and it will render at the root of your document. It does not need to be wrapped in a
 * `SheetArea`.
 */
export default function Sheet(props: Props): JSX.Element;
//# sourceMappingURL=index.d.ts.map