"use strict";

exports.__esModule = true;
exports.default = AccordionItem;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

var _useTheme = _interopRequireDefault(require("../../hooks/useTheme"));

var _ExpandableIcon = _interopRequireDefault(require("../ExpandableIcon"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A single accordion item. To be rendered amongst a collection of accordion items, within an accordion.
 */
function AccordionItem(_ref) {
  let {
    bordered,
    children,
    expanded,
    id,
    index,
    noSpacing,
    title,
    onClick
  } = _ref;
  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheetItem);
  const theme = (0, _useTheme.default)();

  const handleClick = () => {
    if (onClick) {
      onClick(index);
    }
  };

  return _react.default.createElement("div", {
    className: cx(bordered && styles.item_bordered)
  }, _react.default.createElement("button", {
    className: cx(styles.title, noSpacing && styles.title_noSpacing),
    "aria-controls": "accordion-body-" + id,
    "aria-selected": expanded,
    id: "accordion-title-" + id,
    role: "tab",
    tabIndex: 0,
    type: "button",
    onClick: handleClick
  }, title && _react.default.createElement("span", {
    className: cx(styles.titleText)
  }, title), _react.default.createElement(_ExpandableIcon.default, {
    expanded: !!expanded,
    size: theme.unit * 3
  })), _react.default.createElement("section", {
    className: cx(styles.body, expanded && styles.body_expanded, noSpacing && styles.body_noSpacing),
    "aria-hidden": !expanded,
    "aria-labelledby": "accordion-title-" + id,
    id: "accordion-body-" + id,
    role: "tabpanel"
  }, children));
}

AccordionItem.propTypes = {
  bordered: _propTypes.default.bool,
  children: _propTypes.default.node,
  expanded: _propTypes.default.bool,
  id: _propTypes.default.string.isRequired,
  index: _propTypes.default.number,
  noSpacing: _propTypes.default.bool,
  title: _propTypes.default.node,
  onClick: _propTypes.default.func
};