import React from 'react';
import { ToRelativeOptions } from 'luxon';
import { DateTimeType } from '../../types';
export declare type Props = {
    /** A timestamp, either a string, number, Date object, or Luxon DateTime object. */
    at?: DateTimeType;
    /** Display the time with no date. */
    clock?: boolean;
    /** A date time pattern to format the timestamp to. */
    format?: string;
    /** Locale to translate and format the timestamp to. Defaults to "en". */
    locale?: string;
    /** Use long format. */
    long?: boolean;
    /** Use medium format. */
    medium?: boolean;
    /** Use micro format. */
    micro?: boolean;
    /** Remove the weekday from the display. */
    noDay?: boolean;
    /** Disable timestamps in the future. Will be reset to current timestamp. */
    noFuture?: boolean;
    /** Remove the time from the display. */
    noTime?: boolean;
    /** Remove the timezone from the display. */
    noTimezone?: boolean;
    /** Use relative format. */
    relative?: boolean;
    /** Use relative format, without 'ago' suffix (past) or 'in' prefix (future). */
    relativeCompact?: boolean;
    /** Use short format. */
    short?: boolean;
    /** A date time pattern to parse the timestamp from. */
    sourceFormat?: string;
    /** Set to a new timezone. Defaults to the client timezone or "UTC". */
    timezone?: string | boolean;
    /** Include the weekday in the display. */
    withDay?: boolean;
};
/** Display a formatted and localized timestamp. */
export default class DateTime extends React.PureComponent<Props> {
    static propTypes: {
        clock: import("prop-types").Requireable<boolean>;
        long: import("prop-types").Requireable<boolean>;
        medium: import("prop-types").Requireable<boolean>;
        micro: import("prop-types").Requireable<boolean>;
        relative: import("prop-types").Requireable<boolean>;
        relativeCompact: import("prop-types").Requireable<boolean>;
        short: import("prop-types").Requireable<boolean>;
    };
    static defaultProps: {
        at: null;
        clock: boolean;
        format: string;
        long: boolean;
        medium: boolean;
        micro: boolean;
        noDay: boolean;
        noFuture: boolean;
        noTime: boolean;
        noTimezone: boolean;
        relative: boolean;
        relativeCompact: boolean;
        short: boolean;
        sourceFormat: string;
        withDay: boolean;
    };
    static format(props: Props): string;
    static relative(timeStamp: DateTimeType, options?: ToRelativeOptions): string;
    static diff(to: DateTimeType, from?: DateTimeType | null): number;
    getRefreshInterval(): number;
    rfc(): string;
    renderTimeElement: () => JSX.Element;
    render(): JSX.Element;
}
//# sourceMappingURL=index.d.ts.map