import React from 'react';
import { DateTime } from 'luxon';
import { WithStylesProps } from '../../composers/withStyles';
import { SelectProps } from '../private/FormInput';
import { Props as FormFieldProps } from '../FormField';
import { Locale } from '../../types';
declare type Range = {
    label: string;
    value: string;
}[];
export declare type Props = Omit<SelectProps, 'id' | 'value'> & FormFieldProps & {
    /** Enable 12-hour clock instead of 24-hour. */
    enable12HourClock?: boolean;
    /** Hide all date dropdowns. */
    hideDate?: boolean;
    /** Hide all time dropdowns. */
    hideTime?: boolean;
    /** Hide the year dropdown. */
    hideYear?: boolean;
    /** Locale to translate and format the timestamp to. Defaults to "en". */
    locale?: Locale;
    /** Incremental step for minutes. */
    minuteStep?: number;
    /** An empty `option` to render at the top of the list. */
    placeholder?: string;
    /** Callback fired when the value changes. */
    onChange: (value: string, event: React.ChangeEvent<HTMLSelectElement>) => void;
    /** Set to a new timezone. Defaults to the client timezone or "UTC". */
    timezone?: string | boolean;
    /** Number of years to go into the future. */
    yearFutureBuffer?: number;
    /** Number of years to go into the past. */
    yearPastBuffer?: number;
    /** Current date. Can be a string, number, Date object, or Luxon DateTime object. */
    value?: string | number | Date | DateTime;
};
export declare type State = {
    id: string;
    date: DateTime;
    meridiem: string;
};
/** An uncontrolled multi-select field for date and time ranges in UTC. */
export declare class DateTimeSelect extends React.Component<Props & WithStylesProps, State> {
    static defaultProps: {
        enable12HourClock: boolean;
        hideDate: boolean;
        hideTime: boolean;
        hideYear: boolean;
        minuteStep: number;
        yearFutureBuffer: number;
        yearPastBuffer: number;
    };
    private date;
    state: {
        id: string;
        date: DateTime;
        meridiem: string;
    };
    componentDidUpdate(prevProps: Props): void;
    getDayRange(): Range;
    getCurrentValue(date: DateTime, key: string): string;
    getHourRange(): Range;
    getMinuteRange(): Range;
    getMonthRange(): Range;
    getYearRange(): Range;
    private handleChange;
    render(): JSX.Element;
}
declare const _default: import("aesthetic-react").StyledComponent<import("../../types").Theme, Pick<SelectProps, "hidden" | "size" | "style" | "large" | "small" | "multiple" | "disabled" | "optional" | "form" | "title" | "autoComplete" | "autoFocus" | "name" | "placeholder" | "required" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "lang" | "slot" | "spellCheck" | "tabIndex" | "role" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "unselectable" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "compact" | "invalid" | "important" | "noTranslate" | "propagateRef"> & FormFieldProps & {
    /** Enable 12-hour clock instead of 24-hour. */
    enable12HourClock?: boolean | undefined;
    /** Hide all date dropdowns. */
    hideDate?: boolean | undefined;
    /** Hide all time dropdowns. */
    hideTime?: boolean | undefined;
    /** Hide the year dropdown. */
    hideYear?: boolean | undefined;
    /** Locale to translate and format the timestamp to. Defaults to "en". */
    locale?: "tr" | "de" | "en" | "es" | "fr" | "it" | "ja" | "ko" | "ms" | "nl" | "pt" | "ru" | "zh" | undefined;
    /** Incremental step for minutes. */
    minuteStep?: number | undefined;
    /** An empty `option` to render at the top of the list. */
    placeholder?: string | undefined;
    /** Callback fired when the value changes. */
    onChange: (value: string, event: React.ChangeEvent<HTMLSelectElement>) => void;
    /** Set to a new timezone. Defaults to the client timezone or "UTC". */
    timezone?: string | boolean | undefined;
    /** Number of years to go into the future. */
    yearFutureBuffer?: number | undefined;
    /** Number of years to go into the past. */
    yearPastBuffer?: number | undefined;
    /** Current date. Can be a string, number, Date object, or Luxon DateTime object. */
    value?: string | number | DateTime | Date | undefined;
} & import("aesthetic-react").WithStylesWrapperProps>;
export default _default;
//# sourceMappingURL=index.d.ts.map