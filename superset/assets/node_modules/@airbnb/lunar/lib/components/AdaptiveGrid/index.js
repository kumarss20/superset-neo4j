"use strict";

exports.__esModule = true;
exports.default = AdaptiveGrid;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function AdaptiveGrid(_ref) {
  let {
    breakpoints = {},
    children,
    defaultItemsPerRow = 1,
    noGutter
  } = _ref;
  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheet);

  const childElements = !!children && _react.default.Children.map(children, (child, idx) => child ? // These items are generic and don't have a guaranteed id or any unique property
  // eslint-disable-next-line react/no-array-index-key
  _react.default.createElement("div", {
    key: idx,
    className: cx(styles.item)
  }, child) : null).filter(Boolean);

  const breakpointStyles = {};
  const breakpointKeys = Object.keys(breakpoints);
  const smallestBreakpoint = breakpointKeys.reduce((min, key) => Math.min(min, parseInt(key, 10)), 10000);
  breakpointKeys.forEach(breakpoint => {
    breakpointStyles["@media (min-width: " + breakpoint + "px)"] = {
      gridTemplateColumns: "repeat(" + breakpoints[breakpoint] + ", 1fr)"
    };
  });
  breakpointStyles[breakpointKeys.length > 0 ? "@media (max-width: " + smallestBreakpoint + "px)" : '@media (min-width: 0px)'] = {
    gridTemplateColumns: "repeat(" + defaultItemsPerRow + ", 1fr)"
  };
  return _react.default.createElement("div", {
    className: cx(styles.container, noGutter && styles.container_noGutter, breakpointStyles)
  }, childElements);
}

AdaptiveGrid.propTypes = {
  children: _propTypes.default.node,
  breakpoints: _propTypes.default.objectOf(_propTypes.default.number),
  defaultItemsPerRow: _propTypes.default.number,
  noGutter: _propTypes.default.bool
};