import React from 'react';
import { WithStylesProps } from '../../composers/withStyles';
export declare const DEFAULT_BORDER_RADIUS = 6;
export declare type Props = {
    /** An accessible label. */
    alt: string;
    /** The css border-radius value. Defaults to 6 pixels. */
    borderRadius?: number;
    /** Hide the box-shadow. */
    noShadow?: boolean;
    /** Whether to have the image maintain its aspect ratio while contained in its dimentions or not. */
    contain?: boolean;
    /** Whether to have the image cover its dimensions or not. */
    cover?: boolean;
    /**
     * The maximum width of the image (and the component). Unconstrained (css value 'none') by
     * default. If the image is wider than the value given for maxWidth, it will be scaled
     * proportionally to be at most maxWidth wide. The image width will be less than maxWidth
     * if either its native size is smaller than this value or its height exceeds maxHeight and
     * proportionally scaling to fit maxHeight produces a width less than maxWidth.
     */
    maxWidth?: string | number;
    /**
     * The maximum height of the image (and the component). Unconstrained (css value 'none') by
     * default. If the image is taller than the value given for maxHeight, it will be scaled
     * proportionally to be at most maxHeight high. The image height will be less than maxHeight
     * if either its native size is smaller than this value or its width exceeds maxWidth and
     * proportionally scaling to fit maxWidth produces a height less than maxHeight.
     */
    maxHeight?: string | number;
    /** The source of the image. Typically a URL. */
    src: string;
    /** A component to be displayed while the the image is loading. Typically a Shimmer. */
    shimmer?: React.ReactNode;
};
export declare type State = {
    imageLoaded: boolean;
};
/** An image that is constrained proportionally in one or both dimensions. */
export declare class ResponsiveImage extends React.Component<Props & WithStylesProps, State> {
    static defaultProps: {
        borderRadius: number;
        contain: boolean;
        cover: boolean;
        maxHeight: string;
        maxWidth: string;
        noShadow: boolean;
        shimmer: null;
    };
    static propTypes: {
        contain: import("prop-types").Requireable<boolean>;
        cover: import("prop-types").Requireable<boolean>;
    };
    image?: HTMLImageElement;
    state: {
        imageLoaded: boolean;
    };
    componentDidMount(): void;
    componentDidUpdate({ src: previousSrc }: Props): void;
    componentWillUnmount(): void;
    createAsyncImage(): void;
    removeImage(): void;
    private handleAsyncImageLoad;
    render(): {};
}
declare const _default: import("aesthetic-react").StyledComponent<import("../../types").Theme, Props & import("aesthetic-react").WithStylesWrapperProps>;
export default _default;
//# sourceMappingURL=index.d.ts.map