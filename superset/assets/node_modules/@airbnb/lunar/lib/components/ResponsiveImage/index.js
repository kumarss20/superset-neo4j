"use strict";

exports.__esModule = true;
exports.default = exports.ResponsiveImage = exports.DEFAULT_BORDER_RADIUS = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _airbnbPropTypes = require("airbnb-prop-types");

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const DEFAULT_BORDER_RADIUS = 6;
exports.DEFAULT_BORDER_RADIUS = DEFAULT_BORDER_RADIUS;
const objectFitPropType = (0, _airbnbPropTypes.mutuallyExclusiveTrueProps)('contain', 'cover');

/** An image that is constrained proportionally in one or both dimensions. */
class ResponsiveImage extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "image", void 0);

    _defineProperty(this, "state", {
      imageLoaded: false
    });
  }

  componentDidMount() {
    this.createAsyncImage();
  }

  componentDidUpdate(_ref) {
    let {
      src: previousSrc
    } = _ref;
    const {
      src: currentSrc
    } = this.props;

    if (currentSrc !== previousSrc) {
      this.removeImage();
      this.setState({
        imageLoaded: false
      });
      this.createAsyncImage();
    }
  }

  componentWillUnmount() {
    this.removeImage();
  }

  createAsyncImage() {
    this.image = new Image();
    this.image.addEventListener('load', () => {
      this.handleAsyncImageLoad();
    });
    this.image.addEventListener('error', () => {
      this.handleAsyncImageLoad();
    });
    this.image.src = this.props.src;
  }

  removeImage() {
    if (this.image) {
      // Prevent these callbacks from being fired if they haven't fired yet.
      delete this.image.onload;
      delete this.image.onerror;
    }
  }

  handleAsyncImageLoad() {
    // We no longer need the Image object, so let's remove it so it can be
    // garbage collected.
    delete this.image;
    this.setState({
      imageLoaded: true
    });
  }

  render() {
    const {
      cx,
      alt,
      contain,
      cover,
      noShadow,
      maxWidth,
      maxHeight,
      src,
      borderRadius,
      shimmer,
      styles
    } = this.props;
    const {
      imageLoaded
    } = this.state;

    if (!imageLoaded && shimmer) {
      return shimmer;
    }

    return _react.default.createElement("img", {
      className: cx(styles.image, contain && styles.image_contain, cover && styles.image_cover, noShadow && styles.image_noShadow, {
        borderRadius,
        maxWidth,
        maxHeight
      }),
      src: src,
      width: "100%",
      height: "auto",
      alt: alt
    });
  }

}

exports.ResponsiveImage = ResponsiveImage;

_defineProperty(ResponsiveImage, "defaultProps", {
  borderRadius: DEFAULT_BORDER_RADIUS,
  contain: false,
  cover: false,
  maxHeight: 'none',
  maxWidth: 'none',
  noShadow: false,
  shimmer: null
});

_defineProperty(ResponsiveImage, "propTypes", {
  shimmer: _propTypes.default.node,
  src: _propTypes.default.string.isRequired,
  maxHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  maxWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  noShadow: _propTypes.default.bool,
  borderRadius: _propTypes.default.number,
  alt: _propTypes.default.string.isRequired,
  contain: objectFitPropType,
  cover: objectFitPropType
});

var _default = (0, _withStyles.default)(_styles.styleSheet)(ResponsiveImage);

exports.default = _default;