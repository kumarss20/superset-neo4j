"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _v = _interopRequireDefault(require("uuid/v4"));

var _IconUpload = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconUpload"));

var _IconAudio = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconAudio"));

var _IconPhoto = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconPhoto"));

var _IconVideo = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconVideo"));

var _IconClose = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconClose"));

var _airbnbPropTypes = require("airbnb-prop-types");

var _FormInput = _interopRequireDefault(require("../private/FormInput"));

var _FormField = _interopRequireWildcard(require("../FormField"));

var _Table = _interopRequireWildcard(require("../Table"));

var _Spacing = _interopRequireDefault(require("../Spacing"));

var _Text = _interopRequireDefault(require("../Text"));

var _Translate = _interopRequireDefault(require("../Translate"));

var _IconButton = _interopRequireDefault(require("../IconButton"));

var _DateTime = _interopRequireDefault(require("../DateTime"));

var _FormInputButton = _interopRequireDefault(require("../private/FormInputButton"));

var _toBytes = _interopRequireDefault(require("../../utils/toBytes"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const acceptProp = (0, _airbnbPropTypes.mutuallyExclusiveTrueProps)('onlyAudio', 'onlyImages', 'onlyVideo');

/** A controlled input field for uploading files. */
class FileInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      files: [],
      id: (0, _v.default)()
    });

    _defineProperty(this, "ref", _react.default.createRef());

    _defineProperty(this, "handleChange", event => {
      const files = Array.from(event.currentTarget.files || []);
      this.setState({
        files
      });
      this.props.onChange(files, event);
    });

    _defineProperty(this, "handleClick", () => {
      if (this.ref.current) {
        this.ref.current.click();
      }
    });

    _defineProperty(this, "handleRemoveFile", (event, index) => {
      this.setState(prevState => ({
        files: prevState.files.filter((file, i) => i !== index)
      }), () => {
        this.props.onChange(this.state.files, event);
      });
    });
  }

  render() {
    const {
      fieldProps,
      inputProps
    } = (0, _FormField.partitionFieldProps)(this.props);

    const {
      hideFileSize,
      hideFileType,
      hideLastModified,
      onlyAudio,
      onlyImages,
      onlyVideo
    } = inputProps,
          props = _objectWithoutPropertiesLoose(inputProps, ["hideFileSize", "hideFileType", "hideLastModified", "onlyAudio", "onlyImages", "onlyVideo"]);

    const {
      files,
      id
    } = this.state;
    let {
      accept
    } = inputProps;
    let Icon = _IconUpload.default;

    if (onlyAudio) {
      accept = 'audio/*';
      Icon = _IconAudio.default;
    } else if (onlyImages) {
      accept = 'image/*';
      Icon = _IconPhoto.default;
    } else if (onlyVideo) {
      accept = 'video/*';
      Icon = _IconVideo.default;
    }

    return _react.default.createElement(_FormField.default, _extends({}, fieldProps, {
      id: id
    }), _react.default.createElement(_FormInput.default, _extends({}, props, {
      hidden: true,
      id: id,
      accept: accept,
      type: "file",
      tagName: "input",
      propagateRef: this.ref,
      onChange: this.handleChange
    })), _react.default.createElement(_FormInputButton.default, {
      inverted: true,
      invalid: fieldProps.invalid,
      small: fieldProps.compact,
      disabled: props.disabled,
      afterIcon: _react.default.createElement(Icon, {
        decorative: true,
        size: "1.25em"
      }),
      onClick: this.handleClick
    }, _react.default.createElement(_Translate.default, {
      k: "lunar.form.chooseFile",
      phrase: "Choose file||||Choose files",
      context: "Label when uploading multiple files",
      smartCount: props.multiple ? 0 : 1
    }), files.length > 0 && _react.default.createElement("span", null, " (" + files.length + ")")), files.length > 0 && !fieldProps.inline && _react.default.createElement(_Spacing.default, {
      top: 1
    }, _react.default.createElement(_Text.default, {
      small: fieldProps.compact
    }, _react.default.createElement(_Table.default, {
      compact: true,
      striped: true
    }, _react.default.createElement("tbody", null, files.map((file, i) => _react.default.createElement("tr", {
      key: file.name
    }, _react.default.createElement(_Table.Cell, null, file.name), !hideFileSize && _react.default.createElement(_Table.Cell, null, (0, _toBytes.default)(file.size)), !hideLastModified && _react.default.createElement(_Table.Cell, null, _react.default.createElement(_DateTime.default, {
      short: true,
      at: file.lastModified
    })), !hideFileType && _react.default.createElement(_Table.Cell, null, file.type), _react.default.createElement(_Table.Cell, {
      endAlign: true
    }, _react.default.createElement(_IconButton.default, {
      onClick: event => {
        this.handleRemoveFile(event, i);
      }
    }, _react.default.createElement(_IconClose.default, {
      accessibilityLabel: _Translate.default.phrase('Remove chosen file', {}, {
        context: 'Label when removing a chosen file to upload',
        key: 'lunar.form.removeFile'
      })
    }))))))))));
  }

}

exports.default = FileInput;

_defineProperty(FileInput, "propTypes", {
  onChange: _propTypes.default.func.isRequired,
  hideLastModified: _propTypes.default.bool,
  hideFileType: _propTypes.default.bool,
  hideFileSize: _propTypes.default.bool,
  onlyAudio: acceptProp,
  onlyImages: acceptProp,
  onlyVideo: acceptProp
});

_defineProperty(FileInput, "defaultProps", {
  hideFileSize: false,
  hideFileType: false,
  hideLastModified: false,
  onlyAudio: false,
  onlyImages: false,
  onlyVideo: false
});