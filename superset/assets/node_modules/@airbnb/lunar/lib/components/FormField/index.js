"use strict";

exports.__esModule = true;
exports.default = FormField;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

var _Translate = _interopRequireDefault(require("../Translate"));

var _Text = _interopRequireDefault(require("../Text"));

var _StatusText = _interopRequireDefault(require("../StatusText"));

var _FormErrorMessage = _interopRequireDefault(require("../FormErrorMessage"));

var _partitionFieldProps = _interopRequireDefault(require("./partitionFieldProps"));

exports.partitionFieldProps = _partitionFieldProps.default;

var _Prefix = _interopRequireDefault(require("./Prefix"));

exports.Prefix = _Prefix.default;

var _Suffix = _interopRequireDefault(require("./Suffix"));

exports.Suffix = _Suffix.default;

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** A abstract form field wrapper that handles labels, affixes, errors, states, and more. */
function FormField(_ref) {
  let {
    children,
    compact,
    compactSpacing,
    disabled,
    errorMessage,
    hideLabel,
    hideOptionalLabel,
    id,
    inline,
    invalid,
    label,
    labelDescription,
    large,
    noSpacing,
    optional,
    renderBeforeLabel,
    renderFullWidth,
    renderLargeLabel,
    stretchLabel,
    prefix,
    small,
    suffix,
    topAlign
  } = _ref;
  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheet);

  const content = _react.default.createElement("div", {
    className: cx(styles.input, inline && renderBeforeLabel && styles.input_beforeInline, inline && !renderBeforeLabel && styles.input_afterInline, hideLabel && styles.input_hideLabel, renderFullWidth && styles.input_fullWidth)
  }, prefix && _react.default.createElement("div", {
    className: cx(styles.affix)
  }, prefix), _react.default.createElement("div", {
    className: cx(styles.anchor)
  }, children), suffix && _react.default.createElement("div", {
    className: cx(styles.affix)
  }, suffix));

  return _react.default.createElement("section", {
    className: cx(styles.field, (compact || compactSpacing || small) && !noSpacing && styles.field_compactSpacing, noSpacing && styles.field_noSpacing)
  }, _react.default.createElement("div", {
    className: cx(inline && styles.content_inline, topAlign && styles.content_topAlign)
  }, renderBeforeLabel && content, _react.default.createElement("label", {
    htmlFor: id,
    className: cx(styles.label, stretchLabel && styles.label_stretch, hideLabel && styles.label_hidden, (inline || renderBeforeLabel) && styles.label_noSpacing)
  }, _react.default.createElement(_StatusText.default, {
    danger: invalid,
    muted: disabled,
    small: compact || small,
    large: large,
    bold: !renderLargeLabel
  }, label, optional && !hideOptionalLabel && _react.default.createElement("span", {
    className: cx(styles.optional)
  }, _react.default.createElement(_Text.default, {
    inline: true,
    small: true,
    muted: true
  }, _react.default.createElement(_Translate.default, {
    k: "lunar.form.optional",
    phrase: "(optional)",
    context: "A form field is marked as optional"
  })))), labelDescription && _react.default.createElement(_Text.default, {
    small: true
  }, labelDescription)), !renderBeforeLabel && content), invalid && _react.default.createElement(_FormErrorMessage.default, {
    id: id,
    error: errorMessage
  }));
}

FormField.propTypes = {
  compact: _propTypes.default.bool,
  compactSpacing: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  errorMessage: _propTypes.default.string,
  field: _propTypes.default.object,
  hideLabel: _propTypes.default.bool,
  hideOptionalLabel: _propTypes.default.bool,
  inline: _propTypes.default.bool,
  invalid: _propTypes.default.bool,
  label: _propTypes.default.any.isRequired,
  labelDescription: _propTypes.default.node,
  large: _propTypes.default.bool,
  noSpacing: _propTypes.default.bool,
  optional: _propTypes.default.bool,
  prefix: _propTypes.default.node,
  small: _propTypes.default.bool,
  suffix: _propTypes.default.node,
  children: _propTypes.default.any.isRequired,
  id: _propTypes.default.string.isRequired,
  renderBeforeLabel: _propTypes.default.bool,
  renderFullWidth: _propTypes.default.bool,
  renderLargeLabel: _propTypes.default.bool,
  stretchLabel: _propTypes.default.bool,
  topAlign: _propTypes.default.bool
};