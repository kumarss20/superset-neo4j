import React from 'react';
import { WithStylesProps } from '../../composers/withStyles';
import { Props as DropdownProps } from '../Dropdown';
import { Item, Separator, Props as MenuProps } from '../Menu';
export declare type Props = {
    /** Accessibility label for menu. */
    accessibilityLabel: string;
    /** Menu items to be shown on the expanded view. */
    children: NonNullable<React.ReactNode>;
    /** If true, will close the menu on click of an item. */
    closeOnClick?: boolean;
    /** Mark the menu as disabled. */
    disabled?: boolean;
    /** Props to pass to the `Dropdown` component. */
    dropdownProps?: Partial<DropdownProps>;
    /** If true, will not close the menu when an outside element is clicked. */
    ignoreClickOutside?: boolean;
    /** Invert text colors. */
    inverted?: boolean;
    /** Increase font size to large. */
    large?: boolean;
    /** Props to pass to the `Menu` component. */
    menuProps?: Partial<MenuProps>;
    /** Use muted button instead of primary button. */
    muted?: boolean;
    /** Callback fired when the menu popover is closed. */
    onHide?: () => void;
    /** Callback fired when the menu popover is opened. */
    onShow?: () => void;
    /** Decrease font size to small. */
    small?: boolean;
    /** Toggle button icon. */
    toggleIcon?: React.ReactNode;
    /** Toggle button text. */
    toggleLabel: NonNullable<React.ReactNode>;
    /** Z-index of the menu. */
    zIndex?: number;
};
export declare type State = {
    opened: Boolean;
};
/** A controller for multiple tabs. */
export declare class MenuToggle extends React.Component<Props & WithStylesProps, State> {
    static propTypes: {
        toggleIcon: import("prop-types").Requireable<React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>>;
    };
    static defaultProps: {
        closeOnClick: boolean;
        disabled: boolean;
        ignoreClickOutside: boolean;
        inverted: boolean;
        large: boolean;
        small: boolean;
        zIndex: number;
    };
    ref: React.RefObject<HTMLDivElement>;
    state: {
        opened: boolean;
    };
    private handleItemClick;
    private handleToggleMenu;
    private handleShowMenu;
    private handleHideMenu;
    private handleClickOutside;
    render(): JSX.Element;
}
export { Item, Separator };
declare const _default: import("aesthetic-react").StyledComponent<import("../../types").Theme, Props & import("aesthetic-react").WithStylesWrapperProps>;
export default _default;
//# sourceMappingURL=index.d.ts.map