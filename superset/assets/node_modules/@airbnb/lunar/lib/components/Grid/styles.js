"use strict";

exports.__esModule = true;
exports.styleSheetCol = exports.styleSheet = void 0;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const styleSheet = (_ref) => {
  let {
    unit
  } = _ref;
  return {
    grid: {
      display: 'flex',
      flex: '0 1 auto',
      flexDirection: 'row',
      flexWrap: 'nowrap',
      alignItems: 'stretch',
      justifyContent: 'space-between',
      marginLeft: -unit,
      marginRight: -unit
    },
    grid_reversed: {
      flexDirection: 'row-reverse'
    },
    grid_center: {
      justifyContent: 'center'
    },
    grid_start: {
      justifyContent: 'flex-start'
    },
    grid_end: {
      justifyContent: 'flex-end'
    },
    grid_top: {
      alignItems: 'flex-start'
    },
    grid_middle: {
      alignItems: 'center'
    },
    grid_bottom: {
      alignItems: 'flex-end'
    }
  };
};

exports.styleSheet = styleSheet;

const styleSheetCol = (_ref2) => {
  let {
    unit
  } = _ref2;
  const spans = {};
  const offsets = {};
  Array.from({
    length: 12
  }, (v, k) => {
    const span = k + 1;
    const offset = k;
    const width = 100 / (12 / span);
    spans["span" + span] = {
      flexBasis: width + "%",
      maxWidth: width + "%"
    };
    offsets["offset" + offset] = {
      marginLeft: offset > 0 ? 100 / (12 / offset) + "%" : 0
    };
    return span;
  });
  return _extends({
    col: {
      flex: '0 0 auto',
      paddingLeft: unit,
      paddingRight: unit
    }
  }, spans, {}, offsets);
};

exports.styleSheetCol = styleSheetCol;