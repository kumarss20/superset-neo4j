"use strict";

exports.__esModule = true;
exports.default = exports.Tab = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _camelCase = _interopRequireDefault(require("lodash/camelCase"));

var _upperFirst = _interopRequireDefault(require("lodash/upperFirst"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _ButtonOrLink = _interopRequireDefault(require("../private/ButtonOrLink"));

var _TrackingBoundary = _interopRequireDefault(require("../TrackingBoundary"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A single tab button. Usually rendered amongst a collection of tabs. */
class Tab extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", () => {
      if (this.props.onClick) {
        this.props.onClick(this.props.keyName);
      }
    });
  }

  componentDidUpdate(prevProps) {
    if (!prevProps.selected && this.props.selected && this.props.onSelected) {
      this.props.onSelected();
    }
  }

  render() {
    const {
      cx,
      afterIcon,
      beforeIcon,
      borderless,
      disabled,
      href,
      keyName,
      label,
      secondary,
      selected,
      small,
      stretched,
      styles
    } = this.props;
    const trackingName = (0, _upperFirst.default)((0, _camelCase.default)(keyName || 'Tab'));
    const noBorder = secondary || borderless;
    const noHover = secondary || noBorder && disabled;
    return _react.default.createElement("span", {
      className: cx(styles.tab, secondary && styles.tab_secondary, disabled && styles.tab_disabled, noBorder && styles.tab_noBorder, noHover && styles.tab_noHover, selected && !secondary && styles.tab_selected, stretched && styles.tab_stretched)
    }, _react.default.createElement(_TrackingBoundary.default, {
      name: trackingName
    }, _react.default.createElement(_ButtonOrLink.default, {
      flexAlign: true,
      "aria-selected": selected,
      afterIcon: afterIcon,
      beforeIcon: beforeIcon,
      disabled: disabled,
      href: href,
      role: "tab",
      className: cx(styles.tabButton, secondary && styles.tabButton_secondary, selected && styles.tabButton_selected, selected && secondary && styles.tabButton_secondary_selected, small && styles.tabButton_small, disabled && styles.tabButton_disabled),
      onClick: disabled ? undefined : this.handleClick
    }, label)));
  }

}

exports.Tab = Tab;

_defineProperty(Tab, "propTypes", {
  borderless: _propTypes.default.bool,
  children: _propTypes.default.node,
  keyName: _propTypes.default.string,
  label: _propTypes.default.any.isRequired,
  onClick: _propTypes.default.func,
  onSelected: _propTypes.default.func,
  secondary: _propTypes.default.bool,
  selected: _propTypes.default.bool,
  small: _propTypes.default.bool,
  stretched: _propTypes.default.bool
});

_defineProperty(Tab, "defaultProps", {
  borderless: false,
  children: null,
  secondary: false,
  selected: false,
  small: false,
  stretched: false
});

var _default = (0, _withStyles.default)(_styles.styleSheetTab)(Tab);

exports.default = _default;