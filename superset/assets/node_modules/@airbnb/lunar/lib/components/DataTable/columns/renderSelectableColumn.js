"use strict";

exports.__esModule = true;
exports.default = renderSelectableColumn;

var _react = _interopRequireDefault(require("react"));

var _reactVirtualized = require("react-virtualized");

var _Translate = _interopRequireDefault(require("../../Translate"));

var _CheckBox = _interopRequireDefault(require("../../CheckBox"));

var _Spacing = _interopRequireDefault(require("../../Spacing"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function renderSelectableColumn(selectedRows, handleSelection, expandable) {
  const selectableCellRenderer = row => {
    const {
      metadata
    } = row.rowData;
    const {
      originalIndex,
      parentOriginalIndex,
      isChild
    } = metadata;
    let isSelected;

    if (isChild && parentOriginalIndex !== undefined) {
      isSelected = Object.prototype.hasOwnProperty.call(selectedRows, parentOriginalIndex) && selectedRows[parentOriginalIndex].selectedChildren.has(originalIndex);
    } else {
      isSelected = Object.prototype.hasOwnProperty.call(selectedRows, originalIndex) && selectedRows[originalIndex].status === _constants.SELECTION_OPTIONS.ACTIVE;
    }

    const isNeutral = !isChild && Object.prototype.hasOwnProperty.call(selectedRows, originalIndex) && selectedRows[originalIndex].status === _constants.SELECTION_OPTIONS.HAS_ACTIVE_CHILD;

    const indentSize = expandable ? 3.5 : 2;
    const spacing = isChild || !expandable ? indentSize : 0.5;
    return _react.default.createElement(_Spacing.default, {
      vertical: 0.5,
      right: 0.5,
      left: spacing
    }, _react.default.createElement(_CheckBox.default, {
      hideLabel: true,
      label: _Translate.default.phrase('Select row', {}, {
        context: 'Selecting a row from the data table',
        key: 'lunar.datatable.selectRow'
      }),
      indeterminate: isNeutral,
      checked: isSelected,
      onChange: handleSelection(row.rowData)
    }));
  };

  return _react.default.createElement(_reactVirtualized.Column, {
    dataKey: "selected",
    cellRenderer: selectableCellRenderer,
    width: _constants.SELECTABLE_COLUMN_WIDTH
  });
}