"use strict";

exports.__esModule = true;
exports.caseColumnLabel = caseColumnLabel;
exports.getRowColor = getRowColor;
exports.getHeight = getHeight;
exports.getKeys = void 0;

var _startCase = _interopRequireDefault(require("lodash/startCase"));

var _memoize = _interopRequireDefault(require("lodash/memoize"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function caseColumnLabel(label, casing) {
  if (casing === 'title') {
    return (0, _startCase.default)(label);
  }

  if (casing === 'sentence') {
    const s = (0, _startCase.default)(label);
    return s[0] + s.toLowerCase().slice(1);
  }

  if (casing === 'uppercase') {
    return (0, _startCase.default)(label).toUpperCase();
  }

  return label;
}

function getStatusColor(theme, status) {
  if (status === _constants.STATUS_OPTIONS.ALERT) {
    return theme.color.core.danger[0];
  }

  return theme.color.core.warning[0];
}

function getRowColor(row, index, zebra, theme) {
  const {
    accent,
    core
  } = theme.color;

  if (index < 0) {
    return accent.bg;
  }

  if (row.metadata && row.metadata.status) {
    return getStatusColor(theme, row.metadata.status);
  }

  if (zebra) {
    return index % 2 ? accent.bg : core.neutral[0];
  }

  return accent.bg;
}

function getHeight(defaultHeight, overrideHeight) {
  if (overrideHeight) {
    return _constants.HEIGHT_TO_PX[overrideHeight];
  }

  return defaultHeight ? _constants.HEIGHT_TO_PX[defaultHeight] : 0;
} // Infers keys from data if they aren't explicitly defined


const getKeys = (0, _memoize.default)((keys, data) => {
  return keys.length > 0 ? keys : Array.from(data.reduce((keySet, row) => {
    Object.keys(row.data).forEach(key => {
      if (row.metadata === undefined || row.metadata.colSpanKey !== key) {
        keySet.add(key);
      }
    });
    return keySet;
  }, new Set()));
});
exports.getKeys = getKeys;