"use strict";

exports.__esModule = true;
exports.TableHeader = TableHeader;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _Button = _interopRequireDefault(require("../Button"));

var _ButtonGroup = _interopRequireDefault(require("../ButtonGroup"));

var _Text = _interopRequireDefault(require("../Text"));

var _Translate = _interopRequireDefault(require("../Translate"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Header for the DataTable that displays a title and Table-level buttons. */
function TableHeader(_ref) {
  let {
    cx,
    editable,
    editMode,
    extraHeaderButtons,
    height,
    instantEdit,
    onEnactEdits,
    onEnableEditMode,
    onDisableEditMode,
    selectedRows,
    styles,
    tableHeaderLabel,
    width
  } = _ref;
  const extraEditButtons = extraHeaderButtons.map(btnConfig => btnConfig.displayEditMode && _react.default.createElement(_Button.default, {
    key: btnConfig.label,
    small: true,
    inverted: true,
    onClick: btnConfig.onClick && btnConfig.onClick(selectedRows)
  }, btnConfig.label));
  const extraNonEditButtons = extraHeaderButtons.map(btnConfig => btnConfig.display && _react.default.createElement(_Button.default, {
    key: btnConfig.label,
    small: true,
    inverted: true,
    onClick: btnConfig.onClick && btnConfig.onClick(selectedRows)
  }, btnConfig.label));
  const extraButtons = editMode ? extraEditButtons : extraNonEditButtons;
  const editModeButtons = instantEdit ? _react.default.createElement(_Button.default, {
    key: "Done",
    small: true,
    onClick: onDisableEditMode
  }, _react.default.createElement(_Translate.default, {
    k: "lunar.common.done",
    phrase: "Done",
    context: "This button exits edit mode."
  })) : [_react.default.createElement(_Button.default, {
    key: "Cancel",
    small: true,
    inverted: true,
    onClick: onDisableEditMode
  }, _react.default.createElement(_Translate.default, {
    k: "lunar.common.cancel",
    phrase: "Cancel",
    context: "This button cancels out of edit mode without applying changes."
  })), _react.default.createElement(_Button.default, {
    key: "Apply",
    small: true,
    onClick: onEnactEdits
  }, _react.default.createElement(_Translate.default, {
    k: "lunar.common.apply",
    phrase: "Apply",
    context: "This button applies all live edits."
  }))];
  const modeButtons = editMode ? editModeButtons : _react.default.createElement(_Button.default, {
    inverted: true,
    small: true,
    onClick: onEnableEditMode
  }, _react.default.createElement(_Translate.default, {
    k: "lunar.common.edit",
    phrase: "Edit",
    context: "This button enables edit mode."
  }));
  const headerButtons = extraHeaderButtons.length > -1 || editable ? _react.default.createElement(_ButtonGroup.default, null, extraButtons, editable && modeButtons) : null;
  const dimensionStyles = {
    width,
    height
  };

  const label = _react.default.createElement(_Text.default, {
    bold: true
  }, tableHeaderLabel);

  return _react.default.createElement("div", {
    style: dimensionStyles
  }, _react.default.createElement("div", {
    className: cx(styles.tableHeader_inner)
  }, label, headerButtons));
}

TableHeader.propTypes = {
  editable: _propTypes.default.bool,
  editMode: _propTypes.default.bool.isRequired,
  height: _propTypes.default.number.isRequired,
  instantEdit: _propTypes.default.bool.isRequired,
  tableHeaderLabel: _propTypes.default.string,
  width: _propTypes.default.number.isRequired,
  onEnableEditMode: _propTypes.default.func.isRequired,
  onDisableEditMode: _propTypes.default.func.isRequired,
  onEnactEdits: _propTypes.default.func.isRequired,
  extraHeaderButtons: _propTypes.default.arrayOf(_propTypes.default.any),
  selectedRows: _propTypes.default.any.isRequired
};

var _default = (0, _withStyles.default)(_styles.styleSheetTableHeader)(TableHeader);

exports.default = _default;