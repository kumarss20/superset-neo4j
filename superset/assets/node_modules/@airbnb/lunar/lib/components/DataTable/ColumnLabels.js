"use strict";

exports.__esModule = true;
exports.default = ColumnLabels;

var _react = _interopRequireDefault(require("react"));

var _reactVirtualized = require("react-virtualized");

var _SortCarets = _interopRequireDefault(require("../SortCarets"));

var _Spacing = _interopRequireDefault(require("../Spacing"));

var _Text = _interopRequireDefault(require("../Text"));

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** See https://github.com/bvaughn/react-virtualized/blob/master/source/Table/defaultHeaderRowRenderer.js.
    In order to overwrite the existing labels and carets in defaultHeaderRowRenderer,
    we clone them from props (children[0] = label, children[1] = carets), build around their data. */
function ColumnLabels(_ref) {
  let {
    cx,
    styles,
    columnToLabel = {},
    showColumnDividers,
    rowHeight,
    columnHeaderHeight,
    expandable,
    selectable,
    columnMetadata,
    columnLabelCase
  } = _ref;
  return (_ref2) => {
    let {
      className,
      columns,
      style
    } = _ref2;
    const leftmostIdx = Number(expandable) + Number(selectable);
    const heightStyle = {
      height: (0, _helpers.getHeight)(rowHeight, columnHeaderHeight)
    };
    const rightAlignmentStyle = {
      justifyContent: 'flex-end',
      width: '100%'
    };
    const newColumns = columns.map((col, idx) => {
      if (!_react.default.isValidElement(col)) {
        return col;
      }

      const {
        children
      } = col.props;
      const key = children[0].props.children;
      const label = columnToLabel[key] ? columnToLabel[key] : key && (0, _helpers.caseColumnLabel)(key, columnLabelCase);
      const sort = children[1] && children[1].props.sortDirection;
      const isLeftmost = idx === leftmostIdx;
      const isRightmost = idx === columns.length - 1;
      const indent = !((expandable || selectable) && isLeftmost);
      const showDivider = showColumnDividers && !!label && !isRightmost;
      const sortable = !columnMetadata || !columnMetadata[key] || columnMetadata[key].disableSorting !== 1;

      const newHeader = _react.default.createElement(_Spacing.default, {
        left: indent ? 2 : 0
      }, _react.default.createElement("div", {
        style: heightStyle,
        className: cx(showDivider && styles && styles.column_divider)
      }, _react.default.createElement("div", {
        style: columnMetadata && columnMetadata[key] && columnMetadata[key].rightAlign ? rightAlignmentStyle : {},
        className: cx(styles && styles.headerRow)
      }, _react.default.createElement(_Text.default, {
        micro: true,
        muted: true
      }, label), label && sortable && _react.default.createElement(_Spacing.default, {
        inline: true,
        left: 0.5
      }, _react.default.createElement(_SortCarets.default, {
        down: true,
        up: true,
        enableDown: sort === _reactVirtualized.SortDirection.DESC,
        enableUp: sort === _reactVirtualized.SortDirection.ASC
      })))));

      return _react.default.cloneElement(col, col.props, newHeader);
    });
    return _react.default.createElement("div", {
      role: "row",
      style: style,
      className: cx(className, styles && styles.column_header)
    }, newColumns);
  };
}