"use strict";

exports.__esModule = true;
exports.default = exports.ImageViewer = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _ZoomControls = _interopRequireDefault(require("./ZoomControls"));

exports.ZoomControls = _ZoomControls.default;

var _RotateControls = _interopRequireDefault(require("./RotateControls"));

exports.RotateControls = _RotateControls.default;

var _ResponsiveImage = _interopRequireDefault(require("../ResponsiveImage"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** An image viewer that can zoom, drag, and rotate an image. */
class ImageViewer extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      dragging: false,
      imageLocation: {
        x: 0,
        y: 0
      },
      lastMouseLocation: {
        x: 0,
        y: 0
      }
    });

    _defineProperty(this, "handleMouseDown", event => {
      event.preventDefault();
      this.setState({
        dragging: true,
        lastMouseLocation: {
          x: event.pageX,
          y: event.pageY
        }
      });
    });

    _defineProperty(this, "handleMouseUp", event => {
      event.preventDefault();
      this.setState({
        dragging: false,
        lastMouseLocation: {
          x: 0,
          y: 0
        }
      });
    });

    _defineProperty(this, "handleMouseMove", event => {
      event.preventDefault();

      if (this.state.dragging) {
        this.setState((_ref) => {
          let {
            dragging,
            imageLocation,
            lastMouseLocation
          } = _ref;
          const xDiff = lastMouseLocation.x - event.pageX;
          const yDiff = lastMouseLocation.y - event.pageY;
          return {
            imageLocation: {
              x: imageLocation.x - xDiff,
              y: imageLocation.y - yDiff
            },
            lastMouseLocation: {
              x: event.pageX,
              y: event.pageY
            }
          };
        });
      }
    });
  }

  componentDidMount() {
    document.addEventListener('mousemove', this.handleMouseMove, false);
  }

  componentWillUnmount() {
    document.removeEventListener('mousemove', this.handleMouseMove, false);
  }

  getTransformStyle() {
    const {
      imageLocation: {
        x,
        y
      }
    } = this.state;
    const {
      scale,
      rotation
    } = this.props; // rotation and scale have defaultProp values

    const radian = rotation / 180 * Math.PI;
    const sinRotation = Math.sin(radian);
    const cosRotation = Math.cos(radian);
    const translateX = (y * sinRotation + x * cosRotation) / scale;
    const translateY = (y * cosRotation - x * sinRotation) / scale;
    return {
      transform: "scale(" + scale + ") rotate(" + rotation + "deg) translateY(" + translateY + "px) translateX(" + translateX + "px)"
    };
  }

  render() {
    const {
      alt,
      borderless,
      height,
      src,
      width,
      cx,
      styles
    } = this.props;
    return _react.default.createElement("div", {
      className: cx(styles.container, borderless && styles.container_borderless),
      role: "presentation",
      style: {
        width,
        height
      },
      onMouseDown: this.handleMouseDown,
      onMouseUp: this.handleMouseUp
    }, _react.default.createElement("div", {
      className: cx(styles.image),
      style: this.getTransformStyle()
    }, _react.default.createElement(_ResponsiveImage.default, {
      contain: true,
      noShadow: true,
      alt: alt,
      borderRadius: 0,
      maxWidth: width,
      maxHeight: height,
      src: src
    })));
  }

}

exports.ImageViewer = ImageViewer;

_defineProperty(ImageViewer, "propTypes", {
  alt: _propTypes.default.string.isRequired,
  borderless: _propTypes.default.bool,
  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  rotation: _propTypes.default.number,
  src: _propTypes.default.string.isRequired,
  scale: _propTypes.default.number,
  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
});

_defineProperty(ImageViewer, "defaultProps", {
  height: 'none',
  rotation: 0,
  scale: 1,
  width: 'none'
});

var _default = (0, _withStyles.default)(_styles.styleSheet)(ImageViewer);

exports.default = _default;