"use strict";

exports.__esModule = true;
exports.default = ZoomControls;
exports.ZOOM_OPTIONS = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _IconAdd = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconAdd"));

var _IconRemove = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconRemove"));

var _Button = _interopRequireDefault(require("../Button"));

var _IconButton = _interopRequireDefault(require("../IconButton"));

var _ButtonGroup = _interopRequireDefault(require("../ButtonGroup"));

var _Dropdown = _interopRequireDefault(require("../Dropdown"));

var _Menu = _interopRequireWildcard(require("../Menu"));

var _Translate = _interopRequireDefault(require("../Translate"));

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const styleSheet = () => ({
  controls: {
    position: 'relative',
    display: 'inline-block'
  }
});

const ZOOM_FACTOR = 0.5;
const ZOOM_OPTIONS = [{
  label: '100%',
  scale: 1
}, {
  label: '125%',
  scale: 1.25
}, {
  label: '150%',
  scale: 1.5
}, {
  label: '200%',
  scale: 2
}];
exports.ZOOM_OPTIONS = ZOOM_OPTIONS;

/** Zoom controls that can be used with an image viewer component */
function ZoomControls(props) {
  const [styles, cx] = (0, _useStyles.default)(styleSheet);
  const [visible, setVisible] = (0, _react.useState)(false);
  const {
    onScale,
    scale = 1
  } = props;
  const zoomOptions = ZOOM_OPTIONS.map(zoom => _extends({}, zoom, {
    handleOnClick: () => {
      onScale(zoom.scale);
      setVisible(false);
    }
  }));
  const handleZoomOut = (0, _react.useCallback)(() => onScale(scale - ZOOM_FACTOR < 1 ? 1 : scale - ZOOM_FACTOR), [onScale, scale]);
  const handleZoomIn = (0, _react.useCallback)(() => onScale(scale + ZOOM_FACTOR), [onScale, scale]);
  const toggleZoomMenu = (0, _react.useCallback)(() => setVisible(!visible), [visible]);
  return _react.default.createElement("div", {
    className: cx(styles.controls)
  }, _react.default.createElement(_ButtonGroup.default, null, _react.default.createElement(_IconButton.default, {
    disabled: scale === 1,
    onClick: handleZoomOut
  }, _react.default.createElement(_IconRemove.default, {
    accessibilityLabel: _Translate.default.phrase('Zoom out', {}, 'Label for zoom out button'),
    size: "2em"
  })), _react.default.createElement(_Button.default, {
    borderless: true,
    onClick: toggleZoomMenu
  }, scale * 100, "%"), _react.default.createElement(_IconButton.default, {
    onClick: handleZoomIn
  }, _react.default.createElement(_IconAdd.default, {
    accessibilityLabel: _Translate.default.phrase('Zoom in', {}, 'Label for zoom in button'),
    size: "2em"
  }))), visible && _react.default.createElement(_Dropdown.default, {
    visible: visible,
    left: "0",
    zIndex: 5,
    onClickOutside: toggleZoomMenu
  }, _react.default.createElement(_Menu.default, {
    accessibilityLabel: _Translate.default.phrase('Zoom dropdown menu', {}, 'Label for dropdown menu with zoom options')
  }, zoomOptions.map(zoom => _react.default.createElement(_Menu.Item, {
    key: zoom.scale,
    onClick: zoom.handleOnClick
  }, zoom.label)))));
}

ZoomControls.propTypes = {
  scale: _propTypes.default.number,
  onScale: _propTypes.default.func.isRequired
};