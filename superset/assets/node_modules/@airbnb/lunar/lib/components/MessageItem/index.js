"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _airbnbPropTypes = require("airbnb-prop-types");

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

var _removeFocusOnMouseUp = _interopRequireDefault(require("../../utils/removeFocusOnMouseUp"));

var _ProfilePhoto = _interopRequireDefault(require("../ProfilePhoto"));

var _Shimmer = _interopRequireDefault(require("../Shimmer"));

var _Text = _interopRequireDefault(require("../Text"));

var _Spacing = _interopRequireDefault(require("../Spacing"));

var _Translate = _interopRequireDefault(require("../Translate"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** An individual comment within a message thread. */
function MessageItem(_ref) {
  let {
    children,
    disableTitleTranslation,
    email,
    formattedTimestamp,
    horizontalSpacing,
    icon,
    imageBadgeSrc,
    imageDescription,
    imageSrc,
    important,
    info,
    loadingAuthor,
    onClickImage,
    onClickTitle,
    sending,
    source,
    title,
    titleClickDescription,
    titleTag,
    verticalSpacing,
    warning
  } = _ref;
  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheet);

  const getAvatar = () => {
    if (loadingAuthor) {
      return _react.default.createElement(_Shimmer.default, {
        width: 32,
        height: 32,
        radius: "50%"
      });
    }

    let profilePhoto = null;

    if (imageSrc) {
      profilePhoto = _react.default.createElement(_ProfilePhoto.default, {
        imageSrc: imageSrc,
        size: 4,
        title: imageDescription || title
      });
    } else if (icon) {
      profilePhoto = _react.default.createElement(_Spacing.default, {
        left: 2,
        top: 0.5
      }, icon);
    }

    const avatar = imageBadgeSrc ? _react.default.createElement(_react.default.Fragment, null, profilePhoto, _react.default.createElement("div", {
      className: cx(styles.profileBadge)
    }, _react.default.createElement(_ProfilePhoto.default, {
      imageSrc: imageBadgeSrc,
      size: 2,
      title: _Translate.default.phrase('Profile photo badge', {}, {
        context: 'Profile photo descriptive image text within a message bubble',
        key: 'lunar.message.photoLabel'
      })
    }))) : profilePhoto;

    if (onClickImage) {
      return _react.default.createElement("button", {
        className: cx(styles.resetButton),
        type: "button",
        title: imageDescription || title,
        onClick: onClickImage,
        onMouseUp: _removeFocusOnMouseUp.default
      }, avatar);
    }

    return avatar;
  };

  const getTitle = () => {
    if (loadingAuthor) {
      return _react.default.createElement(_Shimmer.default, {
        width: 150,
        height: 14
      });
    }

    const formatedTitle = disableTitleTranslation ? _react.default.createElement("span", {
      className: "notranslate"
    }, title) : title;

    if (onClickTitle) {
      return _react.default.createElement("button", {
        className: cx(styles.resetButton),
        type: "button",
        title: titleClickDescription || title,
        onClick: onClickTitle,
        onMouseUp: _removeFocusOnMouseUp.default
      }, _react.default.createElement(_Text.default, {
        bold: true
      }, formatedTitle));
    }

    return _react.default.createElement(_Text.default, {
      bold: true
    }, formatedTitle);
  };

  const timestamp = source ? _Translate.default.phrase('%{time} via %{source}', {
    time: formattedTimestamp,
    source
  }, {
    context: 'Timestamp and source within a message bubble',
    key: 'lunar.message.source'
  }) : formattedTimestamp;
  return _react.default.createElement("div", {
    className: cx(styles.container, horizontalSpacing && styles.container_horizontalSpacing, verticalSpacing && styles.container_verticalSpacing, !!(important || info || warning) && styles.container_withStripe, important && styles.container_important, info && styles.container_info, warning && styles.container_warning)
  }, _react.default.createElement("div", {
    className: cx(styles.grid)
  }, _react.default.createElement("div", {
    className: cx(styles.relative)
  }, getAvatar()), _react.default.createElement("div", null, _react.default.createElement(_Spacing.default, {
    bottom: 0.5
  }, _react.default.createElement("div", {
    className: cx(styles.title)
  }, _react.default.createElement(_Spacing.default, {
    inline: true,
    bottom: 0.5,
    right: 1
  }, getTitle()), titleTag && _react.default.createElement(_Spacing.default, {
    inline: true,
    bottom: 0.5,
    right: 1
  }, _react.default.createElement("div", {
    className: cx(styles.tag)
  }, _react.default.createElement(_Text.default, {
    micro: true,
    muted: true
  }, titleTag))), _react.default.createElement(_Text.default, {
    small: true,
    muted: true
  }, timestamp)), email && _react.default.createElement(_Text.default, {
    small: true,
    muted: true
  }, _react.default.createElement(_Translate.default, {
    html: true,
    k: "lunar.message.fromUser",
    phrase: "From: %{email}",
    email: email,
    context: "Who the message is from"
  }))), _react.default.createElement("div", {
    className: cx(styles.wordBreak)
  }, children))), sending && _react.default.createElement("div", {
    className: cx(styles.sendingOverlay)
  }));
} // add color flags here


const stripeColorTypePropType = (0, _airbnbPropTypes.mutuallyExclusiveTrueProps)('important', 'info', 'warning');
MessageItem.propTypes = {
  verticalSpacing: _propTypes.default.bool,
  titleTag: _propTypes.default.string,
  titleClickDescription: _propTypes.default.string,
  title: _propTypes.default.string.isRequired,
  source: _propTypes.default.string,
  sending: _propTypes.default.bool,
  onClickTitle: _propTypes.default.func,
  onClickImage: _propTypes.default.func,
  loadingAuthor: _propTypes.default.bool,
  imageSrc: _propTypes.default.string,
  imageDescription: _propTypes.default.string,
  imageBadgeSrc: _propTypes.default.string,
  icon: _propTypes.default.node,
  horizontalSpacing: _propTypes.default.bool,
  formattedTimestamp: _propTypes.default.string.isRequired,
  email: _propTypes.default.node,
  disableTitleTranslation: _propTypes.default.bool,
  children: _propTypes.default.any.isRequired,
  important: stripeColorTypePropType,
  info: stripeColorTypePropType,
  warning: stripeColorTypePropType
};
var _default = MessageItem;
exports.default = _default;