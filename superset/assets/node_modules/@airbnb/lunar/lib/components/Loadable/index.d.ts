import React from 'react';
import { RenderableProp } from '../../utils/renderElementOrFunction';
export declare type Props<T extends object> = {
    /** Allow all props since they are piped to the loaded component. */
    [prop: string]: unknown;
    /** Render the component once it has been loaded. */
    children?: React.ReactNode | ((component: React.ComponentType<T>, ownProps: T) => React.ReactElement);
    /** A function that `import()`s a component and returns a promise. */
    component: () => Promise<{
        default: React.ComponentType<T>;
    }>;
    /**
     * Delay in milliseconds before showing the loader to avoid unnecessary rendering and flashing.
     * Pass 0 to disable the delay.
     */
    delay?: number;
    /**
     * Render an element or a function that returns an element when an error occurs.
     * The function is passed the `Error` as an argument.
     * When not defined, this defaults to `ErrorMessage`.
     */
    error?: RenderableProp<Error>;
    /**
     * Render an element or a function that returns an element while loading.
     * When not defined, this defaults to `Loader`.
     */
    loading?: RenderableProp;
    /** Disable the error state. */
    noError?: boolean;
    /** Disable the loading state. */
    noLoading?: boolean;
};
export declare type State = {
    error: Error | null;
    showLoading: boolean;
};
/**
 * A declarative component for async loading of other components via native `import()` and `React.lazy`.
 * @experimental Requires React.lazy
 */
export default class Loadable<T extends object = {}> extends React.Component<Props<T>, State> {
    static defaultProps: {
        delay: number;
        error: null;
        loading: null;
        noError: boolean;
        noLoading: boolean;
    };
    state: State;
    static factory<P extends object>(component: Props<P>['component'], initialProps?: Omit<Props<P>, 'component'>): (props: P) => JSX.Element;
    componentDidCatch(error: Error): void;
    componentDidMount(): void;
    renderComponent: () => any;
    renderError: () => JSX.Element | null;
    renderLoading(): NonNullable<React.ReactNode> | null;
    render(): JSX.Element | null;
}
//# sourceMappingURL=index.d.ts.map