"use strict";

exports.__esModule = true;
exports.default = ScrollSection;
exports.InternalScrollSection = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _ScrollWrapper = _interopRequireDefault(require("./ScrollWrapper"));

exports.ScrollWrapper = _ScrollWrapper.default;

var _ScrollContext = _interopRequireDefault(require("./ScrollContext"));

exports.ScrollSectionContext = _ScrollContext.default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** @ignore */
class InternalScrollSection extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleRef", ref => {
      const {
        id,
        scrollContext
      } = this.props;
      scrollContext.removeScrollAnchor(id);

      if (ref) {
        scrollContext.addScrollAnchor(id, ref);
      }
    });
  }

  render() {
    const {
      children,
      id
    } = this.props;
    return _react.default.createElement("section", {
      ref: this.handleRef,
      id: id
    }, children);
  }

}
/**
 * A section of the page that's measured for active scrolling by wrapping children in section
 * tag that can be scrolled to. Used in conjunction with `ScrollWrapper`.
 */


exports.InternalScrollSection = InternalScrollSection;

_defineProperty(InternalScrollSection, "propTypes", {
  id: _propTypes.default.string.isRequired,
  children: _propTypes.default.any.isRequired,
  scrollContext: _propTypes.default.any.isRequired
});

function ScrollSection(props) {
  return _react.default.createElement(_ScrollContext.default.Consumer, null, scrollContext => scrollContext && _react.default.createElement(InternalScrollSection, _extends({}, props, {
    scrollContext: scrollContext
  })));
}

ScrollSection.propTypes = {
  id: _propTypes.default.string.isRequired,
  children: _propTypes.default.any.isRequired
};