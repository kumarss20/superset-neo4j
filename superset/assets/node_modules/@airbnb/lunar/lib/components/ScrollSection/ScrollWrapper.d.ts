import React from 'react';
import { WithStylesProps } from '../../composers/withStyles';
import { Context } from './ScrollContext';
export declare type Props = {
    /** The contents of the wrapper. */
    children: NonNullable<React.ReactNode>;
    /**
     * Shrink or grow the observed region of the wrapper for intersections.
     * Defaults to only top 1% of the wrapper.
     */
    intersectionMargin?: string;
    /** Threshold in which to check for intersections. */
    intersectionThreshold?: number;
    /** Callback for when the active region changes. */
    onChangeActiveScrollSection?: (id: string) => void;
    /** Callback for when a previously active region becomes hidden. */
    onHideScrollSection?: (id: string) => void;
};
/** Wrapper that measures location of `ScrollSection`s. */
export declare class ScrollWrapper extends React.Component<Props & WithStylesProps> {
    static defaultProps: {
        intersectionMargin: string;
    };
    anchors: Map<any, any>;
    observer: IntersectionObserver | null;
    scrollContext?: Context;
    scrollRef: React.RefObject<HTMLDivElement>;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props): void;
    setupObserver(): void;
    addScrollAnchor: (name: string, anchor: HTMLElement) => void;
    removeScrollAnchor: (name: string) => void;
    private handleIntersect;
    render(): JSX.Element;
}
declare const _default: import("aesthetic-react").StyledComponent<import("../../types").Theme, Props & import("aesthetic-react").WithStylesWrapperProps>;
export default _default;
//# sourceMappingURL=ScrollWrapper.d.ts.map