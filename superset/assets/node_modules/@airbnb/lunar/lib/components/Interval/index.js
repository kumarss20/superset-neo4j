"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// If there's no idle frame within 2 seconds, force calling
// the tick anyway, to prevent a poor user experience.
const FORCE_TICK_CALL = 2000;

/** Continuously render content at an interval. */
class Interval extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      now: Date.now()
    });

    _defineProperty(this, "ric", 0);

    _defineProperty(this, "timer", 0);

    _defineProperty(this, "tick", () => {
      this.timer = 0;
      this.ric = window.requestIdleCallback(() => {
        this.ric = 0;
        this.setState({
          now: Date.now()
        }, () => {
          this.timer = window.setTimeout(this.tick, this.props.every);
        });
      }, {
        timeout: FORCE_TICK_CALL
      });
    });
  }

  componentDidMount() {
    this.timer = window.setTimeout(this.tick, this.props.every);
  }

  componentWillUnmount() {
    // istanbul ignore next
    if (this.timer) {
      window.clearTimeout(this.timer);
    } // istanbul ignore next


    if (this.ric) {
      window.cancelIdleCallback(this.ric);
    }
  }

  render() {
    return this.props.children(this.state.now);
  }

}

exports.default = Interval;

_defineProperty(Interval, "propTypes", {
  every: _propTypes.default.number.isRequired,
  children: _propTypes.default.func.isRequired
});