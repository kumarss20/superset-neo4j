"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _v = _interopRequireDefault(require("uuid/v4"));

var _shallowequal = _interopRequireDefault(require("shallowequal"));

var _proxyComponent = _interopRequireDefault(require("../../utils/proxyComponent"));

var _FormField = _interopRequireWildcard(require("../FormField"));

var _CheckBox = _interopRequireDefault(require("../CheckBox"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Manage multiple checkboxes with the same input `name`. */
class CheckBoxController extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      id: (0, _v.default)(),
      values: new Set(this.props.value)
    });

    _defineProperty(this, "handleChange", (checked, value, event) => {
      this.setState(prevState => {
        const values = new Set(prevState.values);

        if (checked) {
          values.add(value);
        } else {
          values.delete(value);
        }

        return {
          values
        };
      }, () => {
        this.props.onChange(Array.from(this.state.values), event);
      });
    });

    _defineProperty(this, "renderCheckBox", (0, _proxyComponent.default)(_CheckBox.default, (_ref) => {
      let {
        value
      } = _ref,
          props = _objectWithoutPropertiesLoose(_ref, ["value"]);

      const {
        inputProps
      } = (0, _FormField.partitionFieldProps)(this.props);
      const {
        id,
        values
      } = this.state;
      return _react.default.createElement(_CheckBox.default, _extends({
        compactSpacing: true
      }, props, inputProps, {
        hideOptionalLabel: true,
        id: id + "-" + value,
        value: value,
        checked: values.has(value),
        onChange: this.handleChange
      }));
    }));
  }

  componentDidUpdate(prevProps) {
    if (!(0, _shallowequal.default)(this.props.value, prevProps.value)) {
      this.setState({
        values: new Set(this.props.value)
      });
    }
  }

  render() {
    const {
      children,
      fieldProps
    } = (0, _FormField.partitionFieldProps)(this.props);
    const {
      id,
      values
    } = this.state;
    return _react.default.createElement(_FormField.default, _extends({}, fieldProps, {
      id: id
    }), children(this.renderCheckBox, Array.from(values), id));
  }

}

exports.default = CheckBoxController;

_defineProperty(CheckBoxController, "propTypes", {
  children: _propTypes.default.func.isRequired,
  name: _propTypes.default.string.isRequired,
  onChange: _propTypes.default.func.isRequired,
  value: _propTypes.default.arrayOf(_propTypes.default.string)
});

_defineProperty(CheckBoxController, "defaultProps", {
  value: []
});