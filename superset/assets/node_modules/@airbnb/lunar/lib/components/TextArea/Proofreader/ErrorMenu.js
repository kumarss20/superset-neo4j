"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Translate = _interopRequireDefault(require("../../Translate"));

var _Menu = _interopRequireWildcard(require("../../Menu"));

var _Text = _interopRequireDefault(require("../../Text"));

var _Interweave = _interopRequireDefault(require("../../Interweave"));

var _TrackingBoundary = _interopRequireDefault(require("../../TrackingBoundary"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ErrorMenu extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", replacement => {
      this.props.onReplaceText(this.props.error, replacement);
    });

    _defineProperty(this, "replacementText", replacement => {
      switch (replacement) {
        case ' ':
          return _Translate.default.phrase('(Space)', {}, {
            context: 'Represents a space character within the spell checker',
            key: 'lunar.proofreader.whiteSpace'
          });

        case '':
          return _Translate.default.phrase('Delete', {}, {
            context: 'Represents deleting within the spell checker',
            key: 'lunar.proofreader.delete'
          });

        default:
          return replacement;
      }
    });
  }

  render() {
    const {
      error
    } = this.props;
    return _react.default.createElement(_TrackingBoundary.default, {
      name: "Proofreader/ErrorMenu"
    }, _react.default.createElement(_Menu.default, {
      accessibilityLabel: _Translate.default.phrase('Spelling or grammar replacements', {}, {
        context: 'Menu with a list of spelling mistake replacements',
        key: 'lunar.proofreader.replacementLabel'
      })
    }, _react.default.createElement(_Menu.Row, null, _react.default.createElement(_Text.default, {
      small: true,
      muted: true,
      bold: true
    }, _react.default.createElement(_Interweave.default, {
      content: error.short_message || error.message
    }))), error.replacements.map(replacement => _react.default.createElement(_Menu.Item, {
      key: replacement,
      onClick: () => this.handleClick(replacement)
    }, _react.default.createElement(_Text.default, null, this.replacementText(replacement))))));
  }

}

exports.default = ErrorMenu;

_defineProperty(ErrorMenu, "propTypes", {
  error: _propTypes.default.any.isRequired,
  onReplaceText: _propTypes.default.func.isRequired
});