"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Translate = _interopRequireDefault(require("../../Translate"));

var _Menu = _interopRequireWildcard(require("../../Menu"));

var _Text = _interopRequireDefault(require("../../Text"));

var _TrackingBoundary = _interopRequireDefault(require("../../TrackingBoundary"));

var _constants = require("../../../constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class LocaleMenu extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", locale => {
      this.props.onSelectLocale(locale);
    });
  }

  render() {
    const {
      autoDefinition,
      noneDefinition,
      selectedLocale
    } = this.props;
    const locales = [..._constants.LT_LOCALES];
    locales.sort((a, b) => a.label.localeCompare(b.label));
    return _react.default.createElement(_TrackingBoundary.default, {
      name: "Proofreader/LocaleMenu"
    }, _react.default.createElement(_Menu.default, {
      accessibilityLabel: _Translate.default.phrase('Language selector', {}, {
        context: 'Language selector for proofreader (spelling and grammer checker)',
        key: 'lunar.proofreader.languageSelector'
      })
    }, _react.default.createElement(_Menu.Row, null, _react.default.createElement(_Text.default, {
      small: true,
      muted: true,
      bold: true
    }, _react.default.createElement(_Translate.default, {
      k: "lunar.proofreader.selectLanguage",
      phrase: "Select a language",
      context: "Select a language to run spelling checks"
    }))), noneDefinition && _react.default.createElement(_Menu.Item, {
      key: noneDefinition.locale,
      highlighted: selectedLocale === noneDefinition.locale,
      onClick: () => this.handleClick(noneDefinition.locale)
    }, _react.default.createElement(_Text.default, {
      inline: true
    }, noneDefinition.label)), autoDefinition && _react.default.createElement(_Menu.Item, {
      key: autoDefinition.locale,
      highlighted: selectedLocale === autoDefinition.locale,
      onClick: () => this.handleClick(autoDefinition.locale)
    }, _react.default.createElement(_Text.default, {
      inline: true
    }, autoDefinition.label)), (noneDefinition || autoDefinition) && _react.default.createElement(_Menu.Separator, null), locales.map(definition => _react.default.createElement(_Menu.Item, {
      key: definition.locale,
      highlighted: selectedLocale === definition.locale,
      onClick: () => this.handleClick(definition.locale)
    }, _react.default.createElement(_Text.default, {
      inline: true
    }, definition.label)))));
  }

}

exports.default = LocaleMenu;

_defineProperty(LocaleMenu, "propTypes", {
  autoDefinition: _propTypes.default.any,
  noneDefinition: _propTypes.default.any,
  selectedLocale: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.oneOf([null])]),
  onSelectLocale: _propTypes.default.func.isRequired
});