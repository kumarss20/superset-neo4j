/// <reference types="lodash" />
import React from 'react';
import { WithStylesProps } from '../../../composers/withStyles';
import { ProofreadRuleMatch, ProofreaderResponse, DefinitionShape, ExtraProofreadProps, ProofreaderParams } from './types';
import { Props as FormInputProps } from '../../private/FormInput';
declare function defaultIsRuleHighlighted(rule: ProofreadRuleMatch): boolean;
declare function defaultIsRuleSecondary(rule: ProofreadRuleMatch): boolean;
export declare type Position = {
    left: number;
    top: number;
};
export declare type Props = Pick<FormInputProps, 'important'> & ExtraProofreadProps & {
    locale?: string;
    name: string;
    id: string;
    noTranslate?: boolean;
    onChange: (value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;
    onCheckText: (params: ProofreaderParams) => Promise<ProofreaderResponse>;
    value: string;
};
export declare type State = {
    errors: ProofreadRuleMatch[];
    loading: boolean;
    position: Position | null;
    selectedError: ProofreadRuleMatch | null;
    selectedLocale: string | null;
    showLocaleMenu: boolean;
    text: string;
    unsupportedLocale: string | null;
};
export declare type Snapshot = {
    selectionStart?: number;
    selectionEnd?: number;
};
export declare class Proofreader extends React.Component<Props & WithStylesProps, State, Snapshot> {
    static defaultProps: {
        isRuleHighlighted: typeof defaultIsRuleHighlighted;
        isRuleSecondary: typeof defaultIsRuleSecondary;
        locale: string;
    };
    caretRef: React.RefObject<HTMLDivElement>;
    controlsRef: React.RefObject<HTMLDivElement>;
    shadowRef: React.RefObject<HTMLDivElement>;
    textareaRef: React.RefObject<HTMLTextAreaElement>;
    inputRaf: number;
    syncScrollRaf: number;
    scrollTimeout: number;
    state: State;
    getSnapshotBeforeUpdate(): {
        selectionStart: number;
        selectionEnd: number;
    } | null;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props, prevState: State, snapshot: Snapshot): void;
    componentWillUnmount(): void;
    setCursorPosition(snapshot: Snapshot): void;
    checkText(): Promise<void>;
    checkTextAndClearErrors(): void;
    checkTextDebounced: (() => Promise<void>) & import("lodash").Cancelable;
    checkForAirbnbErrors(text: string): ProofreadRuleMatch[];
    getLocaleDefinition(locale: string): DefinitionShape;
    getCaretOffset(): Position;
    selectAppropriateLocale(): void;
    /**
     * When clicking into a textarea, or moving the cursor around with arrow keys,
     * attempt to detect any current errors at the defined offsets.
     */
    selectErrorAtPosition(position: number): void;
    syncScrollPositions: () => void;
    performSyncScroll: () => void;
    private handleTextAreaClick;
    private handleTextAreaKeyDown;
    /**
     * When a user is typing, we need to capture the offset of the caret within the textarea,
     * and determine when they are typing near the bottom of the container. If so,
     * we need to set the scroll top to max so text doesn't go behind the control bar.
     */
    private handleInput;
    private handleInputScroll;
    /**
     * When a marked/highlighted word is focused, open the error menu with the marks position.
     */
    private handleOpenErrorMenu;
    /**
     * When a replacement word is clicked within the error menu, replace the current text with the
     * new word at the define error offsets.
     */
    private handleReplaceText;
    /**
     * Keep shadow scroll position in sync with the textarea.
     */
    private handleScroll;
    private handleSelectLocale;
    private handleToggleLocaleMenu;
    renderTextWithMarks(): string | (string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal)[];
    render(): JSX.Element;
}
declare const _default: import("aesthetic-react").StyledComponent<import("../../../types").Theme, Pick<FormInputProps<unknown>, "important"> & ExtraProofreadProps & {
    locale?: string | undefined;
    name: string;
    id: string;
    noTranslate?: boolean | undefined;
    onChange: (value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;
    onCheckText: (params: ProofreaderParams) => Promise<ProofreaderResponse>;
    value: string;
} & import("aesthetic-react").WithStylesWrapperProps>;
export default _default;
//# sourceMappingURL=index.d.ts.map