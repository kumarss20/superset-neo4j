"use strict";

exports.__esModule = true;
exports.default = BaseCheckBox;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _IconCheck = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconCheck"));

var _IconRemove = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconRemove"));

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

var _FormInput = _interopRequireDefault(require("./FormInput"));

var _buildInputStyles = _interopRequireDefault(require("../../themes/buildInputStyles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const styleSheet = theme => {
  const styles = (0, _buildInputStyles.default)(theme);
  return _extends({}, styles, {
    checkbox: {
      padding: 0,
      margin: 0,
      marginTop: 2,
      width: 18,
      height: 18,
      display: 'block',
      lineHeight: 0,
      // Add focus styling to the checkbox icons
      '@selectors': {
        '> input:focus + span': {
          boxShadow: "0 0 3px 3px " + theme.color.core.primary[2]
        }
      }
    },
    checkbox_hideLabel: {
      display: 'block',
      marginTop: 0
    },
    input: _extends({}, styles.input, {
      width: 18,
      height: 18,
      padding: 0,
      display: 'inline-block',
      cursor: 'pointer',
      position: 'relative',
      // Checkmark
      textAlign: 'center',
      fontSize: 10,
      lineHeight: '15px',
      letterSpacing: 0,
      color: theme.color.base
    }),
    checkmark: {
      position: 'absolute',
      top: -1.5,
      left: -1.5
    },
    indeterminate: {
      position: 'absolute',
      top: -1,
      left: -1
    },
    children: {
      marginLeft: theme.unit
    }
  });
};

function BaseCheckBox(_ref) {
  let {
    button,
    checked,
    children,
    compact,
    disabled,
    hideLabel,
    id,
    invalid,
    indeterminate,
    onChange
  } = _ref,
      restProps = _objectWithoutPropertiesLoose(_ref, ["button", "checked", "children", "compact", "disabled", "hideLabel", "id", "invalid", "indeterminate", "onChange"]);

  const [styles, cx] = (0, _useStyles.default)(styleSheet);

  const handleChange = event => {
    onChange(event.currentTarget.checked, event.currentTarget.value, event);
  };

  const checkbox = _react.default.createElement("label", {
    htmlFor: id,
    className: cx(styles.checkbox, hideLabel && styles.checkbox_hideLabel)
  }, _react.default.createElement(_FormInput.default, _extends({}, restProps, {
    hidden: true,
    optional: true,
    checked: checked,
    disabled: disabled,
    id: id,
    invalid: invalid,
    tagName: "input",
    type: "checkbox",
    onChange: handleChange
  })), _react.default.createElement("span", {
    className: cx(styles.input, indeterminate && styles.input_indeterminate, checked && styles.input_checked, invalid && styles.input_invalid, disabled && styles.input_disabled)
  }, checked && _react.default.createElement("span", {
    className: cx(styles.checkmark)
  }, _react.default.createElement(_IconCheck.default, {
    decorative: true,
    size: "1.65em"
  })), indeterminate && _react.default.createElement("span", {
    className: cx(styles.indeterminate)
  }, _react.default.createElement(_IconRemove.default, {
    decorative: true,
    size: "1.65em"
  }))));

  if (!button) {
    return checkbox;
  }

  return _react.default.createElement("label", {
    htmlFor: id,
    className: cx(styles.button, indeterminate && styles.input_indeterminate, checked && styles.button_checked, invalid && styles.button_invalid, disabled && styles.button_disabled, compact && styles.button_compact)
  }, checkbox, _react.default.createElement("div", {
    className: cx(styles.children)
  }, children));
}

BaseCheckBox.propTypes = {
  button: _propTypes.default.bool,
  children: _propTypes.default.node,
  hideLabel: _propTypes.default.bool,
  onChange: _propTypes.default.func.isRequired,
  indeterminate: _propTypes.default.bool
};