import React from 'react';
export declare type ButtonOrLinkTypes = HTMLAnchorElement | HTMLButtonElement;
export declare type Props = {
    [prop: string]: unknown;
    /** Icon to display at the end the content. */
    afterIcon?: React.ReactNode;
    /** Icon to display at the start the content. */
    beforeIcon?: React.ReactNode;
    /** Content within the button or link. */
    children: NonNullable<React.ReactNode>;
    /** Whether the element is disabled. */
    disabled?: boolean;
    /** Apply flexbox styles to icons. */
    flexAlign?: boolean;
    /** Render as an anchor link with a URL. */
    href?: string;
    /** Whether the element is loading. */
    loading?: boolean;
    /** Callback fired when the element is clicked. */
    onClick?: (event: React.MouseEvent<ButtonOrLinkTypes>) => void;
    /** Callback fired when the element is released. */
    onMouseUp?: (event: React.MouseEvent<ButtonOrLinkTypes>) => void;
    /** When a link, open the target in a new window. */
    openInNewWindow?: boolean;
    /** Rel attribute override for if the component has an href */
    rel?: string;
    /** Add a data-tracking-name attribute. */
    trackingName?: string;
    /** When a button, the type of button. */
    type?: 'button' | 'submit' | 'reset';
};
export default class ButtonOrLink extends React.Component<Props> {
    static defaultProps: {
        afterIcon: null;
        beforeIcon: null;
        disabled: boolean;
        flexAlign: boolean;
        href: string;
        loading: boolean;
        openInNewWindow: boolean;
        type: string;
    };
    private handleClick;
    private handleMouseUp;
    render(): JSX.Element;
}
//# sourceMappingURL=ButtonOrLink.d.ts.map