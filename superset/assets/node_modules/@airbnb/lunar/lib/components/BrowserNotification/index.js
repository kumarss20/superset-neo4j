"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Display a browser notification through a declarative component. */
class BrowserNotification extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "closeTimeout", void 0);

    _defineProperty(this, "notification", null);
  }

  componentDidMount() {
    this.showNotification();
  }

  componentDidUpdate() {
    this.showNotification();
  }

  componentWillUnmount() {
    if (this.closeTimeout) {
      window.clearTimeout(this.closeTimeout);
    }

    if (this.notification) {
      this.notification.close();
    }
  }

  showNotification() {
    Notification.requestPermission().then(permission => {
      if (permission === 'granted') {
        const {
          title,
          tag,
          body,
          icon,
          timeout,
          onClick
        } = this.props;
        this.notification = new Notification(title, {
          tag,
          body,
          icon
        });

        if (onClick) {
          this.notification.addEventListener('click', onClick);
        }

        if (timeout) {
          this.closeTimeout = window.setTimeout(() => {
            this.closeTimeout = 0;

            if (this.notification) {
              this.notification.close();
              this.notification = null;
            }
          }, timeout);
        }
      }
      /* istanbul ignore next */


      if ("production" !== process.env.NODE_ENV && permission !== 'granted') {
        // eslint-disable-next-line no-console
        console.warn('Attempted to show a notification, but was denied permission.');
      }
    });
  }

  render() {
    return null;
  }

}

exports.default = BrowserNotification;

_defineProperty(BrowserNotification, "propTypes", {
  title: _propTypes.default.string.isRequired,
  tag: _propTypes.default.string,
  body: _propTypes.default.string,
  icon: _propTypes.default.string,
  timeout: _propTypes.default.number,
  onClick: _propTypes.default.func
});

_defineProperty(BrowserNotification, "defaultProps", {
  onClick: null,
  timeout: null
});