"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** An abstract component for displaing menus and overlays over content. */
class Dropdown extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "ref", _react.default.createRef());

    _defineProperty(this, "handleClick", event => {
      const {
        current
      } = this.ref;

      if (current && current.contains(event.target)) {
        if (this.props.onClickInside) {
          this.props.onClickInside(event);
        }

        return;
      }

      if (this.props.onClickOutside) {
        this.props.onClickOutside(event);
      }
    });
  }

  componentDidMount() {
    if (this.props.visible) {
      document.addEventListener('click', this.handleClick, true);
    }
  }

  componentDidUpdate(prevProps) {
    if (prevProps.visible !== this.props.visible) {
      if (this.props.visible) {
        document.addEventListener('click', this.handleClick, true);
      } else {
        document.removeEventListener('click', this.handleClick, true);
      }
    }
  }

  componentWillUnmount() {
    document.removeEventListener('click', this.handleClick, true);
  }

  render() {
    const _this$props = this.props,
          {
      cx,
      children,
      fixed,
      onBlur,
      onFocus,
      tabIndex,
      zIndex
    } = _this$props,
          props = _objectWithoutPropertiesLoose(_this$props, ["cx", "children", "fixed", "onBlur", "onFocus", "tabIndex", "zIndex", "visible", "onClickOutside", "styles"]);

    const style = _extends({
      position: fixed ? 'fixed' : 'absolute',
      zIndex: zIndex || 'auto'
    }, props); // Set top by default if neither are defined


    if (!('bottom' in props) && !('top' in props)) {
      style.top = '100%';
    } // Set left by default if neither are defined


    if (!('left' in props) && !('right' in props)) {
      style.left = 0;
    }

    return _react.default.createElement("div", {
      ref: this.ref,
      className: cx(style),
      tabIndex: tabIndex,
      onBlur: onBlur,
      onFocus: onFocus
    }, children);
  }

}

_defineProperty(Dropdown, "propTypes", {
  bottom: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  children: _propTypes.default.any.isRequired,
  fixed: _propTypes.default.bool,
  left: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  onBlur: _propTypes.default.func,
  onClickInside: _propTypes.default.func,
  onClickOutside: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  right: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  tabIndex: _propTypes.default.number,
  top: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  visible: _propTypes.default.bool,
  zIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.oneOf(['auto'])])
});

_defineProperty(Dropdown, "defaultProps", {
  fixed: false,
  visible: false
});

var _default = (0, _withStyles.default)(() => ({}))(Dropdown);

exports.default = _default;