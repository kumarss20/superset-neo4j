"use strict";

exports.__esModule = true;
exports.default = NotchedBox;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

var _styles = require("./styles");

exports.NOTCH_SIZE = _styles.NOTCH_SIZE;
exports.NOTCH_SPACING = _styles.NOTCH_SPACING;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** A container with a configurable arrow pointing outward. */
function NotchedBox(_ref) {
  let {
    inverted,
    children,
    inline,
    notchBelow,
    notchOffset
  } = _ref;
  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheet);
  return _react.default.createElement("div", {
    className: cx(styles.box, !inverted && styles.border, inline && styles.box_inline)
  }, _react.default.createElement("div", {
    className: cx(styles.notch, notchOffset ? (0, _styles.createPosition)(notchOffset) : styles.notch_position, notchBelow && styles.notch_below, inverted ? styles.inverted : styles.border)
  }), _react.default.createElement("div", {
    className: cx(styles.content, inverted && styles.inverted)
  }, children));
}

NotchedBox.propTypes = {
  children: _propTypes.default.any.isRequired,
  inline: _propTypes.default.bool,
  inverted: _propTypes.default.bool,
  notchBelow: _propTypes.default.bool,
  notchOffset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
};