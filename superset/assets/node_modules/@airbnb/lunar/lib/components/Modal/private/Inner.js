"use strict";

exports.__esModule = true;
exports.default = exports.ModalInner = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../../composers/withStyles"));

var _FocusTrap = _interopRequireDefault(require("../../FocusTrap"));

var _focusFirstFocusableChild = _interopRequireDefault(require("../../../utils/focus/focusFirstFocusableChild"));

var _ImageLayout = _interopRequireDefault(require("./ImageLayout"));

var _InnerContent = _interopRequireDefault(require("./InnerContent"));

var _styles = require("../styles");

exports.MODAL_MAX_WIDTH_SMALL = _styles.MODAL_MAX_WIDTH_SMALL;
exports.MODAL_MAX_WIDTH_MEDIUM = _styles.MODAL_MAX_WIDTH_MEDIUM;
exports.MODAL_MAX_WIDTH_LARGE = _styles.MODAL_MAX_WIDTH_LARGE;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A Dialog component with a backdrop and a standardized layout. */
class ModalInner extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "dialogRef", _react.default.createRef());

    _defineProperty(this, "lastActiveElement", null);

    _defineProperty(this, "openTimeout", void 0);

    _defineProperty(this, "handleClickOutside", event => {
      const {
        current
      } = this.dialogRef;

      if (current && current.contains(event.target)) {
        return;
      }

      this.handleClose(event);
    });

    _defineProperty(this, "handleOpen", () => {
      this.lastActiveElement = document.activeElement; // Putting this in a setTimeout helps screen readers notice that focus has changed.

      this.openTimeout = window.setTimeout(() => {
        const {
          current: dialogRefElement
        } = this.dialogRef;

        if (dialogRefElement) {
          (0, _focusFirstFocusableChild.default)(dialogRefElement);
        }
      }, 0);
    });

    _defineProperty(this, "handleClose", event => {
      const {
        onClose
      } = this.props;
      onClose(event);
    });
  }

  componentDidMount() {
    this.handleOpen();
    document.addEventListener('click', this.handleClickOutside, true);
  }

  componentWillUnmount() {
    document.removeEventListener('click', this.handleClickOutside, true);

    if (this.openTimeout) {
      window.clearTimeout(this.openTimeout);
    }

    if (this.lastActiveElement) {
      this.lastActiveElement.focus();
    }
  }

  render() {
    const {
      cx,
      children,
      footer,
      image,
      large,
      small,
      fluid,
      scrollable,
      styles,
      subtitle,
      title
    } = this.props;
    const showLargeContent = large || !!image;

    const innerContent = _react.default.createElement(_InnerContent.default, {
      footer: footer,
      large: showLargeContent,
      small: small,
      scrollable: scrollable,
      subtitle: subtitle,
      title: title,
      onClose: this.handleClose
    }, children);

    return _react.default.createElement("div", {
      ref: this.dialogRef,
      "aria-modal": true,
      role: "dialog",
      className: cx(styles.content, small && styles.content_small, showLargeContent && styles.content_large, fluid && styles.content_fluid)
    }, _react.default.createElement(_FocusTrap.default, null, image ? _react.default.createElement(_ImageLayout.default, image, innerContent) : innerContent));
  }

}

exports.ModalInner = ModalInner;

_defineProperty(ModalInner, "propTypes", {
  image: _propTypes.default.any,
  fluid: _propTypes.default.bool
});

var _default = (0, _withStyles.default)(_styles.styleSheetInner)(ModalInner);

exports.default = _default;