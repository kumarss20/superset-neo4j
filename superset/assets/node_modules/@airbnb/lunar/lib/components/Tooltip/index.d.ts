import React from 'react';
import { WithStylesProps } from '../../composers/withStyles';
export declare type Props = {
    /** Width of the tooltip in units. */
    width?: number;
    /** What to show in the tooltip. */
    content: NonNullable<React.ReactNode>;
    /** Inline content to hover. */
    children: NonNullable<React.ReactNode>;
    /** True to disable tooltip but still show children. */
    disabled?: boolean;
    /** True to use a light background with dark text. */
    inverted?: boolean;
    /** True to prevent dismissmal on mouse down. */
    remainOnMouseDown?: boolean;
    /** True to add a dotted bottom border. */
    underlined?: boolean;
    /** Callback fired when the tooltip is shown. */
    onShow?: () => void;
};
export declare type State = {
    labelID: string;
    open: boolean;
    tooltipHeight: number;
    targetRect: ClientRect;
};
export declare type PositionStruct = {
    above: boolean;
    align: 'left' | 'center' | 'right';
};
export declare type StyleStruct = {
    center: string | number;
    right: string | number;
};
/** A tooltip that renders in an portal, so it can escape potentially overflowed containers. */
export declare class Tooltip extends React.Component<Props & WithStylesProps, State> {
    static defaultProps: {
        disabled: boolean;
        inverted: boolean;
        onShow(): void;
        remainOnMouseDown: boolean;
        underlined: boolean;
        width: number;
    };
    state: {
        labelID: string;
        open: boolean;
        tooltipHeight: number;
        targetRect: ClientRect;
    };
    containerRef: React.RefObject<HTMLSpanElement>;
    currentTooltipRef: HTMLDivElement | null;
    rafHandle?: number;
    static getDerivedStateFromProps({ disabled }: Props): {
        open: boolean;
    } | null;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props): void;
    componentWillUnmount(): void;
    updateTooltipHeight(): void;
    bestPosition(rect: State['targetRect']): PositionStruct;
    private handleTooltipRef;
    private handleEnter;
    private handleMouseDown;
    private handleClose;
    render(): JSX.Element;
}
declare const _default: import("aesthetic-react").StyledComponent<import("../../types").Theme, Props & import("aesthetic-react").WithStylesWrapperProps>;
export default _default;
//# sourceMappingURL=index.d.ts.map