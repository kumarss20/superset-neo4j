"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _v = _interopRequireDefault(require("uuid/v4"));

var _FormField = _interopRequireWildcard(require("../FormField"));

var _DateTime = _interopRequireDefault(require("../DateTime"));

var _createDateTime = _interopRequireDefault(require("../../utils/createDateTime"));

var _messages = require("../../messages");

var _Input = _interopRequireDefault(require("./Input"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A controlled input field that opens a date picker. */
class DatePickerInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      id: (0, _v.default)()
    });

    _defineProperty(this, "handleChange", event => {
      const {
        value
      } = event.currentTarget;
      const date = this.parseDate(value);
      this.props.onChange(value, date || null, event);
    });

    _defineProperty(this, "handleDayChange", day => {
      // Day is undefined when the user is typing into the field
      // manually. We want to avoid overriding `onChange`.
      if (!day) {
        return;
      } // Update the parent form with the selected value.
      // We also don't have a real event object, so fake it.


      this.props.onChange(this.formatDate(day), day, // @ts-ignore
      {});
    });

    _defineProperty(this, "parseDate", (value, format, locale) => {
      try {
        return (0, _createDateTime.default)(value, {
          sourceFormat: format || this.getFormat(),
          locale: locale || this.props.locale
        }).toJSDate();
      } catch (error) {
        return undefined;
      }
    });

    _defineProperty(this, "formatDate", (date, baseFormat, locale) => {
      const format = baseFormat || this.getFormat();
      return _DateTime.default.format({
        at: date,
        format,
        sourceFormat: format,
        locale: locale || this.props.locale,
        noTime: true,
        noTimezone: true
      });
    });
  }

  getFormat() {
    return this.props.format || _messages.mdyCalendarBundle.get(this.props.locale);
  }

  render() {
    const {
      fieldProps,
      inputProps
    } = (0, _FormField.partitionFieldProps)(this.props);

    const {
      clearOnDayClick,
      datePickerProps,
      dropdownProps,
      hideOnDayClick,
      locale,
      onHidePicker
    } = inputProps,
          restProps = _objectWithoutPropertiesLoose(inputProps, ["clearOnDayClick", "datePickerProps", "dropdownProps", "hideOnDayClick", "locale", "onHidePicker"]);

    const {
      id
    } = this.state;
    const format = this.getFormat();

    const pickerProps = _extends({}, datePickerProps, {
      locale
    });

    return _react.default.createElement(_FormField.default, _extends({}, fieldProps, {
      id: id
    }), _react.default.createElement(_Input.default, {
      keepFocus: true,
      value: restProps.value,
      dayPickerProps: pickerProps,
      dropdownProps: dropdownProps,
      inputProps: _extends({}, restProps, {
        id,
        onChange: this.handleChange
      }),
      format: format,
      clickUnselectsDay: clearOnDayClick,
      hideOnDayClick: hideOnDayClick,
      placeholder: restProps.placeholder || format.toUpperCase(),
      parseDate: this.parseDate,
      formatDate: this.formatDate,
      onDayPickerHide: onHidePicker,
      onDayChange: this.handleDayChange
    }));
  }

}

exports.default = DatePickerInput;

_defineProperty(DatePickerInput, "propTypes", {
  datePickerProps: _propTypes.default.any,
  dropdownProps: _propTypes.default.any,
  format: _propTypes.default.string,
  locale: _propTypes.default.any,
  onChange: _propTypes.default.func.isRequired,
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(Date)])
});

_defineProperty(DatePickerInput, "defaultProps", {
  hideOnDayClick: false
});