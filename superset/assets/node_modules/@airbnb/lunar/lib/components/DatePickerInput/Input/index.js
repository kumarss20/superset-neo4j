"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDayPicker = require("react-day-picker");

var _DayPickerInput = _interopRequireDefault(require("react-day-picker/DayPickerInput"));

var _FormInput = _interopRequireDefault(require("../../private/FormInput"));

var _Dropdown = _interopRequireDefault(require("../../Dropdown"));

var _DatePicker = _interopRequireDefault(require("../../DatePicker"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// The original `DayPickerInput` has very restrictive and problematic
// markup being rendered, that doesn't interop with our form layer very well.
// Since we can't hook into it using render props, we need to extend
// the component and override the render methods.
class PrivatePickerInput extends _DayPickerInput.default {
  constructor() {
    super(...arguments);

    _defineProperty(this, "props", void 0);

    _defineProperty(this, "daypicker", null);

    _defineProperty(this, "input", null);

    _defineProperty(this, "loadInputRef", ref => {
      // @ts-ignore Ignore typings
      const {
        propagateRef
      } = this.props.inputProps;
      this.input = ref;

      if (propagateRef) {
        propagateRef.current = ref;
      }
    });

    _defineProperty(this, "loadPickerRef", ref => {
      this.daypicker = ref;
    });

    _defineProperty(this, "handleResetClick", () => {
      // @ts-ignore Ignore typings
      this.updateState(new Date(), '', this.hideAfterDayClick);
    });

    _defineProperty(this, "handleTodayButtonClick", () => {
      // @ts-ignore Ignore typings
      this.updateState(new Date(), this.props.formatDate(new Date()), this.hideAfterDayClick);
    });

    _defineProperty(this, "renderOverlay", () => {
      const {
        dayPickerProps = {},
        dropdownProps = {}
      } = this.props;
      const {
        selectedDays,
        value
      } = this.state;
      let selectedDay;

      if (!selectedDays && value) {
        // @ts-ignore Ignore typings
        const day = this.props.parseDate(value);

        if (day) {
          selectedDay = day;
        }
      } else if (selectedDays) {
        selectedDay = selectedDays;
      }

      return _react.default.createElement(_Dropdown.default, _extends({
        top: "100%",
        tabIndex: 0,
        zIndex: 100
      }, dropdownProps, {
        onFocus: this.handleOverlayFocus,
        onBlur: this.handleOverlayBlur
      }), _react.default.createElement(_DatePicker.default, _extends({}, dayPickerProps, {
        month: this.state.month,
        selectedDays: selectedDay,
        pickerRef: this.loadPickerRef,
        onDayClick: this.handleDayClick,
        onMonthChange: this.handleMonthChange,
        onResetClick: this.handleResetClick,
        onTodayButtonClick: this.handleTodayButtonClick
      })));
    });
  }

  render() {
    const {
      inputProps
    } = this.props;
    return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_FormInput.default, _extends({
      type: "text",
      tagName: "input",
      placeholder: this.props.placeholder
    }, inputProps, {
      value: this.state.typedValue || this.state.value,
      propagateRef: this.loadInputRef,
      onChange: this.handleInputChange,
      onFocus: this.handleInputFocus,
      onBlur: this.handleInputBlur,
      onKeyDown: this.handleInputKeyDown,
      onKeyUp: this.handleInputKeyUp,
      onClick: this.handleInputClick
    })), this.state.showOverlay && this.renderOverlay());
  }

}

exports.default = PrivatePickerInput;