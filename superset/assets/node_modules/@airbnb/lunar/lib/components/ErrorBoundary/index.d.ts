import React from 'react';
import { Logger } from '../../types';
export declare type Props = {
    /** Content to wrap. */
    children: NonNullable<React.ReactNode>;
    /** A unique name to identify this boundary in errors and stack traces. */
    name?: string;
    /** Callback fired when an error is received. */
    onCatch: Logger;
};
export declare type State = {
    error: Error | null;
};
/** Wraps a component and catches errors thrown within its React tree. */
export default class ErrorBoundary extends React.Component<Props, State> {
    static propTypes: {
        name: import("prop-types").Requireable<string>;
    };
    static defaultProps: {
        name: string;
    };
    state: {
        error: null;
    };
    componentDidCatch(error: Error, errorInfo: object): void;
    render(): {};
}
//# sourceMappingURL=index.d.ts.map