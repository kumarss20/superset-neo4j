"use strict";

exports.__esModule = true;
exports.default = Interweave;
exports.emojiMatcherWithEmoticons = exports.emojiMatcher = exports.emailMatcher = exports.urlMatcher = exports.globalFilters = exports.globalMatchers = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _interweave = _interopRequireDefault(require("interweave"));

var _interweaveAutolink = require("interweave-autolink");

var _interweaveEmoji = require("interweave-emoji");

var _ = _interopRequireDefault(require("../.."));

var _Email = _interopRequireDefault(require("./factories/Email"));

var _Url = _interopRequireDefault(require("./factories/Url"));

var _transformer = _interopRequireDefault(require("./factories/transformer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const globalMatchers = [];
exports.globalMatchers = globalMatchers;
const globalFilters = [];
exports.globalFilters = globalFilters;
const emojiOptions = {
  convertEmoticon: false,
  convertShortcode: true,
  convertUnicode: true,
  enlargeThreshold: 3
};
const urlMatcher = new _interweaveAutolink.UrlMatcher('url', {
  customTLDs: ['tools']
}, _Url.default);
exports.urlMatcher = urlMatcher;
const emailMatcher = new _interweaveAutolink.EmailMatcher('email', {}, _Email.default);
exports.emailMatcher = emailMatcher;
const emojiMatcher = new _interweaveEmoji.EmojiMatcher('emoji', emojiOptions);
exports.emojiMatcher = emojiMatcher;
const emojiMatcherWithEmoticons = new _interweaveEmoji.EmojiMatcher('emoji', _extends({}, emojiOptions, {
  convertEmoticon: true
}));
exports.emojiMatcherWithEmoticons = emojiMatcherWithEmoticons;

/**
 * Safely render HTML, filter attributes, autowrap text with matchers, render emoji characters,
 * and much more.
 */
function Interweave(_ref) {
  let {
    content,
    filters = [],
    matchers = [],
    onlyMatchers = [],
    withEmoticons
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["content", "filters", "matchers", "onlyMatchers", "withEmoticons"]);

  const [, emojiSource] = (0, _interweaveEmoji.useEmojiData)({
    avoidFetch: process.env.NODE_ENV === 'test',
    throwErrors: false
  });
  const finalFilters = [...globalFilters, ...filters];
  let finalMatchers = [...globalMatchers, emailMatcher, urlMatcher, withEmoticons ? emojiMatcherWithEmoticons : emojiMatcher, ...matchers];

  if (onlyMatchers.length > 0) {
    finalMatchers = finalMatchers.filter(matcher => onlyMatchers.includes(matcher.propName));
  }

  return _react.default.createElement(_interweave.default, _extends({
    newWindow: true,
    content: content,
    emojiSize: "1.25em",
    filters: finalFilters,
    matchers: finalMatchers,
    transform: _transformer.default
  }, props, {
    emojiPath: _.default.settings.emojiCDN,
    emojiSource: emojiSource
  }));
}

Interweave.propTypes = {
  large: _propTypes.default.bool,
  onlyMatchers: _propTypes.default.arrayOf(_propTypes.default.string),
  small: _propTypes.default.bool,
  withEmoticons: _propTypes.default.bool
};