"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _IconCaretLeft = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconCaretLeft"));

var _IconCaretRight = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconCaretRight"));

var _iconComponent = _interopRequireDefault(require("../../prop-types/iconComponent"));

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

var _ButtonOrLink = _interopRequireDefault(require("../private/ButtonOrLink"));

var _Text = _interopRequireDefault(require("../Text"));

var _DirectionalIcon = _interopRequireDefault(require("../DirectionalIcon"));

var _styles = require("./styles");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** An interactive item within a menu. */
function MenuItem(_ref) {
  let {
    children,
    disabled,
    highlighted,
    href = '',
    icon,
    id,
    onClick,
    openInNewWindow,
    role = 'menuitem',
    spacious,
    submenu,
    tabIndex = -1,
    tip,
    trackingName
  } = _ref;
  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheetItem);
  const [showSubmenu, setShowSubmenu] = (0, _react.useState)(false);

  const handleMouseEnter = () => {
    if (submenu) {
      setShowSubmenu(true);
    }
  };

  const handleMouseLeave = () => {
    if (submenu) {
      setShowSubmenu(false);
    }
  };

  const after = submenu ? _react.default.createElement(_DirectionalIcon.default, {
    decorative: true,
    direction: "right",
    left: _IconCaretLeft.default,
    right: _IconCaretRight.default,
    size: "1.5em"
  }) : tip;
  return _react.default.createElement("li", {
    role: "none",
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, _react.default.createElement(_ButtonOrLink.default, {
    className: cx(styles.item, (showSubmenu || highlighted) && styles.item_highlighted, disabled && styles.item_disabled, spacious && styles.item_spacious),
    afterIcon: after ? _react.default.createElement(_Text.default, {
      muted: true,
      small: true
    }, after) : null,
    "aria-expanded": showSubmenu,
    "aria-haspopup": !!submenu,
    beforeIcon: icon,
    disabled: disabled,
    href: href,
    id: id,
    openInNewWindow: openInNewWindow,
    role: role,
    tabIndex: tabIndex,
    trackingName: trackingName,
    onClick: onClick
  }, children), showSubmenu && _react.default.createElement("div", {
    className: cx(styles.submenu)
  }, submenu));
}

MenuItem.propTypes = {
  trackingName: _propTypes.default.string,
  tip: _propTypes.default.node,
  tabIndex: _propTypes.default.number,
  submenu: _propTypes.default.node,
  spacious: _propTypes.default.bool,
  role: _propTypes.default.string,
  openInNewWindow: _propTypes.default.bool,
  onClick: _propTypes.default.func,
  id: _propTypes.default.string,
  href: _propTypes.default.string,
  highlighted: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  children: _propTypes.default.any.isRequired,
  icon: _iconComponent.default
};
var _default = MenuItem;
exports.default = _default;