import React from 'react';
import PropTypes from 'prop-types';
import { ButtonOrLinkTypes } from '../private/ButtonOrLink';
export declare type Props = {
    /** Renders with a primary background and white text. */
    active?: boolean;
    /** Icon to render to the right of the primary content. */
    afterIcon?: React.ReactNode;
    /** Icon to render to the left of the primary content. */
    beforeIcon?: React.ReactNode;
    /** Primary chip contents. */
    children: NonNullable<React.ReactNode>;
    /** Renders with less padding and sharper corners. */
    compact?: boolean;
    /** Disabled / gray. */
    disabled?: boolean;
    /** Pass an HTML element attribute id. */
    id?: string;
    /** Callback fired when the element is clicked. */
    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
    /** Callback fired when the icon is clicked (requires an icon). */
    onIconClick?: (event: React.MouseEvent<ButtonOrLinkTypes>) => void;
    /** Profile photo to render to the left of the primary content. */
    profileImageSrc?: string;
    /** A tracking name to identify this component when element is clicked. */
    trackingName?: string;
};
/** Compact component that represents a snippet of information, such as a filter. */
declare function Chip({ active, afterIcon, beforeIcon, children, compact, disabled, id, onClick, onIconClick, profileImageSrc, trackingName, }: Props): JSX.Element;
declare namespace Chip {
    var propTypes: {
        afterIcon: PropTypes.Requireable<React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | null | undefined>;
        beforeIcon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        compact: PropTypes.Requireable<any>;
        profileImageSrc: PropTypes.Requireable<any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
    };
}
export default Chip;
//# sourceMappingURL=index.d.ts.map