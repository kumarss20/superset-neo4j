"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _iconComponent = _interopRequireDefault(require("../../prop-types/iconComponent"));

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

var _ButtonOrLink = _interopRequireDefault(require("../private/ButtonOrLink"));

var _Tooltip = _interopRequireDefault(require("../Tooltip"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/** A button with an icon as content, and an optional tooltip. */
function IconButton(_ref) {
  let {
    children,
    active,
    disabled,
    inverted,
    tooltip
  } = _ref,
      restProps = _objectWithoutPropertiesLoose(_ref, ["children", "active", "disabled", "inverted", "tooltip"]);

  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheet);

  const button = _react.default.createElement(_ButtonOrLink.default, _extends({}, restProps, {
    disabled: disabled,
    className: cx(styles.button, active && styles.button_active, inverted && styles.button_inverted, disabled && styles.button_disabled)
  }), children);

  return tooltip ? _react.default.createElement(_Tooltip.default, {
    content: tooltip,
    disabled: disabled
  }, button) : button;
}

IconButton.propTypes = {
  tooltip: _propTypes.default.node,
  inverted: _propTypes.default.bool,
  active: _propTypes.default.bool,
  beforeIcon: _propTypes.default.node,
  afterIcon: _propTypes.default.node,
  children: _iconComponent.default.isRequired
};
var _default = IconButton;
exports.default = _default;