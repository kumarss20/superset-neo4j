"use strict";

exports.__esModule = true;
exports.default = Breadcrumb;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _IconChevronLeft = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconChevronLeft"));

var _IconChevronRight = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconChevronRight"));

var _useStyles = _interopRequireDefault(require("../../hooks/useStyles"));

var _ButtonOrLink = _interopRequireDefault(require("../private/ButtonOrLink"));

var _DirectionalIcon = _interopRequireDefault(require("../DirectionalIcon"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/** A single breadcrumb button. Usually rendered amongst a collection of breadcrumbs. */
function Breadcrumb(_ref) {
  let {
    disabled,
    hideIcon,
    highlighted,
    href,
    id,
    label,
    onClick,
    selected,
    trackingName
  } = _ref;
  const [styles, cx] = (0, _useStyles.default)(_styles.styleSheetBreadcrumb);
  const clickable = !disabled && (!!href || !!onClick);
  const aria = selected ? {
    'aria-current': 'page'
  } : {};

  const handleClick = () => {
    if (onClick) {
      onClick();
    }
  };

  return _react.default.createElement("li", {
    className: cx(styles.li)
  }, _react.default.createElement(_ButtonOrLink.default, _extends({}, aria, {
    className: cx(styles.breadcrumb, clickable && styles.breadcrumb_clickable, highlighted && styles.breadcrumb_highlighted, clickable && highlighted && styles.breadcrumb_highlighted_clickable, selected && styles.breadcrumb_selected, disabled && styles.breadcrumb_disabled),
    afterIcon: hideIcon ? null : _react.default.createElement(_DirectionalIcon.default, {
      decorative: true,
      direction: "right",
      left: _IconChevronLeft.default,
      right: _IconChevronRight.default,
      size: 24
    }),
    disabled: disabled,
    href: href,
    trackingName: trackingName,
    id: id,
    onClick: handleClick
  }), label));
}

Breadcrumb.propTypes = {
  disabled: _propTypes.default.bool,
  hideIcon: _propTypes.default.bool,
  highlighted: _propTypes.default.bool,
  href: _propTypes.default.string,
  id: _propTypes.default.string,
  label: _propTypes.default.string.isRequired,
  onClick: _propTypes.default.func,
  selected: _propTypes.default.bool,
  trackingName: _propTypes.default.string
};