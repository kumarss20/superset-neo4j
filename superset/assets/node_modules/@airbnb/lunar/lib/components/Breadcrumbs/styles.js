"use strict";

exports.__esModule = true;
exports.styleSheetBreadcrumb = exports.styleSheetBreadcrumbs = void 0;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const styleSheetBreadcrumbs = {};
exports.styleSheetBreadcrumbs = styleSheetBreadcrumbs;

const styleSheetBreadcrumb = (_ref) => {
  let {
    color,
    font,
    pattern,
    transition,
    unit
  } = _ref;
  return {
    breadcrumb: _extends({}, pattern.resetButton, {}, font.textRegular, {}, transition.box, {
      color: color.core.neutral[5],
      cursor: 'default',
      outline: 'none'
    }),
    breadcrumb_clickable: {
      cursor: 'pointer',
      '@selectors': {
        ':not([disabled]):hover, :not([disabled]):focus': {
          color: color.core.neutral[4]
        }
      }
    },
    breadcrumb_disabled: _extends({}, pattern.disabled),
    breadcrumb_highlighted: {
      color: color.core.primary[3]
    },
    breadcrumb_highlighted_clickable: {
      '@selectors': {
        ':not([disabled]):hover, :not([disabled]):focus': {
          color: color.core.primary[4]
        }
      }
    },
    breadcrumb_selected: {
      fontWeight: font.weights.semibold
    },
    li: {
      marginRight: unit,
      ':last-child': {
        marginRight: 0
      }
    }
  };
};

exports.styleSheetBreadcrumb = styleSheetBreadcrumb;