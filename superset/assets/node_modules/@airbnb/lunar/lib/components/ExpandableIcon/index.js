"use strict";

exports.__esModule = true;
exports.default = ExpandableIcon;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _aestheticReact = require("aesthetic-react");

var _IconChevronLeft = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconChevronLeft"));

var _IconChevronRight = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconChevronRight"));

var _IconChevronDown = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconChevronDown"));

var _DirectionalIcon = _interopRequireDefault(require("../DirectionalIcon"));

var _ = _interopRequireDefault(require("../.."));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ExpandableIcon(_ref) {
  let {
    expanded,
    size
  } = _ref;
  const context = (0, _react.useContext)(_aestheticReact.DirectionContext);
  return expanded ? _react.default.createElement(_IconChevronDown.default, {
    decorative: true,
    size: size
  }) : _react.default.createElement(_DirectionalIcon.default, {
    decorative: true,
    direction: _.default.isRTL(context) ? 'left' : 'right',
    left: _IconChevronLeft.default,
    right: _IconChevronRight.default,
    size: size
  });
}

ExpandableIcon.propTypes = {
  expanded: _propTypes.default.bool.isRequired,
  size: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};