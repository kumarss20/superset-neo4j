"use strict";

exports.__esModule = true;
exports.default = exports.Header = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Button = _interopRequireDefault(require("../Button"));

var _Pagination = _interopRequireDefault(require("../Pagination"));

var _Translate = _interopRequireDefault(require("../Translate"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _keys = require("../../keys");

var _ImageViewer = require("../ImageViewer");

var _Spacing = _interopRequireDefault(require("../Spacing"));

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Header extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleNext", () => {
      const {
        activeIndex,
        onChangeSlide
      } = this.props;
      onChangeSlide(activeIndex + 1);
    });

    _defineProperty(this, "handlePrev", () => {
      const {
        activeIndex,
        onChangeSlide
      } = this.props;
      onChangeSlide(activeIndex - 1);
    });

    _defineProperty(this, "handleFirst", () => {
      const {
        onChangeSlide
      } = this.props;
      onChangeSlide(0);
    });

    _defineProperty(this, "handleLast", () => {
      const {
        imageCount,
        onChangeSlide
      } = this.props;
      onChangeSlide(imageCount - 1);
    });

    _defineProperty(this, "handleZoom", scale => {
      if (this.props.onZoomImage) {
        this.props.onZoomImage(scale);
      }
    });

    _defineProperty(this, "handleRotate", rotation => {
      if (this.props.onRotateImage) {
        this.props.onRotateImage(rotation);
      }
    });

    _defineProperty(this, "handleKeyDown", event => {
      const {
        activeIndex,
        imageCount
      } = this.props;

      if (event.key === _keys.ARROW_LEFT && activeIndex > 0) {
        if (event.shiftKey) {
          this.handleFirst();
        } else {
          this.handlePrev();
        }
      }

      if (event.key === _keys.ARROW_RIGHT && activeIndex < imageCount - 1) {
        if (event.shiftKey) {
          this.handleLast();
        } else {
          this.handleNext();
        }
      }
    });
  }

  componentDidMount() {
    window.addEventListener('keydown', this.handleKeyDown);
  }

  componentWillUnmount() {
    window.removeEventListener('keydown', this.handleKeyDown);
  }

  render() {
    const {
      cx,
      activeIndex,
      hasAside,
      imageCount,
      hideAside,
      styles,
      showZoomControls,
      showRotateControls,
      scale,
      rotation
    } = this.props;
    return _react.default.createElement("div", {
      className: cx(styles.header)
    }, _react.default.createElement("div", {
      className: cx(styles.pagination)
    }, _react.default.createElement(_Pagination.default, {
      centerAlign: true,
      showBookends: true,
      hasPrev: activeIndex > 0,
      hasNext: activeIndex < imageCount - 1,
      page: activeIndex + 1,
      pageLabel: _Translate.default.phrase('Photo', {}, 'Label for photo pagination'),
      pageCount: imageCount,
      onNext: this.handleNext,
      onPrevious: this.handlePrev,
      onFirst: this.handleFirst,
      onLast: this.handleLast
    })), showRotateControls && _react.default.createElement(_Spacing.default, {
      right: 2
    }, _react.default.createElement(_ImageViewer.RotateControls, {
      rotation: rotation,
      onRotation: this.handleRotate
    })), showZoomControls && _react.default.createElement(_Spacing.default, {
      right: 2
    }, _react.default.createElement(_ImageViewer.ZoomControls, {
      scale: scale,
      onScale: this.handleZoom
    })), hasAside && _react.default.createElement("div", {
      className: cx(styles.infoButton)
    }, _react.default.createElement(_Button.default, {
      small: true,
      onClick: this.props.onToggleAside
    }, hideAside ? _Translate.default.phrase('Show Info', {}, 'Shows sidebar information in the Lightbox') : _Translate.default.phrase('Hide Info', {}, 'Hides sidebar information in the Lightbox'))));
  }

}

exports.Header = Header;

_defineProperty(Header, "propTypes", {
  activeIndex: _propTypes.default.number.isRequired,
  imageCount: _propTypes.default.number.isRequired,
  hasAside: _propTypes.default.bool,
  hideAside: _propTypes.default.bool,
  rotation: _propTypes.default.number,
  scale: _propTypes.default.number,
  showRotateControls: _propTypes.default.bool,
  showZoomControls: _propTypes.default.bool,
  onChangeSlide: _propTypes.default.func.isRequired,
  onRotateImage: _propTypes.default.func,
  onToggleAside: _propTypes.default.func.isRequired,
  onZoomImage: _propTypes.default.func
});

var _default = (0, _withStyles.default)(_styles.styleSheetHeader)(Header);

exports.default = _default;