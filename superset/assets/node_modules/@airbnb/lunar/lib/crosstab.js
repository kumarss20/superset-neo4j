"use strict";

exports.__esModule = true;
exports.default = exports.Crosstab = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Anything can be emitted. Really, anything.

/* eslint-disable @typescript-eslint/no-explicit-any */
class Crosstab {
  constructor() {
    _defineProperty(this, "channel", void 0);

    _defineProperty(this, "handlers", void 0);

    _defineProperty(this, "handleMessage", (_ref) => {
      let {
        data
      } = _ref;
      const handlersForKey = this.handlers.get(data.key);

      if (handlersForKey) {
        handlersForKey.forEach(handler => {
          handler(data.value);
        });
      }
    });

    this.channel = new BroadcastChannel('crosstab');
    this.channel.addEventListener('message', this.handleMessage);
    this.handlers = new Map();
  }

  on(key, handler) {
    const set = this.handlers.get(key) || new Set();
    set.add(handler);
    this.handlers.set(key, set);
  }

  off(key, handler) {
    if (handler) {
      const handlersForKey = this.handlers.get(key);

      if (handlersForKey) {
        handlersForKey.delete(handler);
      }
    } else {
      this.handlers.delete(key);
    }
  }

  emit(key, value, selfEmit) {
    if (selfEmit === void 0) {
      selfEmit = false;
    }

    const message = {
      key,
      value
    };
    this.channel.postMessage(message);

    if (selfEmit) {
      this.handleMessage({
        data: message
      });
    }
  }

}

exports.Crosstab = Crosstab;

var _default = new Crosstab();

exports.default = _default;