"use strict";

exports.__esModule = true;
exports.getCustomModifiers = getCustomModifiers;
exports.getClassNames = getClassNames;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function getCustomModifiers(modifiers, styles, cx) {
  const customModifiers = modifiers || {};

  if (customModifiers.start && customModifiers.end) {
    if (String(customModifiers.start) !== String(customModifiers.end)) {
      customModifiers[cx(styles.modifier_start, styles.modifier_startWithRange)] = customModifiers.start;
      customModifiers[cx(styles.modifier_end)] = customModifiers.end;
    }
  } else if (customModifiers.start && !customModifiers.end) {
    customModifiers[cx(styles.modifier_start)] = customModifiers.start;
  }

  return customModifiers;
}

function getClassNames(type, styles, props) {
  const {
    cx,
    showResetButton,
    todayButton
  } = props;
  const baseClassNames = {
    interactionDisabled: cx(styles.interactionDisabled),
    wrapper: cx(styles.wrapper),
    months: cx(styles.months, showResetButton && !todayButton && styles.months_withResetButton),
    month: cx(styles.month),
    navBar: cx(styles.navBar),
    navButtonPrev: cx(styles.navButtonPrev),
    navButtonNext: cx(styles.navButtonNext),
    navButtonInteractionDisabled: cx(styles.navButtonInteractionDisabled),
    caption: cx(styles.caption),
    weekdays: cx(styles.weekdays),
    weekdaysRow: cx(styles.weekdaysRow),
    weekday: cx(styles.weekday),
    body: cx(styles.body),
    week: cx(styles.week),
    day: cx(styles.day),
    footer: cx(styles.footer, showResetButton && styles.footer_withResetButton),
    todayButton: cx(styles.todayButton, showResetButton && styles.todayButton_withResetButton),
    today: cx(styles.modifier_today),
    selected: cx(styles.modifier_selected),
    disabled: cx(styles.modifier_disabled),
    outside: cx(styles.modifier_outside),
    // No styles yet
    weekNumber: '',
    overlay: '',
    overlayWrapper: '',
    container: ''
  };

  if (type === 'input') {
    return _extends({}, baseClassNames, {
      overlayWrapper: cx(styles.overlayWrapper),
      overlay: cx(styles.overlay),
      container: cx(styles.inputContainer)
    });
  } // type === 'calendar'


  return _extends({}, baseClassNames, {
    container: cx(styles.calendarContainer)
  });
}