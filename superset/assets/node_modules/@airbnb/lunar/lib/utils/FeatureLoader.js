"use strict";

exports.__esModule = true;
exports.default = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class FeatureLoader {
  constructor(fetch) {
    _defineProperty(this, "cache", new Map());

    _defineProperty(this, "fetch", void 0);

    _defineProperty(this, "promises", new Map());

    this.fetch = fetch;
  }

  clear() {
    this.cache.clear();
  }

  getFeature(key) {
    const value = this.cache.get(key);
    return typeof value === 'undefined' ? null : value;
  }

  loadFeature(key, force) {
    if (force === void 0) {
      force = false;
    }

    if (this.cache.has(key) && !force) {
      return Promise.resolve(this.getFeature(key));
    }

    if (this.promises.has(key) && !force) {
      return this.promises.get(key);
    }

    const promise = this.fetch(key, force, this.cache).then(() => {
      this.promises.delete(key);
      return this.getFeature(key);
    });
    this.promises.set(key, promise);
    return promise;
  }

  isCached(key) {
    return this.cache.has(key);
  }

}

exports.default = FeatureLoader;