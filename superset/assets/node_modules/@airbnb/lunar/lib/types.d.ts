import React from 'react';
import { DateTime } from 'luxon';
import { StyleBlock } from 'aesthetic';
export declare type Logger = (error: Error, extra: object) => void;
export declare type Translator = (phrase: string, params?: TranslateParams | null, options?: string | TranslateOptions) => string;
export declare type ErrorType = {
    error_id?: string;
    error_code?: number | string;
    error_message?: string;
    error_details?: string;
    error_url?: string;
    debug_info?: {
        [key: string]: string;
    };
    user_message?: string;
} | Error;
export declare type StatusType = 'notice' | 'info' | 'success' | 'warning' | 'danger' | 'muted';
export declare type BrandType = 'luxury' | 'plus';
export declare type TranslateParams = {
    [param: string]: string | number | undefined;
};
export declare type TranslateOptions = {
    /** Integration context in which to provide writes & editors. */
    context?: string;
    /** Phrase message contains HTML. */
    html?: boolean;
    /** Unique phrase key. */
    key?: string;
};
export declare type TranslateProps = {
    [param: string]: string | number | boolean | undefined | React.ReactNode;
    /** Unique phrase key. */
    k?: string;
    /** Default phrase to translate. */
    phrase: string;
    /** Handle counts using a smart number. */
    smartCount?: number;
} & Omit<TranslateOptions, 'key'>;
export declare type Currency = string;
export declare type Amount = {
    amount: number;
    amount_formatted: string;
    amount_micros: number;
    currency: string;
    is_micros_accuracy: boolean;
};
export declare type PriceType = 'code' | 'name' | 'symbol';
export declare type TimeZone = string;
export declare type DateTimeType = null | string | number | Date | DateTime;
export declare type Locale = 'de' | 'en' | 'es' | 'fr' | 'it' | 'ja' | 'ko' | 'ms' | 'nl' | 'pt' | 'ru' | 'tr' | 'zh';
export declare type LocaleDefinition = {
    locale: string;
    label: string;
    name?: string;
};
export declare type Hexcode = string;
export declare type ColorRange = [Hexcode, Hexcode, Hexcode, Hexcode, Hexcode, Hexcode, Hexcode];
export declare type Theme = {
    color: {
        accent: {
            bg: Hexcode;
            bgHover: Hexcode;
            bgError: Hexcode;
            border: Hexcode;
            borderActive: Hexcode;
            borderHover: Hexcode;
            borderError: Hexcode;
            text: Hexcode;
            textActive: Hexcode;
            textError: Hexcode;
        };
        base: Hexcode;
        brand: {
            luxury: ColorRange;
            plus: ColorRange;
        };
        core: {
            danger: ColorRange;
            neutral: ColorRange;
            primary: ColorRange;
            secondary: ColorRange;
            success: ColorRange;
            warning: ColorRange;
        };
        clear: Hexcode;
        muted: Hexcode;
    };
    font: {
        fontFamily: string;
        title1: StyleBlock;
        title2: StyleBlock;
        title3: StyleBlock;
        textLarge: StyleBlock;
        textRegular: StyleBlock;
        textSmall: StyleBlock;
        textMicro: StyleBlock;
        textReset: StyleBlock;
        weights: {
            thin: number;
            light: number;
            medium: number;
            semibold: number;
            bold: number;
            black: number;
        };
    };
    pattern: {
        box: StyleBlock;
        disabled: StyleBlock;
        focused: StyleBlock;
        invalid: StyleBlock;
        offscreen: StyleBlock;
        resetButton: StyleBlock;
        smallButton: StyleBlock;
        regularButton: StyleBlock;
        largeButton: StyleBlock;
    };
    breakpoints: {
        [name: string]: number;
    };
    responsive: {
        large: string;
        medium: string;
        small: string;
        xsmall: string;
    };
    transition: {
        box: StyleBlock;
        fade: StyleBlock;
    };
    ui: {
        border: string;
        borderThick: string;
        borderRadius: number;
        borderRadiusThick: number;
        borderWidth: number;
        borderWidthThick: number;
        boxShadow: string;
        boxShadowMedium: string;
        boxShadowLarge: string;
        disabledOpacity: number;
        transitionTime: string;
    };
    unit: number;
};
//# sourceMappingURL=types.d.ts.map