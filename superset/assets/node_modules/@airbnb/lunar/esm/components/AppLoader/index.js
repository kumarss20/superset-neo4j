import _pt from "prop-types";
import React from 'react';
import useStyles from '../../hooks/useStyles';
import ErrorMessage from '../ErrorMessage';
import Loader from '../Loader';
import Title from '../Title';
import Text from '../Text';
import { styleSheet } from './styles';

/** A loading indicator, representing the state of a request, for applications and landing pages. */
export default function AppLoader(_ref) {
  let {
    centered,
    children,
    error,
    errorTitle,
    failureText,
    fetched,
    loadingText,
    small,
    subtitle
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);

  if (fetched && !error) {
    return React.createElement("main", null, children);
  }

  return React.createElement("div", {
    className: cx(styles.appLoader, centered && styles.appLoader_centered)
  }, React.createElement(Title, {
    level: small ? 3 : 1
  }, error ? failureText : loadingText), subtitle && React.createElement("div", {
    className: cx(styles.subtitle)
  }, React.createElement(Text, {
    large: !small
  }, subtitle)), React.createElement("div", {
    className: cx(styles.errorOrLoader)
  }, error ? React.createElement(ErrorMessage, {
    error: error,
    title: errorTitle
  }) : React.createElement(Loader, {
    inline: true
  })));
}
AppLoader.propTypes = {
  centered: _pt.bool,
  children: _pt.any.isRequired,
  error: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
  errorTitle: _pt.node,
  failureText: _pt.any.isRequired,
  fetched: _pt.bool,
  loadingText: _pt.any.isRequired,
  small: _pt.bool,
  subtitle: _pt.node
};