import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import componentName from '../../prop-types/componentName';
import Loadable from '../Loadable';

/** Wraps a component and catches errors thrown within its React tree. */
export default class ErrorBoundary extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      error: null
    });
  }

  componentDidCatch(error, errorInfo) {
    this.props.onCatch(error, _extends({}, errorInfo, {
      name: this.props.name,
      boundary: true
    }));
    this.setState({
      error
    });
  }

  render() {
    const {
      error
    } = this.state;

    if (!error) {
      return this.props.children;
    } // NOTE: This component is generally not hit in production so we'll code split to keep some code
    // out of bundles in the optimistic case.


    return React.createElement(Loadable, {
      component:
      /* istanbul ignore next */
      () => import(
      /* webpackChunkName: "error-boundary-tripped" */
      './private/Tripped')
    });
  }

}

_defineProperty(ErrorBoundary, "propTypes", {
  onCatch: _pt.any.isRequired,
  children: _pt.any.isRequired,
  name: componentName
});

_defineProperty(ErrorBoundary, "defaultProps", {
  name: 'UnknownBoundary'
});