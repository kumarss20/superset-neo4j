import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import withStyles from '../../composers/withStyles';
import ButtonOrLink from '../private/ButtonOrLink';
import Loader from '../Loader';
import { styleSheet } from './styles';
const sizingProp = mutuallyExclusiveTrueProps('small', 'large');

/** A standard button and or link for common UI interactions. */
export class Button extends React.Component {
  render() {
    const _this$props = this.props,
          {
      cx,
      block,
      borderless,
      children,
      disabled,
      invalid,
      inverted,
      large,
      loading,
      small,
      styles
    } = _this$props,
          restProps = _objectWithoutPropertiesLoose(_this$props, ["cx", "block", "borderless", "children", "disabled", "invalid", "inverted", "large", "loading", "small", "styles"]);

    return React.createElement(ButtonOrLink, _extends({}, restProps, {
      "aria-busy": loading,
      disabled: disabled,
      loading: loading,
      className: cx(styles.button, large && styles.button_large, small && styles.button_small, !large && !small && styles.button_regular, block && styles.button_block, (disabled || loading) && styles.button_disabled, (borderless || inverted) && styles.button_inverted, invalid && styles.button_invalid, borderless && styles.button_borderless, loading && styles.button_loading)
    }), loading ? React.createElement(Loader, {
      inline: true,
      inverted: !inverted
    }) : children);
  }

}

_defineProperty(Button, "propTypes", {
  inverted: _pt.bool,
  invalid: _pt.bool,
  borderless: _pt.bool,
  block: _pt.bool,
  large: sizingProp,
  small: sizingProp
});

_defineProperty(Button, "defaultProps", {
  block: false,
  borderless: false,
  disabled: false,
  invalid: false,
  inverted: false,
  large: false,
  loading: false,
  small: false
});

export default withStyles(styleSheet, {
  extendable: true
})(Button);