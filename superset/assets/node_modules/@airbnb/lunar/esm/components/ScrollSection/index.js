import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import ScrollWrapper from './ScrollWrapper';
import ScrollSectionContext from './ScrollContext';
export { ScrollWrapper, ScrollSectionContext };

/** @ignore */
export class InternalScrollSection extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleRef", ref => {
      const {
        id,
        scrollContext
      } = this.props;
      scrollContext.removeScrollAnchor(id);

      if (ref) {
        scrollContext.addScrollAnchor(id, ref);
      }
    });
  }

  render() {
    const {
      children,
      id
    } = this.props;
    return React.createElement("section", {
      ref: this.handleRef,
      id: id
    }, children);
  }

}
/**
 * A section of the page that's measured for active scrolling by wrapping children in section
 * tag that can be scrolled to. Used in conjunction with `ScrollWrapper`.
 */

_defineProperty(InternalScrollSection, "propTypes", {
  id: _pt.string.isRequired,
  children: _pt.any.isRequired,
  scrollContext: _pt.any.isRequired
});

export default function ScrollSection(props) {
  return React.createElement(ScrollSectionContext.Consumer, null, scrollContext => scrollContext && React.createElement(InternalScrollSection, _extends({}, props, {
    scrollContext: scrollContext
  })));
}
ScrollSection.propTypes = {
  id: _pt.string.isRequired,
  children: _pt.any.isRequired
};