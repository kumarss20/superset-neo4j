import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';
import ScrollSectionContext from './ScrollContext';
import { styleSheetScrollWrapper as styleSheet } from './styles';

/** Wrapper that measures location of `ScrollSection`s. */
export class ScrollWrapper extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "anchors", new Map());

    _defineProperty(this, "observer", null);

    _defineProperty(this, "scrollContext", void 0);

    _defineProperty(this, "scrollRef", React.createRef());

    _defineProperty(this, "addScrollAnchor", (name, anchor) => {
      if ("production" !== process.env.NODE_ENV && this.anchors.has(name)) {
        throw new Error("Duplicate anchor id added: " + name);
      }

      if (this.observer) {
        this.observer.observe(anchor);
      }

      this.anchors.set(name, anchor);
    });

    _defineProperty(this, "removeScrollAnchor", name => {
      // Since we always clear anchor before adding a new one,
      // we do not want to break when we have not added an anchor yet.
      if (!this.anchors.has(name)) {
        return;
      }

      if (this.observer) {
        this.observer.unobserve(this.anchors.get(name));
      }

      this.anchors.delete(name);
    });

    _defineProperty(this, "handleIntersect",
    /* istanbul ignore next */
    entries => {
      entries.forEach((_ref) => {
        let {
          target,
          isIntersecting
        } = _ref;

        // isIntersecting is true if it has passed the threshold in a positive direction,
        // false if it is no longer intersecting, this is preferable to using intersectionRatio
        // as on small intersection areas, the ratio can lose precision wnough to be 0,
        // rather than a very small number.
        if (isIntersecting && this.props.onChangeActiveScrollSection) {
          this.props.onChangeActiveScrollSection(target.id);
        }

        if (!isIntersecting && this.props.onHideScrollSection) {
          this.props.onHideScrollSection(target.id);
        }
      });
    });
  }

  componentDidMount() {
    if (this.scrollRef.current) {
      this.setupObserver();
    }
  }

  componentDidUpdate(prevProps) {
    if (this.props.intersectionMargin !== prevProps.intersectionMargin) {
      this.setupObserver();
    }
  }

  setupObserver() {
    if (this.observer) {
      this.observer.disconnect();
      this.observer = null;
    }

    if (this.scrollRef.current) {
      this.observer = new IntersectionObserver(this.handleIntersect, {
        root: this.scrollRef.current,
        rootMargin: this.props.intersectionMargin,
        threshold: this.props.intersectionThreshold
      });
      this.anchors.forEach(anchor => {
        this.observer.observe(anchor);
      });
    }
  }

  render() {
    const {
      cx,
      children,
      styles
    } = this.props;

    if (!this.scrollContext) {
      this.scrollContext = {
        addScrollAnchor: this.addScrollAnchor,
        removeScrollAnchor: this.removeScrollAnchor
      };
    }

    return React.createElement(ScrollSectionContext.Provider, {
      value: this.scrollContext
    }, React.createElement("div", {
      ref: this.scrollRef,
      className: cx(styles.wrapper)
    }, children));
  }

}

_defineProperty(ScrollWrapper, "propTypes", {
  children: _pt.any.isRequired,
  intersectionMargin: _pt.string,
  intersectionThreshold: _pt.number,
  onChangeActiveScrollSection: _pt.func,
  onHideScrollSection: _pt.func
});

_defineProperty(ScrollWrapper, "defaultProps", {
  intersectionMargin: '0% 0% -99% 0%'
});

export default withStyles(styleSheet)(ScrollWrapper);