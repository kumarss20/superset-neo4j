function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import PropTypes from 'prop-types';
import { mutuallyExclusiveProps, requiredBy, forbidExtraProps } from 'airbnb-prop-types';
import iconComponent from '../../prop-types/iconComponent';
import useStyles from '../../hooks/useStyles';
import ProfilePhoto from '../ProfilePhoto';
import ButtonOrLink from '../private/ButtonOrLink';
import { styleSheet } from './styles';

/** Compact component that represents a snippet of information, such as a filter. */
function Chip(_ref) {
  let {
    active,
    afterIcon,
    beforeIcon,
    children,
    compact,
    disabled,
    id,
    onClick,
    onIconClick,
    profileImageSrc,
    trackingName
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);
  const Component = onClick ? 'button' : 'div';
  const props = Component === 'button' ? _extends({
    disabled,
    onClick,
    type: 'button'
  }, trackingName && {
    'data-tracking-name': trackingName
  }) : {};
  const shouldRenderBefore = beforeIcon || profileImageSrc;
  return (// @ts-ignore [ts] JSX element type 'Component' does not have any construct or call signatures. [2604]
    React.createElement(Component, _extends({
      className: cx(styles.chip, onClick && styles.chip_button, !shouldRenderBefore && styles.chip_noBefore, !afterIcon && styles.chip_noAfter, active && styles.chip_active, onClick && active && styles.chip_active_button, compact && styles.chip_compact, disabled && styles.chip_disabled)
    }, props, {
      id: id
    }), shouldRenderBefore && React.createElement("div", {
      className: cx(styles.chipItem, styles.sideContent)
    }, React.createElement("div", {
      className: cx(styles.sideContentInner, !!beforeIcon && styles.iconWrapper, !!beforeIcon && styles.iconWrapperBefore)
    }, profileImageSrc && React.createElement(ProfilePhoto, {
      imageSrc: profileImageSrc,
      title: "",
      size: 4
    }), beforeIcon)), React.createElement("div", {
      className: cx(styles.chipItem, styles.content)
    }, children), afterIcon && React.createElement("div", {
      className: cx(styles.chipItem, styles.sideContent)
    }, React.createElement("div", {
      className: cx(styles.sideContentInner, styles.iconWrapper, styles.iconWrapperAfter)
    }, onIconClick ? React.createElement(ButtonOrLink, {
      className: cx(styles.iconButton, disabled && styles.iconButton_disabled),
      disabled: disabled,
      onClick: onIconClick
    }, afterIcon) : afterIcon)))
  );
}

Chip.propTypes = {
  trackingName: PropTypes.string,
  onIconClick: PropTypes.func,
  id: PropTypes.string,
  disabled: PropTypes.bool,
  children: PropTypes.any.isRequired,
  active: PropTypes.bool,
  afterIcon: requiredBy('onIconClick', iconComponent),
  beforeIcon: mutuallyExclusiveProps(PropTypes.node, 'beforeIcon', 'profileImageSrc'),
  compact: mutuallyExclusiveProps(PropTypes.any, 'profileImageSrc', 'compact'),
  profileImageSrc: mutuallyExclusiveProps(PropTypes.any, 'beforeIcon', 'profileImageSrc', 'compact'),
  onClick: mutuallyExclusiveProps(PropTypes.func, 'onIconClick')
};
export default Chip;