function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { SKIN_COLORS } from 'interweave-emoji-picker';

const styleSheet = (_ref) => {
  let {
    ui,
    unit,
    color,
    font,
    pattern
  } = _ref;
  return {
    picker: {
      background: color.accent.bg,
      border: ui.border,
      borderRadius: ui.borderRadius
    },
    preview: _extends({}, font.textRegular, {
      padding: unit * 1.5,
      borderBottom: ui.border,
      display: 'flex',
      alignItems: 'center',
      ':empty': {
        display: 'none'
      }
    }),
    previewEmoji: {
      flexGrow: 0,
      marginRight: unit * 2
    },
    previewTitle: _extends({}, font.textRegular, {
      marginBottom: unit / 2
    }),
    previewSubtitle: _extends({}, font.textSmall, {
      fontWeight: font.weights.light,
      color: color.muted
    }),
    previewShiftMore: {
      fontWeight: font.weights.light,
      color: color.muted,
      marginLeft: unit
    },
    emoji: {
      background: 'transparent',
      border: 0,
      fontSize: 'inherit',
      float: 'left',
      cursor: 'pointer',
      ':focus': {
        outline: 'none'
      },
      '@selectors': {
        ':not(:empty) > img': {
          display: 'block'
        }
      }
    },
    emoji_active: {
      background: color.accent.bgHover,
      borderRadius: ui.borderRadius
    },
    emojis: {
      position: 'relative',
      padding: unit
    },
    emojisHeader: _extends({}, font.textMicro, {
      fontWeight: font.weights.bold,
      textTransform: 'uppercase',
      color: color.accent.text,
      background: color.accent.bg,
      padding: unit + "px 0",
      lineHeight: 1
    }),
    emojisHeader_sticky: {
      position: 'absolute',
      top: unit,
      left: unit,
      right: unit,
      zIndex: 2
    },
    list: {
      display: 'flex',
      flexWrap: 'nowrap',
      margin: 0,
      padding: 0,
      lineHeight: 1,
      listStyle: 'none',
      justifyContent: 'space-between'
    },
    group: {
      background: 'transparent',
      border: '1px solid transparent',
      borderTop: 0,
      padding: unit + "px " + unit * 0.75 + "px",
      fontSize: 16,
      position: 'relative',
      cursor: 'pointer',
      color: color.accent.text,
      borderBottomLeftRadius: ui.borderRadius,
      borderBottomRightRadius: ui.borderRadius,
      ':hover': {
        background: color.core.neutral[2]
      },
      ':focus': {
        outline: 'none'
      }
    },
    group_active: {
      background: color.accent.bg,
      color: color.core.primary[3],
      ':hover': {
        background: color.accent.bgHover
      }
    },
    groups: {
      background: color.core.neutral[3],
      padding: "0 " + unit + "px " + unit / 2 + "px " + unit + "px"
    },
    skinTone: {
      borderWidth: 2,
      borderStyle: 'solid',
      borderRadius: '50%',
      width: 12,
      height: 12,
      padding: 0,
      margin: 0,
      marginLeft: unit / 2,
      overflow: 'hidden',
      cursor: 'pointer',
      display: 'block',
      opacity: 0.75,
      '@selectors': _extends({
        ':hover': {
          opacity: 1
        },
        ':focus': {
          outline: 'none'
        }
      }, Object.keys(SKIN_COLORS).reduce((colors, key) => _extends({}, colors, {
        ["[data-skin-tone=\"" + key + "\"]"]: {
          backgroundColor: SKIN_COLORS[key],
          borderColor: SKIN_COLORS[key]
        }
      }), {}))
    },
    skinTone_active: {
      opacity: 1,
      '@selectors': _extends({}, Object.keys(SKIN_COLORS).reduce((colors, key) => _extends({}, colors, {
        ["[data-skin-tone=\"" + key + "\"]"]: {
          backgroundColor: color.accent.bg
        }
      }), {}))
    },
    skinTones: {
      float: 'right',
      textAlign: 'center'
    },
    search: {
      padding: unit,
      paddingTop: 0
    },
    searchInput: _extends({}, font.textSmall, {
      fontWeight: font.weights.light,
      border: ui.borderThick,
      borderRadius: ui.borderRadius,
      backgroundColor: color.accent.bg,
      padding: unit,
      zIndex: 0,
      width: '100%',
      ':focus': _extends({}, pattern.focused)
    }),
    noPreview: _extends({}, font.textRegular, {
      color: color.muted
    }),
    noResults: _extends({}, font.textRegular, {
      padding: unit * 1.5
    }),
    clear: _extends({}, pattern.resetButton, {
      float: 'right',
      color: color.accent.text,
      margin: '0 -1px 0 0',
      ':hover': {
        color: color.core.neutral[4]
      }
    })
  };
};

export default styleSheet;
export { styleSheet };