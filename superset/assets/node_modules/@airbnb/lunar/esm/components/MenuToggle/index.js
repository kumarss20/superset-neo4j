import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import iconComponent from '../../prop-types/iconComponent';
import withStyles from '../../composers/withStyles';
import BaseButton from '../Button';
import MutedButton from '../MutedButton';
import IconButton from '../IconButton';
import ExpandableIcon from '../ExpandableIcon';
import Dropdown from '../Dropdown';
import Menu, { Item, Separator } from '../Menu';
import { styleSheet } from './styles';

/** A controller for multiple tabs. */
export class MenuToggle extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "state", {
      opened: false
    });

    _defineProperty(this, "handleItemClick", onClick => {
      if (onClick) {
        onClick();
      }

      this.handleHideMenu();
    });

    _defineProperty(this, "handleToggleMenu", () => {
      if (this.state.opened) {
        this.handleHideMenu();
      } else {
        this.handleShowMenu();
      }
    });

    _defineProperty(this, "handleShowMenu", () => {
      this.setState({
        opened: true
      });

      if (this.props.onShow) {
        this.props.onShow();
      }
    });

    _defineProperty(this, "handleHideMenu", () => {
      this.setState({
        opened: false
      });

      if (this.props.onHide) {
        this.props.onHide();
      }
    });

    _defineProperty(this, "handleClickOutside", event => {
      if (!this.state.opened || this.props.ignoreClickOutside) {
        return;
      } // Let the button handle itself


      const {
        current
      } = this.ref;

      if (current && current.contains(event.target)) {
        return;
      }

      this.handleHideMenu();
    });
  }

  render() {
    const {
      opened
    } = this.state;
    const {
      cx,
      accessibilityLabel,
      children,
      closeOnClick,
      disabled,
      dropdownProps = {
        right: 0
      },
      inverted,
      large,
      menuProps,
      muted,
      small,
      styles,
      toggleIcon,
      toggleLabel,
      zIndex
    } = this.props;
    let iconSize = '1.5em';

    if (large) {
      iconSize = '2em';
    } else if (small) {
      iconSize = '1em';
    }

    const Button = muted ? MutedButton : BaseButton;
    return React.createElement("div", {
      ref: this.ref,
      className: cx(styles.container)
    }, toggleIcon ? React.createElement(IconButton, {
      disabled: disabled,
      "aria-label": accessibilityLabel,
      onClick: this.handleToggleMenu
    }, toggleIcon) : React.createElement(Button, {
      disabled: disabled,
      afterIcon: React.createElement(ExpandableIcon, {
        expanded: opened,
        size: iconSize
      }),
      inverted: inverted,
      large: large,
      small: small,
      onClick: this.handleToggleMenu
    }, toggleLabel), React.createElement("div", {
      className: cx(styles.dropdown, !opened && styles.dropdown_hidden, {
        zIndex
      }),
      "aria-expanded": opened
    }, React.createElement(Dropdown, _extends({}, dropdownProps, {
      visible: opened,
      onClickOutside: this.handleClickOutside
    }), React.createElement("div", {
      className: cx(styles.menu)
    }, React.createElement(Menu, _extends({
      minWidth: 250,
      maxHeight: 300,
      accessibilityLabel: accessibilityLabel
    }, menuProps), closeOnClick ? React.Children.map(children, child => {
      if (!child || !child.props) {
        return null;
      }

      return React.cloneElement(child, {
        onClick: () => this.handleItemClick(child.props.onClick)
      });
    }) : children)))));
  }

}

_defineProperty(MenuToggle, "propTypes", {
  zIndex: _pt.number,
  toggleLabel: _pt.any.isRequired,
  small: _pt.bool,
  onShow: _pt.func,
  onHide: _pt.func,
  muted: _pt.bool,
  menuProps: _pt.any,
  large: _pt.bool,
  inverted: _pt.bool,
  ignoreClickOutside: _pt.bool,
  dropdownProps: _pt.any,
  disabled: _pt.bool,
  closeOnClick: _pt.bool,
  children: _pt.any.isRequired,
  accessibilityLabel: _pt.string.isRequired,
  toggleIcon: iconComponent
});

_defineProperty(MenuToggle, "defaultProps", {
  closeOnClick: false,
  disabled: false,
  ignoreClickOutside: false,
  inverted: false,
  large: false,
  small: false,
  zIndex: 1
});

export { Item, Separator };
export default withStyles(styleSheet)(MenuToggle);