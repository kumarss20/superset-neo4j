import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import Button from '../Button';
import Pagination from '../Pagination';
import T from '../Translate';
import withStyles from '../../composers/withStyles';
import { ARROW_RIGHT, ARROW_LEFT } from '../../keys';
import { ZoomControls, RotateControls } from '../ImageViewer';
import Spacing from '../Spacing';
import { styleSheetHeader as styleSheet } from './styles';
export class Header extends React.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleNext", () => {
      const {
        activeIndex,
        onChangeSlide
      } = this.props;
      onChangeSlide(activeIndex + 1);
    });

    _defineProperty(this, "handlePrev", () => {
      const {
        activeIndex,
        onChangeSlide
      } = this.props;
      onChangeSlide(activeIndex - 1);
    });

    _defineProperty(this, "handleFirst", () => {
      const {
        onChangeSlide
      } = this.props;
      onChangeSlide(0);
    });

    _defineProperty(this, "handleLast", () => {
      const {
        imageCount,
        onChangeSlide
      } = this.props;
      onChangeSlide(imageCount - 1);
    });

    _defineProperty(this, "handleZoom", scale => {
      if (this.props.onZoomImage) {
        this.props.onZoomImage(scale);
      }
    });

    _defineProperty(this, "handleRotate", rotation => {
      if (this.props.onRotateImage) {
        this.props.onRotateImage(rotation);
      }
    });

    _defineProperty(this, "handleKeyDown", event => {
      const {
        activeIndex,
        imageCount
      } = this.props;

      if (event.key === ARROW_LEFT && activeIndex > 0) {
        if (event.shiftKey) {
          this.handleFirst();
        } else {
          this.handlePrev();
        }
      }

      if (event.key === ARROW_RIGHT && activeIndex < imageCount - 1) {
        if (event.shiftKey) {
          this.handleLast();
        } else {
          this.handleNext();
        }
      }
    });
  }

  componentDidMount() {
    window.addEventListener('keydown', this.handleKeyDown);
  }

  componentWillUnmount() {
    window.removeEventListener('keydown', this.handleKeyDown);
  }

  render() {
    const {
      cx,
      activeIndex,
      hasAside,
      imageCount,
      hideAside,
      styles,
      showZoomControls,
      showRotateControls,
      scale,
      rotation
    } = this.props;
    return React.createElement("div", {
      className: cx(styles.header)
    }, React.createElement("div", {
      className: cx(styles.pagination)
    }, React.createElement(Pagination, {
      centerAlign: true,
      showBookends: true,
      hasPrev: activeIndex > 0,
      hasNext: activeIndex < imageCount - 1,
      page: activeIndex + 1,
      pageLabel: T.phrase('Photo', {}, 'Label for photo pagination'),
      pageCount: imageCount,
      onNext: this.handleNext,
      onPrevious: this.handlePrev,
      onFirst: this.handleFirst,
      onLast: this.handleLast
    })), showRotateControls && React.createElement(Spacing, {
      right: 2
    }, React.createElement(RotateControls, {
      rotation: rotation,
      onRotation: this.handleRotate
    })), showZoomControls && React.createElement(Spacing, {
      right: 2
    }, React.createElement(ZoomControls, {
      scale: scale,
      onScale: this.handleZoom
    })), hasAside && React.createElement("div", {
      className: cx(styles.infoButton)
    }, React.createElement(Button, {
      small: true,
      onClick: this.props.onToggleAside
    }, hideAside ? T.phrase('Show Info', {}, 'Shows sidebar information in the Lightbox') : T.phrase('Hide Info', {}, 'Hides sidebar information in the Lightbox'))));
  }

}

_defineProperty(Header, "propTypes", {
  activeIndex: _pt.number.isRequired,
  imageCount: _pt.number.isRequired,
  hasAside: _pt.bool,
  hideAside: _pt.bool,
  rotation: _pt.number,
  scale: _pt.number,
  showRotateControls: _pt.bool,
  showZoomControls: _pt.bool,
  onChangeSlide: _pt.func.isRequired,
  onRotateImage: _pt.func,
  onToggleAside: _pt.func.isRequired,
  onZoomImage: _pt.func
});

export default withStyles(styleSheet)(Header);