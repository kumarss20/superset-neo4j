import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../../composers/withStyles';
import FocusTrap from '../../FocusTrap';
import focusFirstFocusableChild from '../../../utils/focus/focusFirstFocusableChild';
import ModalImageLayout from './ImageLayout';
import ModalInnerContent from './InnerContent';
import { styleSheetInner as styleSheet, MODAL_MAX_WIDTH_SMALL, MODAL_MAX_WIDTH_MEDIUM, MODAL_MAX_WIDTH_LARGE } from '../styles';
export { MODAL_MAX_WIDTH_SMALL, MODAL_MAX_WIDTH_MEDIUM, MODAL_MAX_WIDTH_LARGE };

/** A Dialog component with a backdrop and a standardized layout. */
export class ModalInner extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "dialogRef", React.createRef());

    _defineProperty(this, "lastActiveElement", null);

    _defineProperty(this, "openTimeout", void 0);

    _defineProperty(this, "handleClickOutside", event => {
      const {
        current
      } = this.dialogRef;

      if (current && current.contains(event.target)) {
        return;
      }

      this.handleClose(event);
    });

    _defineProperty(this, "handleOpen", () => {
      this.lastActiveElement = document.activeElement; // Putting this in a setTimeout helps screen readers notice that focus has changed.

      this.openTimeout = window.setTimeout(() => {
        const {
          current: dialogRefElement
        } = this.dialogRef;

        if (dialogRefElement) {
          focusFirstFocusableChild(dialogRefElement);
        }
      }, 0);
    });

    _defineProperty(this, "handleClose", event => {
      const {
        onClose
      } = this.props;
      onClose(event);
    });
  }

  componentDidMount() {
    this.handleOpen();
    document.addEventListener('click', this.handleClickOutside, true);
  }

  componentWillUnmount() {
    document.removeEventListener('click', this.handleClickOutside, true);

    if (this.openTimeout) {
      window.clearTimeout(this.openTimeout);
    }

    if (this.lastActiveElement) {
      this.lastActiveElement.focus();
    }
  }

  render() {
    const {
      cx,
      children,
      footer,
      image,
      large,
      small,
      fluid,
      scrollable,
      styles,
      subtitle,
      title
    } = this.props;
    const showLargeContent = large || !!image;
    const innerContent = React.createElement(ModalInnerContent, {
      footer: footer,
      large: showLargeContent,
      small: small,
      scrollable: scrollable,
      subtitle: subtitle,
      title: title,
      onClose: this.handleClose
    }, children);
    return React.createElement("div", {
      ref: this.dialogRef,
      "aria-modal": true,
      role: "dialog",
      className: cx(styles.content, small && styles.content_small, showLargeContent && styles.content_large, fluid && styles.content_fluid)
    }, React.createElement(FocusTrap, null, image ? React.createElement(ModalImageLayout, image, innerContent) : innerContent));
  }

}

_defineProperty(ModalInner, "propTypes", {
  image: _pt.any,
  fluid: _pt.bool
});

export default withStyles(styleSheet)(ModalInner);