import _pt from "prop-types";
import React from 'react';
import useStyles from '../../hooks/useStyles';
import useTheme from '../../hooks/useTheme';
import ExpandableIcon from '../ExpandableIcon';
import { styleSheetItem as styleSheet } from './styles';

/**
 * A single accordion item. To be rendered amongst a collection of accordion items, within an accordion.
 */
export default function AccordionItem(_ref) {
  let {
    bordered,
    children,
    expanded,
    id,
    index,
    noSpacing,
    title,
    onClick
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);
  const theme = useTheme();

  const handleClick = () => {
    if (onClick) {
      onClick(index);
    }
  };

  return React.createElement("div", {
    className: cx(bordered && styles.item_bordered)
  }, React.createElement("button", {
    className: cx(styles.title, noSpacing && styles.title_noSpacing),
    "aria-controls": "accordion-body-" + id,
    "aria-selected": expanded,
    id: "accordion-title-" + id,
    role: "tab",
    tabIndex: 0,
    type: "button",
    onClick: handleClick
  }, title && React.createElement("span", {
    className: cx(styles.titleText)
  }, title), React.createElement(ExpandableIcon, {
    expanded: !!expanded,
    size: theme.unit * 3
  })), React.createElement("section", {
    className: cx(styles.body, expanded && styles.body_expanded, noSpacing && styles.body_noSpacing),
    "aria-hidden": !expanded,
    "aria-labelledby": "accordion-title-" + id,
    id: "accordion-body-" + id,
    role: "tabpanel"
  }, children));
}
AccordionItem.propTypes = {
  bordered: _pt.bool,
  children: _pt.node,
  expanded: _pt.bool,
  id: _pt.string.isRequired,
  index: _pt.number,
  noSpacing: _pt.bool,
  title: _pt.node,
  onClick: _pt.func
};