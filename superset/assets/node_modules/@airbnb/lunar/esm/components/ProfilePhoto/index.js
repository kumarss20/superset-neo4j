function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import { and, mutuallyExclusiveProps, forbidExtraProps } from 'airbnb-prop-types';
import withStyles from '../../composers/withStyles';
import { styleSheet } from './styles';
const mutuallyExclusiveSizePropType = mutuallyExclusiveProps(PropTypes.any, 'small', 'large', 'macro', 'size');
const namedSizePropType = and([PropTypes.bool, mutuallyExclusiveSizePropType]);
const unitSizePropType = and([PropTypes.number, mutuallyExclusiveSizePropType]);

/** Display a profile photo. */
export class ProfilePhoto extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      src: this.props.imageSrc || ''
    });

    _defineProperty(this, "handleError", event => {
      const {
        fallbackImageSrc
      } = this.props;

      if (fallbackImageSrc) {
        this.setState({
          src: fallbackImageSrc
        });
      }
    });
  }

  componentDidUpdate(prevProps) {
    const {
      imageSrc
    } = this.props;

    if (imageSrc !== prevProps.imageSrc) {
      this.setState({
        src: imageSrc
      });
    }
  }

  render() {
    const {
      src
    } = this.state;
    const {
      cx,
      fallbackImageSrc,
      inline,
      macro,
      large,
      small,
      size,
      square,
      styles,
      title,
      theme
    } = this.props;
    const {
      unit
    } = theme;
    return React.createElement("div", {
      className: cx(inline && styles.inline, styles.regular, macro && styles.macro, large && styles.large, small && styles.small, !!size && size > 0 && {
        height: size * unit,
        maxHeight: size * unit,
        maxWidth: size * unit,
        width: size * unit
      })
    }, React.createElement("img", {
      className: cx(styles.image, styles.regular, !square && styles.roundedImage, macro && styles.macro, large && styles.large, small && styles.small, !!size && size > 0 && {
        height: size * unit,
        maxHeight: size * unit,
        maxWidth: size * unit,
        width: size * unit
      }),
      src: src,
      alt: title,
      title: title,
      onError: fallbackImageSrc ? this.handleError : undefined
    }));
  }

}

_defineProperty(ProfilePhoto, "propTypes", {
  title: PropTypes.string.isRequired,
  square: PropTypes.bool,
  inline: PropTypes.bool,
  imageSrc: PropTypes.string.isRequired,
  fallbackImageSrc: PropTypes.string,
  large: namedSizePropType,
  macro: namedSizePropType,
  size: unitSizePropType,
  small: namedSizePropType
});

_defineProperty(ProfilePhoto, "defaultProps", {
  inline: false,
  square: false
});

export default withStyles(styleSheet, {
  passThemeProp: true
})(ProfilePhoto);