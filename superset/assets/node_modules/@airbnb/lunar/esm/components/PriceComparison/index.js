function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import { DEFAULT_CURRENCY } from '../../constants';
import PriceGroup from '../PriceGroup';

/** Display a comparison between USD and native amounts. Supports all props in `Price`. */
export default class PriceComparison extends React.PureComponent {
  render() {
    const _this$props = this.props,
          {
      amount,
      amountUSD,
      currency
    } = _this$props,
          restProps = _objectWithoutPropertiesLoose(_this$props, ["amount", "amountUSD", "currency"]);

    const amounts = {};
    const hasPrice = amount !== null && amount !== undefined;
    const hasPriceUSD = amountUSD !== null && amountUSD !== undefined;
    const targetCurrency = amount && typeof amount === 'object' ? amount.currency : currency; // Sometimes the native price could be empty

    if (hasPrice) {
      amounts[targetCurrency] = amount;
    } // Show the USD price if the native price is empty, or if the currencies don't match


    if (hasPriceUSD && (!hasPrice || targetCurrency !== DEFAULT_CURRENCY)) {
      amounts[DEFAULT_CURRENCY] = amountUSD;
    }

    return React.createElement(PriceGroup, _extends({}, restProps, {
      amounts: amounts
    }));
  }

}

_defineProperty(PriceComparison, "propTypes", {
  currency: PropTypes.string,
  amount: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),
  amountUSD: PropTypes.oneOfType([PropTypes.object, PropTypes.number])
});

_defineProperty(PriceComparison, "defaultProps", {
  amount: null,
  amountUSD: null,
  currency: DEFAULT_CURRENCY
});