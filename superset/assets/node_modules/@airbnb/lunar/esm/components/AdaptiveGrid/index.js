import _pt from "prop-types";
import React from 'react';
import useStyles from '../../hooks/useStyles';
import { styleSheet } from './styles';
export default function AdaptiveGrid(_ref) {
  let {
    breakpoints = {},
    children,
    defaultItemsPerRow = 1,
    noGutter
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);
  const childElements = !!children && React.Children.map(children, (child, idx) => child ? // These items are generic and don't have a guaranteed id or any unique property
  // eslint-disable-next-line react/no-array-index-key
  React.createElement("div", {
    key: idx,
    className: cx(styles.item)
  }, child) : null).filter(Boolean);
  const breakpointStyles = {};
  const breakpointKeys = Object.keys(breakpoints);
  const smallestBreakpoint = breakpointKeys.reduce((min, key) => Math.min(min, parseInt(key, 10)), 10000);
  breakpointKeys.forEach(breakpoint => {
    breakpointStyles["@media (min-width: " + breakpoint + "px)"] = {
      gridTemplateColumns: "repeat(" + breakpoints[breakpoint] + ", 1fr)"
    };
  });
  breakpointStyles[breakpointKeys.length > 0 ? "@media (max-width: " + smallestBreakpoint + "px)" : '@media (min-width: 0px)'] = {
    gridTemplateColumns: "repeat(" + defaultItemsPerRow + ", 1fr)"
  };
  return React.createElement("div", {
    className: cx(styles.container, noGutter && styles.container_noGutter, breakpointStyles)
  }, childElements);
}
AdaptiveGrid.propTypes = {
  children: _pt.node,
  breakpoints: _pt.objectOf(_pt.number),
  defaultItemsPerRow: _pt.number,
  noGutter: _pt.bool
};