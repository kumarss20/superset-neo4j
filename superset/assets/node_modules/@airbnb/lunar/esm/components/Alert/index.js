import _pt from "prop-types";

/* eslint-disable prefer-destructuring */
import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import IconFlag from '@airbnb/lunar-icons/lib/interface/IconFlag';
import IconCheckAlt from '@airbnb/lunar-icons/lib/interface/IconCheckAlt';
import IconClose from '@airbnb/lunar-icons/lib/interface/IconClose';
import IconError from '@airbnb/lunar-icons/lib/interface/IconError';
import IconInfo from '@airbnb/lunar-icons/lib/interface/IconInfo';
import IconWarning from '@airbnb/lunar-icons/lib/interface/IconWarning';
import useStyles from '../../hooks/useStyles';
import useTheme from '../../hooks/useTheme';
import Row from '../Row';
import Spacing from '../Spacing';
import Text from '../Text';
import T from '../Translate';
import IconButton from '../IconButton';
import { STATUSES } from '../../constants';
import { styleSheet } from './styles';
const alertColorTypePropType = mutuallyExclusiveTrueProps(...STATUSES);

/** Classify content through the use of colorful alerts. */
function Alert(_ref) {
  let {
    children,
    danger,
    hideStatusIcon,
    info,
    inline,
    notice,
    success,
    title,
    warning,
    onClose
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);
  const {
    color,
    unit
  } = useTheme();
  let StatusIcon = null;
  let iconColor = color.accent.text;

  if (danger) {
    StatusIcon = IconError;
    iconColor = color.core.danger[3];
  } else if (info) {
    StatusIcon = IconInfo;
    iconColor = color.core.primary[3];
  } else if (notice) {
    StatusIcon = IconFlag;
    iconColor = color.core.secondary[3];
  } else if (success) {
    StatusIcon = IconCheckAlt;
    iconColor = color.core.success[3];
  } else if (warning) {
    StatusIcon = IconWarning;
    iconColor = color.core.warning[3];
  }

  return React.createElement("div", {
    className: cx(styles.alert, inline && styles.alert_inline, !hideStatusIcon && !!StatusIcon && styles.alert_statusIcon, danger && styles.alert_danger, info && styles.alert_info, notice && styles.alert_notice, success && styles.alert_success, warning && styles.alert_warning)
  }, React.createElement(Row, {
    middleAlign: !children,
    after: onClose && React.createElement(IconButton, {
      onClick: onClose
    }, React.createElement(IconClose, {
      accessibilityLabel: T.phrase('Close', {}, {
        context: 'Close the alert',
        key: 'lunar.common.close'
      }),
      size: unit * 3
    })),
    before: !hideStatusIcon && StatusIcon && React.createElement(StatusIcon, {
      decorative: true,
      color: iconColor,
      size: unit * 3
    })
  }, React.createElement(Text, {
    bold: true
  }, title), children && React.createElement(Spacing, {
    top: 1
  }, React.createElement(Text, null, children))));
}

Alert.propTypes = {
  onClose: _pt.func,
  title: _pt.any.isRequired,
  inline: _pt.bool,
  hideStatusIcon: _pt.bool,
  children: _pt.node,
  danger: alertColorTypePropType,
  info: alertColorTypePropType,
  notice: alertColorTypePropType,
  success: alertColorTypePropType,
  warning: alertColorTypePropType
};
export default Alert;