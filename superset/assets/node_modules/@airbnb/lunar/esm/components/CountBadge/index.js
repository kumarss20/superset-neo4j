import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';
import { styleSheet } from './styles';

/** A badge indicator with a count. */
export class CountBadge extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "badgeRef", React.createRef());
  }

  componentDidUpdate(prevProps) {
    const {
      value
    } = this.props;

    if (value && prevProps.value && value !== prevProps.value) {
      this.runPopAnimation();
    }
  }

  runPopAnimation() {
    if (this.badgeRef.current) {
      this.badgeRef.current.animate( // @ts-ignore Bug: https://github.com/Microsoft/TypeScript/issues/26073
      [{
        transform: 'scale(1)'
      }, {
        transform: 'scale(1.1)',
        offset: 0.3
      }, {
        transform: 'scale(.95)',
        offset: 0.8
      }, {
        transform: 'scale(1)'
      }], 300);
    }
  }

  render() {
    const {
      cx,
      accessibilityLabel,
      styles,
      value,
      waggle
    } = this.props;

    if (!value) {
      return null;
    }

    return React.createElement("div", {
      ref: this.badgeRef,
      className: cx(styles.badge, waggle ? styles.animateInAndWaggle : styles.animateIn),
      "aria-label": accessibilityLabel
    }, value.toLocaleString());
  }

}

_defineProperty(CountBadge, "propTypes", {
  accessibilityLabel: _pt.string.isRequired,
  value: _pt.number.isRequired,
  waggle: _pt.bool
});

_defineProperty(CountBadge, "defaultProps", {
  waggle: false
});

export default withStyles(styleSheet)(CountBadge);