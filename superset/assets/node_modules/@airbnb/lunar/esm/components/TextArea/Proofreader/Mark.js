import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../../composers/withStyles';
import { styleSheetMark as styleSheet } from './styles';

class Mark extends React.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "handleSelect", () => {
      const {
        ref
      } = this;

      if (this.props.selected && ref.current) {
        this.props.onSelect(ref.current.offsetTop + ref.current.offsetHeight, ref.current.offsetLeft);
      }
    });
  }

  componentDidMount() {
    this.handleSelect();
  }

  componentDidUpdate(prevProps) {
    if (this.props.selected !== prevProps.selected) {
      this.handleSelect();
    }
  }

  render() {
    const {
      cx,
      children,
      selected,
      alwaysHighlight,
      styles
    } = this.props;
    const highlight = selected || alwaysHighlight;
    return React.createElement("mark", {
      ref: this.ref,
      className: cx(styles.mark, highlight && styles.mark_highlight)
    }, children);
  }

}

_defineProperty(Mark, "propTypes", {
  children: _pt.any.isRequired,
  selected: _pt.bool.isRequired,
  onSelect: _pt.func.isRequired,
  alwaysHighlight: _pt.bool
});

_defineProperty(Mark, "defaultProps", {
  alwaysHighlight: false
});

export default withStyles(styleSheet, {
  extendable: true
})(Mark);