import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import T from '../../Translate';
import Menu, { Row, Item } from '../../Menu';
import Text from '../../Text';
import Interweave from '../../Interweave';
import TrackingBoundary from '../../TrackingBoundary';
export default class ErrorMenu extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", replacement => {
      this.props.onReplaceText(this.props.error, replacement);
    });

    _defineProperty(this, "replacementText", replacement => {
      switch (replacement) {
        case ' ':
          return T.phrase('(Space)', {}, {
            context: 'Represents a space character within the spell checker',
            key: 'lunar.proofreader.whiteSpace'
          });

        case '':
          return T.phrase('Delete', {}, {
            context: 'Represents deleting within the spell checker',
            key: 'lunar.proofreader.delete'
          });

        default:
          return replacement;
      }
    });
  }

  render() {
    const {
      error
    } = this.props;
    return React.createElement(TrackingBoundary, {
      name: "Proofreader/ErrorMenu"
    }, React.createElement(Menu, {
      accessibilityLabel: T.phrase('Spelling or grammar replacements', {}, {
        context: 'Menu with a list of spelling mistake replacements',
        key: 'lunar.proofreader.replacementLabel'
      })
    }, React.createElement(Row, null, React.createElement(Text, {
      small: true,
      muted: true,
      bold: true
    }, React.createElement(Interweave, {
      content: error.short_message || error.message
    }))), error.replacements.map(replacement => React.createElement(Item, {
      key: replacement,
      onClick: () => this.handleClick(replacement)
    }, React.createElement(Text, null, this.replacementText(replacement))))));
  }

}

_defineProperty(ErrorMenu, "propTypes", {
  error: _pt.any.isRequired,
  onReplaceText: _pt.func.isRequired
});