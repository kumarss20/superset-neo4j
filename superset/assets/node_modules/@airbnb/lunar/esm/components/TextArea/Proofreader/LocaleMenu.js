import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import T from '../../Translate';
import Menu, { Row, Item, Separator } from '../../Menu';
import Text from '../../Text';
import TrackingBoundary from '../../TrackingBoundary';
import { LT_LOCALES } from '../../../constants';
export default class LocaleMenu extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", locale => {
      this.props.onSelectLocale(locale);
    });
  }

  render() {
    const {
      autoDefinition,
      noneDefinition,
      selectedLocale
    } = this.props;
    const locales = [...LT_LOCALES];
    locales.sort((a, b) => a.label.localeCompare(b.label));
    return React.createElement(TrackingBoundary, {
      name: "Proofreader/LocaleMenu"
    }, React.createElement(Menu, {
      accessibilityLabel: T.phrase('Language selector', {}, {
        context: 'Language selector for proofreader (spelling and grammer checker)',
        key: 'lunar.proofreader.languageSelector'
      })
    }, React.createElement(Row, null, React.createElement(Text, {
      small: true,
      muted: true,
      bold: true
    }, React.createElement(T, {
      k: "lunar.proofreader.selectLanguage",
      phrase: "Select a language",
      context: "Select a language to run spelling checks"
    }))), noneDefinition && React.createElement(Item, {
      key: noneDefinition.locale,
      highlighted: selectedLocale === noneDefinition.locale,
      onClick: () => this.handleClick(noneDefinition.locale)
    }, React.createElement(Text, {
      inline: true
    }, noneDefinition.label)), autoDefinition && React.createElement(Item, {
      key: autoDefinition.locale,
      highlighted: selectedLocale === autoDefinition.locale,
      onClick: () => this.handleClick(autoDefinition.locale)
    }, React.createElement(Text, {
      inline: true
    }, autoDefinition.label)), (noneDefinition || autoDefinition) && React.createElement(Separator, null), locales.map(definition => React.createElement(Item, {
      key: definition.locale,
      highlighted: selectedLocale === definition.locale,
      onClick: () => this.handleClick(definition.locale)
    }, React.createElement(Text, {
      inline: true
    }, definition.label)))));
  }

}

_defineProperty(LocaleMenu, "propTypes", {
  autoDefinition: _pt.any,
  noneDefinition: _pt.any,
  selectedLocale: _pt.oneOfType([_pt.string, _pt.oneOf([null])]),
  onSelectLocale: _pt.func.isRequired
});