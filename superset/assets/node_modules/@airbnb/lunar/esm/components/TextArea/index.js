function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import uuid from 'uuid/v4';
import PropTypes from 'prop-types';
import { requiredBy, forbidExtraProps } from 'airbnb-prop-types';
import BaseTextArea from '../private/BaseTextArea';
import FormField, { partitionFieldProps } from '../FormField';
import T from '../Translate';
import Proofreader from './Proofreader';

/** A controlled textarea field. */
export default class TextArea extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      id: uuid()
    });
  }

  render() {
    const {
      fieldProps,
      inputProps
    } = partitionFieldProps(this.props);

    const {
      locale,
      name,
      proofread,
      proofreadProps,
      onCheckText
    } = inputProps,
          textareaProps = _objectWithoutPropertiesLoose(inputProps, ["locale", "name", "proofread", "proofreadProps", "onCheckText"]);

    const {
      id
    } = this.state;
    const description = fieldProps.labelDescription || inputProps.maxLength && React.createElement(T, {
      k: "lunar.form.charsUsed",
      phrase: "%{current}/%{max} characters used",
      current: inputProps.value.length.toLocaleString(),
      max: inputProps.maxLength.toLocaleString(),
      context: "Showing the current and max characters within a form textarea"
    });
    return React.createElement(FormField, _extends({}, fieldProps, {
      id: id,
      labelDescription: description
    }), proofread && onCheckText ? React.createElement(Proofreader, _extends({}, textareaProps, proofreadProps, {
      id: id,
      locale: locale,
      name: name,
      onCheckText: onCheckText
    })) : React.createElement(BaseTextArea, _extends({}, textareaProps, {
      id: id,
      name: name
    })));
  }

}

_defineProperty(TextArea, "propTypes", {
  proofreadProps: PropTypes.any,
  proofread: PropTypes.bool,
  noTranslate: PropTypes.bool,
  maxLength: PropTypes.number,
  onCheckText: requiredBy('proofread', PropTypes.func)
});

_defineProperty(TextArea, "defaultProps", {
  locale: 'none',
  noTranslate: false,
  proofread: false,
  proofreadProps: undefined
});