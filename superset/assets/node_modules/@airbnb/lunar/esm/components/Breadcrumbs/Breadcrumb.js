import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import IconChevronLeft from '@airbnb/lunar-icons/lib/interface/IconChevronLeft';
import IconChevronRight from '@airbnb/lunar-icons/lib/interface/IconChevronRight';
import useStyles from '../../hooks/useStyles';
import ButtonOrLink from '../private/ButtonOrLink';
import DirectionalIcon from '../DirectionalIcon';
import { styleSheetBreadcrumb as styleSheet } from './styles';

/** A single breadcrumb button. Usually rendered amongst a collection of breadcrumbs. */
export default function Breadcrumb(_ref) {
  let {
    disabled,
    hideIcon,
    highlighted,
    href,
    id,
    label,
    onClick,
    selected,
    trackingName
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);
  const clickable = !disabled && (!!href || !!onClick);
  const aria = selected ? {
    'aria-current': 'page'
  } : {};

  const handleClick = () => {
    if (onClick) {
      onClick();
    }
  };

  return React.createElement("li", {
    className: cx(styles.li)
  }, React.createElement(ButtonOrLink, _extends({}, aria, {
    className: cx(styles.breadcrumb, clickable && styles.breadcrumb_clickable, highlighted && styles.breadcrumb_highlighted, clickable && highlighted && styles.breadcrumb_highlighted_clickable, selected && styles.breadcrumb_selected, disabled && styles.breadcrumb_disabled),
    afterIcon: hideIcon ? null : React.createElement(DirectionalIcon, {
      decorative: true,
      direction: "right",
      left: IconChevronLeft,
      right: IconChevronRight,
      size: 24
    }),
    disabled: disabled,
    href: href,
    trackingName: trackingName,
    id: id,
    onClick: handleClick
  }), label));
}
Breadcrumb.propTypes = {
  disabled: _pt.bool,
  hideIcon: _pt.bool,
  highlighted: _pt.bool,
  href: _pt.string,
  id: _pt.string,
  label: _pt.string.isRequired,
  onClick: _pt.func,
  selected: _pt.bool,
  trackingName: _pt.string
};