import _pt from "prop-types";
import React from 'react';
import IconChevronLeft from '@airbnb/lunar-icons/lib/interface/IconChevronLeft';
import IconChevronRight from '@airbnb/lunar-icons/lib/interface/IconChevronRight';
import IconCheckmark from '@airbnb/lunar-icons/lib/interface/IconCheck';
import useStyles from '../../../hooks/useStyles';
import useTheme from '../../../hooks/useTheme';
import { ENTER, SPACE, ARROW_RIGHT, ARROW_LEFT } from '../../../keys';
import DirectionalIcon from '../../DirectionalIcon';
import Text from '../../Text';
import { styleSheetItem as styleSheet, ICON_SIZE } from './styles';
export { ICON_SIZE };
export default function HierarchyItem(_ref) {
  let {
    item,
    definition,
    renderItem,
    selected,
    focused,
    onSubtree,
    onItemPicked,
    onDomFocusDeeper,
    onDomFocusShallower
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);
  const theme = useTheme();

  const goDeeper = () => {
    if (item.items || item.description) {
      onSubtree(definition, onDomFocusDeeper, true);
    }
  };

  const maybePick = () => {
    if (item.readonly) {
      onItemPicked(null);
      goDeeper();
    } else {
      onItemPicked(definition);
    }
  };

  const goShallower = () => {
    onDomFocusShallower();
    onSubtree(definition.slice(0, -2), undefined, true);
  };

  const handleClick = () => {
    maybePick();
  };

  const handleMouseMove = () => {
    onSubtree(definition);
  };

  const handleKeyDown = event => {
    switch (event.key) {
      case ENTER:
      case SPACE:
        maybePick();
        break;

      case ARROW_RIGHT:
        goDeeper();
        break;

      case ARROW_LEFT:
        goShallower();
        break;

      default:
        break;
    }
  };

  const getRenderItem = () => {
    return renderItem ? renderItem(item, selected, focused) : React.createElement(React.Fragment, null, selected && React.createElement("span", {
      className: cx(styles.checkmark)
    }, React.createElement(IconCheckmark, {
      decorative: true,
      color: theme.color.core.primary[3],
      size: ICON_SIZE
    })), React.createElement("span", {
      className: cx(styles.label)
    }, React.createElement(Text, null, item.label || item.name)));
  };

  return React.createElement("div", {
    className: cx(styles.item, focused && styles.item_focused, item.readonly && styles.item_readonly),
    role: "option",
    "aria-selected": selected,
    tabIndex: focused ? 1 : 0,
    onMouseMove: handleMouseMove,
    onClick: handleClick // this is needed to find a focused parent item in a vertically aligned list
    ,
    onKeyDown: handleKeyDown
  }, getRenderItem(), item.items && React.createElement(DirectionalIcon, {
    decorative: true,
    inline: true,
    direction: "right",
    left: IconChevronLeft,
    right: IconChevronRight,
    size: "1.4em"
  }));
}
HierarchyItem.propTypes = {
  item: _pt.any.isRequired,
  definition: _pt.any.isRequired,
  renderItem: _pt.any,
  selected: _pt.bool.isRequired,
  focused: _pt.bool.isRequired,
  onSubtree: _pt.func.isRequired,
  onItemPicked: _pt.func.isRequired,
  onDomFocusDeeper: _pt.func.isRequired,
  onDomFocusShallower: _pt.func.isRequired
};