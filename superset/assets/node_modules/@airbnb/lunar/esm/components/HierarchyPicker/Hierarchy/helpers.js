function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

export function allChildrenReadonly(parent) {
  const children = parent.items || [];
  return children.length > 0 ? children.reduce((acc, item) => acc && allChildrenReadonly(item), true) : !!parent.readonly;
}
export function readonlyReducer(acc, item) {
  if (!(item.readonly && allChildrenReadonly(item))) {
    const children = (item.items || []).reduce(readonlyReducer, []);
    acc.push(_extends({}, item, {
      items: children.length > 0 ? children : null
    }));
  }

  return acc;
}