import _pt from "prop-types";
import React from 'react';
import groupBy from 'lodash/groupBy';
import useStyles from '../../../hooks/useStyles';
import Text from '../../Text';
import Highlight from './Highlight';
import { styleSheetSearchResult as styleSheet } from './styles';
export default function SearchResult(_ref) {
  let {
    item,
    formattedParents,
    matches = [],
    query = ''
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);
  const {
    description,
    label,
    name
  } = item;
  const mbk = groupBy(matches, 'key');
  const [labelMatch = null] = mbk.label || [];
  const [descMatch = null] = mbk.description || [];
  const [keywMatch = null] = mbk.keywords || [];
  const [longest] = query.split(/\s{1,}/).sort((a, b) => b.length - a.length);
  return React.createElement("div", {
    className: cx(styles.resultItem)
  }, React.createElement(Text, {
    bold: true
  }, formattedParents, React.createElement(Highlight, {
    word: longest,
    match: labelMatch,
    fallback: label || name
  })), description && React.createElement(Text, null, React.createElement(Highlight, {
    word: longest,
    match: descMatch,
    fallback: description
  })), keywMatch && React.createElement(Text, null, React.createElement(Highlight, {
    word: longest,
    match: keywMatch
  })));
}
SearchResult.propTypes = {
  item: _pt.any.isRequired,
  formattedParents: _pt.string.isRequired,
  matches: _pt.arrayOf(_pt.any),
  query: _pt.string
};