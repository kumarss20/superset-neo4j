import _pt from "prop-types";
import React from 'react';
import useStyles from '../../../hooks/useStyles';
import { styleSheetHighlight as styleSheet } from './styles';
export default function Highlight(_ref) {
  let {
    fallback,
    match,
    word: searchWord
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);

  if (!match) {
    return React.createElement("span", null, fallback);
  }

  const {
    value,
    indices = []
  } = match;
  const matchIndices = [...indices]; // clean ref

  const output = [];
  let pair = matchIndices.shift();
  let substr = '';

  for (let i = 0; i < value.length; i += 1) {
    // if substr exists and we reach the start index of a match, push current substr and reset
    if (pair && substr && i === pair[0]) {
      output.push(React.createElement("span", {
        key: i + "-start"
      }, substr));
      substr = '';
    }

    substr += value.charAt(i); // push highlight when we reach the end index of a match

    if (pair && i === pair[1]) {
      if (substr) {
        output.push(React.createElement("span", {
          key: "end-" + i,
          className: cx(styles.highlight, substr.trim().toLowerCase() === searchWord && styles.highlight_dark)
        }, React.createElement("mark", null, substr)));
      }

      substr = '';
      pair = matchIndices.shift();
    }
  }

  if (substr) {
    output.push(React.createElement("span", {
      key: "last"
    }, substr));
  }

  return React.createElement("span", null, output);
}
Highlight.propTypes = {
  fallback: _pt.string,
  match: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
  word: _pt.string
};