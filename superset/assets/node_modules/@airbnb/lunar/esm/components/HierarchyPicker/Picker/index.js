import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import Hierarchy from '../Hierarchy';
import Search from '../Search';
import withStyles from '../../../composers/withStyles';
import { ARROW_UP, ARROW_DOWN } from '../../../keys';
import { styleSheet } from './styles';
export class Picker extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      searchQuery: ''
    });

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "handleKeyDown", event => {
      const {
        searchQuery
      } = this.state;
      if (searchQuery) return;

      switch (event.key) {
        case ARROW_DOWN:
        case ARROW_UP:
          event.preventDefault();
          this.focusNext(event.key === ARROW_DOWN);
          break;

        default:
          break;
      }
    });

    _defineProperty(this, "handleSearch", searchQuery => {
      this.setState({
        searchQuery
      });
    });

    _defineProperty(this, "handleItemPicked", (def, details) => {
      if (def) {
        // null if item.readonly
        this.props.onItemPicked(def, details);
        this.props.onClose();
      }
    });
  }

  componentDidMount() {
    const [focusable] = this.getFocusables();
    const {
      scrollX,
      scrollY
    } = window; // We want to focus the first focusable item,
    // but that could cause a scroll of the document
    // depending on where the dropdown is positioned.
    // This would break initial alignment of the dropdown with the trigger.
    // so we get scroll position before focus, then set it back.

    if (focusable) {
      focusable.focus();
      window.scrollTo(scrollX, scrollY);
    }
  }

  getFocusables() {
    const el = this.ref.current;
    return el ? Array.from(el.querySelectorAll('input,[tabindex]')) : [];
  }

  focusNext(forward) {
    if (forward === void 0) {
      forward = true;
    }

    const f = this.getFocusables();
    const index = f.findIndex(el => el === document.activeElement);

    if (index >= 0) {
      if (forward) {
        f[index < f.length - 1 ? index + 1 : 0].focus();
      } else {
        f[(index || f.length) - 1].focus();
      }
    }
  }

  render() {
    const {
      cx,
      chosen,
      hierarchyMaxHeight,
      hierarchyWidth,
      indexParentPath,
      items,
      formatter,
      noResultsLabel,
      renderItem,
      searchMaxHeight,
      searchPlaceholder,
      searchWidth,
      styles,
      verticallyAlign
    } = this.props;
    const {
      searchQuery
    } = this.state;
    return (
      /* eslint-disable-next-line jsx-a11y/no-static-element-interactions */
      React.createElement("div", {
        ref: this.ref,
        className: cx(styles.pane),
        onKeyDown: this.handleKeyDown
      }, React.createElement(Search, {
        formatter: formatter,
        indexParentPath: indexParentPath,
        items: items,
        maxHeight: searchMaxHeight,
        noResultsLabel: noResultsLabel,
        placeholder: searchPlaceholder,
        query: searchQuery,
        width: searchWidth,
        onSearch: this.handleSearch,
        onItemPicked: this.handleItemPicked
      }), !searchQuery && React.createElement("div", {
        role: "listbox",
        className: cx(styles.hierarchy)
      }, React.createElement(Hierarchy, {
        chosen: chosen,
        items: items,
        formatter: formatter,
        hierarchyMaxHeight: hierarchyMaxHeight,
        hierarchyWidth: hierarchyWidth,
        renderItem: renderItem,
        verticallyAlign: verticallyAlign,
        onItemPicked: this.handleItemPicked
      })))
    );
  }

}

_defineProperty(Picker, "propTypes", {
  chosen: _pt.any,
  hierarchyMaxHeight: _pt.number,
  hierarchyWidth: _pt.number,
  indexParentPath: _pt.bool,
  items: _pt.arrayOf(_pt.any).isRequired,
  formatter: _pt.any.isRequired,
  noResultsLabel: _pt.string.isRequired,
  onClose: _pt.func.isRequired,
  onItemPicked: _pt.func.isRequired,
  renderItem: _pt.any,
  searchMaxHeight: _pt.number,
  searchPlaceholder: _pt.string.isRequired,
  searchWidth: _pt.number,
  verticallyAlign: _pt.bool
});

_defineProperty(Picker, "defaultProps", {
  searchWidth: 300
});

export default withStyles(styleSheet)(Picker);