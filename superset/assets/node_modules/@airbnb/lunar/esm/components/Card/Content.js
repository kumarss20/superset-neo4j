function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import PropTypes from 'prop-types';
import { mutuallyExclusiveProps, forbidExtraProps } from 'airbnb-prop-types';
import useStyles from '../../hooks/useStyles';
import Image from '../Image';
import Row from '../Row';
import Spacing from '../Spacing';
import { styleSheetContent as styleSheet } from './styles';

function getSideImageWidth(_ref) {
  let {
    large,
    small
  } = _ref;

  if (small) {
    return 80;
  }

  if (large) {
    return 195;
  }

  return 152;
}

/** Content block within a card. */
function CardContent(_ref2) {
  let {
    after,
    afterImageSrc,
    before,
    beforeImageSrc,
    children,
    compact,
    large,
    maxHeight,
    middleAlign,
    minHeight,
    onClick,
    small,
    topImageSrc,
    truncated
  } = _ref2;
  const [styles, cx] = useStyles(styleSheet);
  const ContainerTag = onClick ? 'button' : 'div';
  const props = onClick ? {
    type: 'button',
    onClick
  } : {};
  const spacing = compact ? 1.5 : 3;
  const horizontalSpacing = compact ? 0 : 1;
  let afterContent = after ? React.createElement("div", {
    className: cx(styles.side, compact && styles.side_compact, styles.after, compact && styles.after_compact)
  }, after) : null;

  if (!afterContent && afterImageSrc) {
    afterContent = React.createElement(Image, {
      background: true,
      cover: true,
      alt: "",
      height: "100%",
      width: getSideImageWidth({
        large,
        small
      }),
      src: afterImageSrc
    });
  }

  let beforeContent = before ? React.createElement("div", {
    className: cx(styles.side, compact && styles.side_compact, styles.before, compact && styles.before_compact)
  }, before) : null;

  if (!beforeContent && beforeImageSrc) {
    beforeContent = React.createElement(Image, {
      background: true,
      cover: true,
      alt: "",
      height: "100%",
      width: getSideImageWidth({
        large,
        small
      }),
      src: beforeImageSrc
    });
  }

  return (// @ts-ignore [ts] JSX element type 'ContainerTag' does not have any construct or call signatures. [2604]
    React.createElement(ContainerTag, _extends({}, props, {
      className: cx(styles.container, onClick && styles.container_button)
    }), topImageSrc && React.createElement("div", {
      className: cx(styles.topImage, large && styles.topImage_large)
    }, React.createElement("img", {
      className: cx(styles.image),
      alt: "",
      height: "100%",
      src: topImageSrc,
      width: "100%"
    })), React.createElement(Row, {
      after: afterContent,
      before: beforeContent,
      maxHeight: maxHeight,
      middleAlign: middleAlign,
      minHeight: minHeight,
      truncated: truncated
    }, React.createElement(Spacing, {
      inner: true,
      left: beforeContent ? horizontalSpacing : spacing,
      right: afterContent ? horizontalSpacing : spacing,
      vertical: spacing
    }, children)))
  );
}

const imageUrlTypePropType = mutuallyExclusiveProps(PropTypes.string, 'beforeImageSrc', 'afterImageSrc', 'topImageSrc');
const afterPropType = mutuallyExclusiveProps(PropTypes.oneOfType([PropTypes.node, imageUrlTypePropType]), 'after', 'afterImageSrc');
const beforePropType = mutuallyExclusiveProps(PropTypes.oneOfType([PropTypes.node, imageUrlTypePropType]), 'before', 'beforeImageSrc');
const imageSizePropType = mutuallyExclusiveProps(PropTypes.bool, 'small', 'large');
CardContent.propTypes = {
  onClick: PropTypes.func,
  truncated: PropTypes.bool,
  minHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  middleAlign: PropTypes.bool,
  maxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  compact: PropTypes.bool,
  children: PropTypes.any.isRequired,
  after: afterPropType,
  afterImageSrc: imageUrlTypePropType,
  before: beforePropType,
  beforeImageSrc: imageUrlTypePropType,
  large: imageSizePropType,
  small: imageSizePropType,
  topImageSrc: imageUrlTypePropType
};
export default CardContent;