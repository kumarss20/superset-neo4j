import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import uuid from 'uuid/v4';
import proxyComponent from '../../utils/proxyComponent';
import FormField, { partitionFieldProps } from '../FormField';
import BaseButton from '../Button';
import FormInputButton from '../private/FormInputButton';
import ButtonGroup from '../ButtonGroup';
export { ButtonGroup };

/** Manage a group of buttons with the same input `name`. */
export default class ToggleButtonController extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      id: uuid(),
      value: this.props.value || ''
    });

    _defineProperty(this, "handleClick", event => {
      const newValue = event.currentTarget.dataset.value;
      const {
        value
      } = this.state;

      if (newValue === value) {
        return;
      }

      this.props.onChange(newValue, event);
      this.setState({
        value: newValue
      });
    });

    _defineProperty(this, "renderButton", proxyComponent(BaseButton, (_ref) => {
      let {
        children,
        value
      } = _ref,
          props = _objectWithoutPropertiesLoose(_ref, ["children", "value"]);

      const {
        compact,
        disabled,
        invalid
      } = this.props;
      const {
        id,
        value: selectedValue
      } = this.state;
      const selected = value === selectedValue;
      return React.createElement(FormInputButton, _extends({}, props, {
        "data-value": value,
        id: id + "-" + value,
        name: name,
        disabled: disabled,
        inverted: !selected,
        invalid: invalid,
        small: compact,
        onClick: this.handleClick
      }), children);
    }));
  }

  componentDidUpdate(prevProps) {
    if (this.props.value !== prevProps.value) {
      this.setState({
        value: this.props.value || ''
      });
    }
  }

  render() {
    const {
      children,
      fieldProps
    } = partitionFieldProps(this.props);
    const {
      id,
      value
    } = this.state;
    return React.createElement(FormField, _extends({}, fieldProps, {
      id: id
    }), children(this.renderButton, value));
  }

}

_defineProperty(ToggleButtonController, "propTypes", {
  children: _pt.func.isRequired,
  name: _pt.string.isRequired,
  onChange: _pt.func.isRequired,
  value: _pt.string
});

_defineProperty(ToggleButtonController, "defaultProps", {
  value: ''
});