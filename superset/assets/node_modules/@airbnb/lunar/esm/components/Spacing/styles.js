function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

export function cleanClassName(className) {
  return String(className).replace('.', 'dot');
}

const styleSheet = (_ref) => {
  let {
    unit
  } = _ref;
  const spacing = {};

  for (let i = 0; i <= 12; i += 0.5) {
    const size = unit * i;
    ['Top', 'Right', 'Bottom', 'Left'].forEach(side => {
      const cleaned = cleanClassName(i);
      spacing["outer" + side + "_" + cleaned] = {
        ["margin" + side]: size
      };
      spacing["inner" + side + "_" + cleaned] = {
        ["padding" + side]: size
      };
    });
  }

  return _extends({}, spacing, {
    spacing_inline: {
      display: 'inline-block'
    }
  });
};

export default styleSheet;
export { styleSheet };