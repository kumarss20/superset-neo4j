import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState, useCallback } from 'react';
import IconAdd from '@airbnb/lunar-icons/lib/interface/IconAdd';
import IconRemove from '@airbnb/lunar-icons/lib/interface/IconRemove';
import Button from '../Button';
import IconButton from '../IconButton';
import ButtonGroup from '../ButtonGroup';
import Dropdown from '../Dropdown';
import Menu, { Item } from '../Menu';
import T from '../Translate';
import useStyles from '../../hooks/useStyles';

const styleSheet = () => ({
  controls: {
    position: 'relative',
    display: 'inline-block'
  }
});

const ZOOM_FACTOR = 0.5;
export const ZOOM_OPTIONS = [{
  label: '100%',
  scale: 1
}, {
  label: '125%',
  scale: 1.25
}, {
  label: '150%',
  scale: 1.5
}, {
  label: '200%',
  scale: 2
}];

/** Zoom controls that can be used with an image viewer component */
export default function ZoomControls(props) {
  const [styles, cx] = useStyles(styleSheet);
  const [visible, setVisible] = useState(false);
  const {
    onScale,
    scale = 1
  } = props;
  const zoomOptions = ZOOM_OPTIONS.map(zoom => _extends({}, zoom, {
    handleOnClick: () => {
      onScale(zoom.scale);
      setVisible(false);
    }
  }));
  const handleZoomOut = useCallback(() => onScale(scale - ZOOM_FACTOR < 1 ? 1 : scale - ZOOM_FACTOR), [onScale, scale]);
  const handleZoomIn = useCallback(() => onScale(scale + ZOOM_FACTOR), [onScale, scale]);
  const toggleZoomMenu = useCallback(() => setVisible(!visible), [visible]);
  return React.createElement("div", {
    className: cx(styles.controls)
  }, React.createElement(ButtonGroup, null, React.createElement(IconButton, {
    disabled: scale === 1,
    onClick: handleZoomOut
  }, React.createElement(IconRemove, {
    accessibilityLabel: T.phrase('Zoom out', {}, 'Label for zoom out button'),
    size: "2em"
  })), React.createElement(Button, {
    borderless: true,
    onClick: toggleZoomMenu
  }, scale * 100, "%"), React.createElement(IconButton, {
    onClick: handleZoomIn
  }, React.createElement(IconAdd, {
    accessibilityLabel: T.phrase('Zoom in', {}, 'Label for zoom in button'),
    size: "2em"
  }))), visible && React.createElement(Dropdown, {
    visible: visible,
    left: "0",
    zIndex: 5,
    onClickOutside: toggleZoomMenu
  }, React.createElement(Menu, {
    accessibilityLabel: T.phrase('Zoom dropdown menu', {}, 'Label for dropdown menu with zoom options')
  }, zoomOptions.map(zoom => React.createElement(Item, {
    key: zoom.scale,
    onClick: zoom.handleOnClick
  }, zoom.label)))));
}
ZoomControls.propTypes = {
  scale: _pt.number,
  onScale: _pt.func.isRequired
};