import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-negated-condition */
import React from 'react';
import { rangeFromDayBundle, rangeToDayBundle, dateMediumBundle } from '../../messages';
import DateTime from '../DateTime';
import Empty from '../Empty';
import createDateTime from '../../utils/createDateTime';

/** Display a range between 2 timestamps. */
export default class DateTimeRange extends React.PureComponent {
  render() {
    const {
      from,
      locale,
      separator,
      timezone,
      to
    } = this.props;

    if (!from || !to) {
      return React.createElement(Empty, null);
    }

    const fromTimeStamp = createDateTime(from, {
      locale,
      timezone
    });
    const toTimeStamp = createDateTime(to, {
      locale,
      timezone
    });

    if ("production" !== process.env.NODE_ENV) {
      if (!fromTimeStamp.isValid || !toTimeStamp.isValid) {
        throw new Error('Invalid timestamps passed to `DateTimeRange`.');
      }

      if (toTimeStamp < fromTimeStamp) {
        throw new Error('Invalid chronological order of timestamps passed to `DateTimeRange`.');
      }
    }

    const props = {
      locale,
      timezone
    };
    let fromFormat = rangeFromDayBundle.get(locale);
    let toFormat;

    if (fromTimeStamp.year !== toTimeStamp.year) {
      fromFormat = dateMediumBundle.get(locale);
      toFormat = dateMediumBundle.get(locale);
    } else if (fromTimeStamp.month !== toTimeStamp.month) {
      toFormat = dateMediumBundle.get(locale);
    } else if (fromTimeStamp.day !== toTimeStamp.day) {
      toFormat = rangeToDayBundle.get(locale);
    } else {
      return React.createElement(DateTime, _extends({}, props, {
        medium: true,
        noTime: true,
        noTimezone: true,
        at: toTimeStamp
      }));
    }

    return React.createElement("span", null, React.createElement(DateTime, _extends({}, props, {
      at: fromTimeStamp,
      format: fromFormat
    })), separator, React.createElement(DateTime, _extends({}, props, {
      at: toTimeStamp,
      format: toFormat
    })));
  }

}

_defineProperty(DateTimeRange, "propTypes", {
  from: _pt.any,
  locale: _pt.any,
  separator: _pt.string,
  timezone: _pt.oneOfType([_pt.string, _pt.bool]),
  to: _pt.any
});

_defineProperty(DateTimeRange, "defaultProps", {
  from: null,
  separator: ' â€“ ',
  to: null
});