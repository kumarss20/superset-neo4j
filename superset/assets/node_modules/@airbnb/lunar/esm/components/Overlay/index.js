import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import throttle from 'lodash/throttle';
import debounce from 'lodash/debounce';
import { scrollingParents } from '../../utils/isScrollable';
import Portal from './Portal';

/** An overlay that masks the entire viewport and displays a chunk of content over it. */
export default class Overlay extends React.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      x: 0,
      y: 0
    });

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "scrollers", []);

    _defineProperty(this, "addScrollListeners", debounce(() => {
      const {
        current
      } = this.ref;
      this.removeScrollListeners();
      /* istanbul ignore next: refs are hard */

      if (current) {
        this.scrollers = scrollingParents(current);
        this.scrollers.forEach(node => {
          node.addEventListener('scroll', this.handleScroll);
        });
      }
    }));

    _defineProperty(this, "removeScrollListeners", () => {
      this.scrollers.forEach(node => {
        node.removeEventListener('scroll', this.handleScroll);
      });
      this.scrollers = [];
    });

    _defineProperty(this, "handleResize", () => {
      this.forceUpdate();
    });

    _defineProperty(this, "handleScroll", throttle(() => this.props.onClose(), 100));
  }

  componentDidUpdate() {
    const {
      current
    } = this.ref;
    /* istanbul ignore next: refs are hard */

    if (current) {
      const {
        x,
        y
      } = current.getBoundingClientRect();

      if (x !== this.state.x) {
        this.setState({
          x
        });
      }

      if (y !== this.state.y) {
        this.setState({
          y
        });
      }
    }

    this.removeScrollListeners();

    if (this.props.open && this.props.noBackground) {
      this.addScrollListeners();
    }
  }

  componentWillUnmount() {
    this.removeScrollListeners();
  }

  render() {
    const {
      onClose,
      open,
      children,
      noBackground
    } = this.props;
    const {
      x,
      y
    } = this.state;
    return React.createElement("div", {
      ref: this.ref
    }, open && React.createElement(Portal, {
      x: x,
      y: y,
      noBackground: noBackground,
      onClose: onClose,
      onResize: this.handleResize
    }, children));
  }

}

_defineProperty(Overlay, "propTypes", {
  children: _pt.node,
  open: _pt.bool,
  noBackground: _pt.bool,
  onClose: _pt.func.isRequired
});

_defineProperty(Overlay, "defaultProps", {
  noBackground: false,
  open: false
});