import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import throttle from 'lodash/throttle';
import withStyles from '../../../composers/withStyles';
import FocusTrap from '../../FocusTrap';
import BasePortal from '../../Portal';
import { ESCAPE } from '../../../keys';
import { styleSheet } from './styles';
export class Portal extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      height: 0
    });

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "handleClick", event => {
      if (event.target === this.ref.current) {
        this.props.onClose();
      }
    });

    _defineProperty(this, "handleKeyDown", event => {
      if (event.key === ESCAPE) {
        this.props.onClose();
      }
    });

    _defineProperty(this, "handleResize", () => {
      this.props.onResize();
    });

    _defineProperty(this, "handleResizeThrottled", throttle(
    /* istanbul ignore next */
    () => this.handleResize(), 100));

    _defineProperty(this, "handleScroll", () => {
      const {
        current
      } = this.ref;

      if (current && !this.props.noBackground) {
        this.setState(state => ({
          height: Math.max(current.scrollHeight, state.height)
        }));
      }
    });

    _defineProperty(this, "handleScrollThrottled", throttle(
    /* istanbul ignore next */
    () => this.handleScroll(), 100));
  }

  componentDidMount() {
    window.addEventListener('keydown', this.handleKeyDown);
    window.addEventListener('resize', this.handleResizeThrottled);

    if (!this.props.noBackground) {
      document.body.style.overflow = 'hidden';
    }
  }

  componentWillUnmount() {
    window.removeEventListener('keydown', this.handleKeyDown);
    window.removeEventListener('resize', this.handleResizeThrottled);

    if (!this.props.noBackground) {
      document.body.style.overflow = '';
    }
  }

  render() {
    const {
      cx,
      children,
      styles,
      x,
      y,
      noBackground
    } = this.props;
    const {
      height
    } = this.state;
    return React.createElement(BasePortal, null, React.createElement(FocusTrap, null, React.createElement("div", {
      ref: this.ref,
      className: cx(styles.container, noBackground ? styles.noBg : styles.opaque),
      role: "presentation",
      onClick: this.handleClick,
      onScroll: this.handleScrollThrottled
    }, React.createElement("div", {
      className: cx(styles.content, {
        paddingTop: y,
        marginLeft: x,
        minHeight: height
      })
    }, children))));
  }

}

_defineProperty(Portal, "propTypes", {
  children: _pt.node,
  noBackground: _pt.bool.isRequired,
  onClose: _pt.func.isRequired,
  onResize: _pt.func.isRequired,
  x: _pt.number,
  y: _pt.number
});

export default withStyles(styleSheet)(Portal);