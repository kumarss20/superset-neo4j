import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import shallowEqual from 'shallowequal';
import Autocomplete from '../Autocomplete';
import Spacing from '../Spacing';
import Chip from './private/Chip';

/** An uncontrolled input field for selecting multiple values via an autocomplete. */
export default class Multicomplete extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      values: new Set(this.props.value)
    });

    _defineProperty(this, "isItemSelected", (item, value) => this.state.values.has(value));

    _defineProperty(this, "handleChange", (value, event) => {
      this.props.onChange(Array.from(this.state.values), event);
    });

    _defineProperty(this, "handleSelectItem", (value, item, event) => {
      if (this.props.onSelectItem) {
        this.props.onSelectItem(value, item, event);
      }

      if (!value || !item) {
        return;
      }

      this.setState(prevState => ({
        values: new Set(prevState.values).add(value)
      }), () => {
        this.props.onChange(Array.from(this.state.values), event);
      });
    });

    _defineProperty(this, "handleChipClick", (value, event) => {
      this.setState(prevState => {
        const values = new Set(prevState.values);
        values.delete(value);
        return {
          values
        };
      }, () => {
        this.props.onChange(Array.from(this.state.values), event);
      });
    });
  }

  componentDidUpdate(prevProps) {
    if (!shallowEqual(this.props.value, prevProps.value)) {
      this.setState({
        values: new Set(this.props.value)
      });
    }
  }

  render() {
    const _this$props = this.props,
          props = _objectWithoutPropertiesLoose(_this$props, ["onChange"]);

    const selected = Array.from(this.state.values);
    return React.createElement(Autocomplete, _extends({
      clearOnSelect: true
    }, props, {
      isItemSelected: this.isItemSelected,
      value: "",
      onChange: this.handleChange,
      onSelectItem: this.handleSelectItem
    }), selected.length > 0 && React.createElement("div", null, selected.map(item => React.createElement(Spacing, {
      key: item,
      inline: true,
      right: 1,
      top: 1
    }, React.createElement(Chip, {
      value: item,
      onClick: this.handleChipClick
    })))));
  }

}

_defineProperty(Multicomplete, "propTypes", {
  onChange: _pt.func.isRequired,
  value: _pt.arrayOf(_pt.string)
});

_defineProperty(Multicomplete, "defaultProps", {
  value: []
});