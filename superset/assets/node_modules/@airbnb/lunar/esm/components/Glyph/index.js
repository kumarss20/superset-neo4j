import _pt from "prop-types";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import useStyles from '../../hooks/useStyles'; // https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric

const fractionProp = mutuallyExclusiveTrueProps('diagonal', 'stacked'); // istanbul ignore next

function getNumericVariant(props) {
  const variants = [];

  if (props.diagonal) {
    variants.push('diagonal-fractions');
  } else if (props.stacked) {
    variants.push('stacked-fractions');
  }

  if (props.ordinal) {
    variants.push('ordinal');
  }

  if (props.slashed) {
    variants.push('slashed-zero');
  }

  if (props.tabular) {
    variants.push('tabular-nums');
  }

  return variants.length > 0 ? variants.join(' ') : 'normal';
}

/** Controls hidden and alternative glyphs within the current font. */
function Glyph(_ref) {
  let {
    children
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children"]);

  const [, cx] = useStyles(() => ({}));
  return React.createElement("span", {
    className: cx({
      fontVariantNumeric: getNumericVariant(props)
    })
  }, children);
}

Glyph.propTypes = {
  tabular: _pt.bool,
  slashed: _pt.bool,
  ordinal: _pt.bool,
  children: _pt.any.isRequired,
  diagonal: fractionProp,
  stacked: fractionProp
};
export default Glyph;