import _pt from "prop-types";
import React from 'react';
import useStyles from '../../hooks/useStyles';
import T from '../Translate';
import Text from '../Text';
import StatusText from '../StatusText';
import FormErrorMessage from '../FormErrorMessage';
import partitionFieldProps from './partitionFieldProps';
import Prefix from './Prefix';
import Suffix from './Suffix';
import { styleSheet } from './styles';
export { partitionFieldProps, Prefix, Suffix };
/** A abstract form field wrapper that handles labels, affixes, errors, states, and more. */

export default function FormField(_ref) {
  let {
    children,
    compact,
    compactSpacing,
    disabled,
    errorMessage,
    hideLabel,
    hideOptionalLabel,
    id,
    inline,
    invalid,
    label,
    labelDescription,
    large,
    noSpacing,
    optional,
    renderBeforeLabel,
    renderFullWidth,
    renderLargeLabel,
    stretchLabel,
    prefix,
    small,
    suffix,
    topAlign
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);
  const content = React.createElement("div", {
    className: cx(styles.input, inline && renderBeforeLabel && styles.input_beforeInline, inline && !renderBeforeLabel && styles.input_afterInline, hideLabel && styles.input_hideLabel, renderFullWidth && styles.input_fullWidth)
  }, prefix && React.createElement("div", {
    className: cx(styles.affix)
  }, prefix), React.createElement("div", {
    className: cx(styles.anchor)
  }, children), suffix && React.createElement("div", {
    className: cx(styles.affix)
  }, suffix));
  return React.createElement("section", {
    className: cx(styles.field, (compact || compactSpacing || small) && !noSpacing && styles.field_compactSpacing, noSpacing && styles.field_noSpacing)
  }, React.createElement("div", {
    className: cx(inline && styles.content_inline, topAlign && styles.content_topAlign)
  }, renderBeforeLabel && content, React.createElement("label", {
    htmlFor: id,
    className: cx(styles.label, stretchLabel && styles.label_stretch, hideLabel && styles.label_hidden, (inline || renderBeforeLabel) && styles.label_noSpacing)
  }, React.createElement(StatusText, {
    danger: invalid,
    muted: disabled,
    small: compact || small,
    large: large,
    bold: !renderLargeLabel
  }, label, optional && !hideOptionalLabel && React.createElement("span", {
    className: cx(styles.optional)
  }, React.createElement(Text, {
    inline: true,
    small: true,
    muted: true
  }, React.createElement(T, {
    k: "lunar.form.optional",
    phrase: "(optional)",
    context: "A form field is marked as optional"
  })))), labelDescription && React.createElement(Text, {
    small: true
  }, labelDescription)), !renderBeforeLabel && content), invalid && React.createElement(FormErrorMessage, {
    id: id,
    error: errorMessage
  }));
}
FormField.propTypes = {
  compact: _pt.bool,
  compactSpacing: _pt.bool,
  disabled: _pt.bool,
  errorMessage: _pt.string,
  field: _pt.object,
  hideLabel: _pt.bool,
  hideOptionalLabel: _pt.bool,
  inline: _pt.bool,
  invalid: _pt.bool,
  label: _pt.any.isRequired,
  labelDescription: _pt.node,
  large: _pt.bool,
  noSpacing: _pt.bool,
  optional: _pt.bool,
  prefix: _pt.node,
  small: _pt.bool,
  suffix: _pt.node,
  children: _pt.any.isRequired,
  id: _pt.string.isRequired,
  renderBeforeLabel: _pt.bool,
  renderFullWidth: _pt.bool,
  renderLargeLabel: _pt.bool,
  stretchLabel: _pt.bool,
  topAlign: _pt.bool
};