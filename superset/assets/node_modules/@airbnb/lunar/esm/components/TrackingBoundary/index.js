import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-param-reassign */
import React from 'react';
import componentName from '../../prop-types/componentName';

/** Wraps a component and provides a context stack for click and keydown tracking purposes. */
export default class TrackingBoundary extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleTrackContext", (_ref) => {
      let {
        nativeEvent
      } = _ref;
      const {
        name
      } = this.props;

      if (!name) {
        return;
      }

      if (nativeEvent.trackingContext) {
        nativeEvent.trackingContext.push(name);
      } else {
        nativeEvent.trackingContext = [name];
      }
    });
  }

  render() {
    const {
      children,
      name
    } = this.props;

    if (!name) {
      return children;
    }

    return React.createElement("tracking-boundary", {
      "data-tracking-name": name,
      onClick: this.handleTrackContext,
      onKeyDown: this.handleTrackContext
    }, children);
  }

}

_defineProperty(TrackingBoundary, "propTypes", {
  children: _pt.any.isRequired,
  name: componentName
});

_defineProperty(TrackingBoundary, "defaultProps", {
  name: ''
});