import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import useStyles from '../../hooks/useStyles';
import { STATUSES } from '../../constants';
import { styleSheetRow as styleSheet } from './styles';

/** A table row that contains multiple cells. */
function TableRow(_ref) {
  let {
    children,
    danger,
    info,
    muted,
    notice,
    success,
    warning
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "danger", "info", "muted", "notice", "success", "warning"]);

  const [styles, cx] = useStyles(styleSheet);
  return React.createElement("tr", _extends({}, props, {
    className: cx(danger && styles.row_danger, info && styles.row_info, muted && styles.row_muted, notice && styles.row_notice, success && styles.row_success, warning && styles.row_warning)
  }), children);
}

const statusPropType = mutuallyExclusiveTrueProps(...STATUSES);
TableRow.propTypes = {
  children: _pt.any.isRequired,
  danger: statusPropType,
  info: statusPropType,
  muted: statusPropType,
  notice: statusPropType,
  success: statusPropType,
  warning: statusPropType
};
export default TableRow;