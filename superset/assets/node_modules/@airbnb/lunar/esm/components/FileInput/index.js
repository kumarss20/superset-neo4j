import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import uuid from 'uuid/v4';
import IconUpload from '@airbnb/lunar-icons/lib/interface/IconUpload';
import IconAudio from '@airbnb/lunar-icons/lib/interface/IconAudio';
import IconPhoto from '@airbnb/lunar-icons/lib/interface/IconPhoto';
import IconVideo from '@airbnb/lunar-icons/lib/interface/IconVideo';
import IconClose from '@airbnb/lunar-icons/lib/interface/IconClose';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import FormInput from '../private/FormInput';
import FormField, { partitionFieldProps } from '../FormField';
import Table, { Cell } from '../Table';
import Spacing from '../Spacing';
import Text from '../Text';
import T from '../Translate';
import IconButton from '../IconButton';
import DateTime from '../DateTime';
import FormInputButton from '../private/FormInputButton';
import toBytes from '../../utils/toBytes';
const acceptProp = mutuallyExclusiveTrueProps('onlyAudio', 'onlyImages', 'onlyVideo');

/** A controlled input field for uploading files. */
export default class FileInput extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      files: [],
      id: uuid()
    });

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "handleChange", event => {
      const files = Array.from(event.currentTarget.files || []);
      this.setState({
        files
      });
      this.props.onChange(files, event);
    });

    _defineProperty(this, "handleClick", () => {
      if (this.ref.current) {
        this.ref.current.click();
      }
    });

    _defineProperty(this, "handleRemoveFile", (event, index) => {
      this.setState(prevState => ({
        files: prevState.files.filter((file, i) => i !== index)
      }), () => {
        this.props.onChange(this.state.files, event);
      });
    });
  }

  render() {
    const {
      fieldProps,
      inputProps
    } = partitionFieldProps(this.props);

    const {
      hideFileSize,
      hideFileType,
      hideLastModified,
      onlyAudio,
      onlyImages,
      onlyVideo
    } = inputProps,
          props = _objectWithoutPropertiesLoose(inputProps, ["hideFileSize", "hideFileType", "hideLastModified", "onlyAudio", "onlyImages", "onlyVideo"]);

    const {
      files,
      id
    } = this.state;
    let {
      accept
    } = inputProps;
    let Icon = IconUpload;

    if (onlyAudio) {
      accept = 'audio/*';
      Icon = IconAudio;
    } else if (onlyImages) {
      accept = 'image/*';
      Icon = IconPhoto;
    } else if (onlyVideo) {
      accept = 'video/*';
      Icon = IconVideo;
    }

    return React.createElement(FormField, _extends({}, fieldProps, {
      id: id
    }), React.createElement(FormInput, _extends({}, props, {
      hidden: true,
      id: id,
      accept: accept,
      type: "file",
      tagName: "input",
      propagateRef: this.ref,
      onChange: this.handleChange
    })), React.createElement(FormInputButton, {
      inverted: true,
      invalid: fieldProps.invalid,
      small: fieldProps.compact,
      disabled: props.disabled,
      afterIcon: React.createElement(Icon, {
        decorative: true,
        size: "1.25em"
      }),
      onClick: this.handleClick
    }, React.createElement(T, {
      k: "lunar.form.chooseFile",
      phrase: "Choose file||||Choose files",
      context: "Label when uploading multiple files",
      smartCount: props.multiple ? 0 : 1
    }), files.length > 0 && React.createElement("span", null, " (" + files.length + ")")), files.length > 0 && !fieldProps.inline && React.createElement(Spacing, {
      top: 1
    }, React.createElement(Text, {
      small: fieldProps.compact
    }, React.createElement(Table, {
      compact: true,
      striped: true
    }, React.createElement("tbody", null, files.map((file, i) => React.createElement("tr", {
      key: file.name
    }, React.createElement(Cell, null, file.name), !hideFileSize && React.createElement(Cell, null, toBytes(file.size)), !hideLastModified && React.createElement(Cell, null, React.createElement(DateTime, {
      short: true,
      at: file.lastModified
    })), !hideFileType && React.createElement(Cell, null, file.type), React.createElement(Cell, {
      endAlign: true
    }, React.createElement(IconButton, {
      onClick: event => {
        this.handleRemoveFile(event, i);
      }
    }, React.createElement(IconClose, {
      accessibilityLabel: T.phrase('Remove chosen file', {}, {
        context: 'Label when removing a chosen file to upload',
        key: 'lunar.form.removeFile'
      })
    }))))))))));
  }

}

_defineProperty(FileInput, "propTypes", {
  onChange: _pt.func.isRequired,
  hideLastModified: _pt.bool,
  hideFileType: _pt.bool,
  hideFileSize: _pt.bool,
  onlyAudio: acceptProp,
  onlyImages: acceptProp,
  onlyVideo: acceptProp
});

_defineProperty(FileInput, "defaultProps", {
  hideFileSize: false,
  hideFileType: false,
  hideLastModified: false,
  onlyAudio: false,
  onlyImages: false,
  onlyVideo: false
});