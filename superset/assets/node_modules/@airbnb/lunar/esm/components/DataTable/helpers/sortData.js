import { SortDirection } from 'react-virtualized';

// https://stackoverflow.com/questions/29829205/sort-an-array-so-that-null-values-always-come-last
function sort(a, b, ascending) {
  if (ascending === void 0) {
    ascending = false;
  }

  // Equal items sort equally.
  if (a === b) {
    return 0;
  } // Null sort after anything else.


  if (a == null) {
    return 1;
  }

  if (b == null) {
    return -1;
  }

  if (ascending) {
    // @ts-ignore
    return a < b ? -1 : 1;
  } // @ts-ignore


  return a < b ? 1 : -1;
}

function defaultSortValueAccessor(d, sortByKey) {
  return d.data[sortByKey];
}

function sortList(list, keys, sortBy, sortDirection, sortByValue) {
  if (sortByValue === void 0) {
    sortByValue = defaultSortValueAccessor;
  }

  if (sortBy && keys.includes(sortBy)) {
    if (sortDirection === SortDirection.ASC) {
      return [...list].sort((a, b) => sort(sortByValue(a, sortBy), sortByValue(b, sortBy), true));
    }

    return [...list].sort((a, b) => sort(sortByValue(a, sortBy), sortByValue(b, sortBy)));
  }

  return list;
}

export default function sortData(list, keys, selectedRows, selectedRowsFirst, sortBy, sortDirection, sortByValue) {
  if (selectedRowsFirst) {
    const selectedList = [];
    const unselectedList = [];
    list.forEach(row => {
      if (Object.prototype.hasOwnProperty.call(selectedRows, row.metadata.originalIndex)) {
        selectedList.push(row);
      } else {
        unselectedList.push(row);
      }
    });
    const sortedSelectedList = sortList(selectedList, keys, sortBy, sortDirection, sortByValue);
    const sortedUnselectedList = sortList(unselectedList, keys, sortBy, sortDirection, sortByValue);
    return sortedSelectedList.concat(sortedUnselectedList);
  }

  return sortList(list, keys, sortBy, sortDirection, sortByValue);
}