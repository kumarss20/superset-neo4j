function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import sortData from './sortData';

/*  Iterate over the sortedDataList in state to flatten out children stashed in metadata */
export default function expandData(sortedData, expandedRows, selectedRows, selectedRowsFirst, sortBy, keys, sortDirection) {
  const expandedData = [];
  sortedData.forEach((row, idx) => {
    expandedData.push(_extends({}, row, {
      metadata: _extends({}, row.metadata, {
        preExpandedIndex: idx
      })
    }));

    if (row.metadata.originalIndex !== undefined && expandedRows.has(row.metadata.originalIndex)) {
      const children = sortData(row.metadata.children, keys, selectedRows, selectedRowsFirst, sortBy, sortDirection);
      children.forEach(child => {
        expandedData.push(_extends({}, child, {
          metadata: _extends({}, child.metadata, {
            parentIndex: idx,
            parentOriginalIndex: row.metadata.originalIndex
          })
        }));
      });
    }
  });
  return expandedData;
}