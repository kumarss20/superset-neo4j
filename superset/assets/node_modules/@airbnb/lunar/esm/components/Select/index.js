import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { childrenOfType, forbidExtraProps } from 'airbnb-prop-types';
import uuid from 'uuid/v4';
import BaseSelect from '../private/BaseSelect';
import FormField, { partitionFieldProps } from '../FormField';

/** A controlled select field. */
export default class Select extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      id: uuid()
    });
  }

  render() {
    const {
      children,
      fieldProps,
      inputProps
    } = partitionFieldProps(this.props);
    const {
      id
    } = this.state;
    return React.createElement(FormField, _extends({}, fieldProps, {
      id: id
    }), React.createElement(BaseSelect, _extends({}, inputProps, {
      id: id
    }), children));
  }

}

_defineProperty(Select, "propTypes", {
  placeholder: _pt.string,
  children: childrenOfType('option', 'optgroup').isRequired
});

_defineProperty(Select, "defaultProps", {
  placeholder: ''
});