import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import uuid from 'uuid/v4';
import withStyles from '../../composers/withStyles';
import BaseSelect from '../private/BaseSelect';
import FormField, { partitionFieldProps } from '../FormField';
import T from '../Translate';
import createRange from '../../utils/createRange';
import createDateTime from '../../utils/createDateTime';
import getMonths from '../../utils/getMonths';
import { styleSheet } from './styles';

/** An uncontrolled multi-select field for date and time ranges in UTC. */
export class DateTimeSelect extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "date", createDateTime(this.props.value, {
      locale: this.props.locale,
      timezone: this.props.timezone
    }).set({
      minute: 0,
      second: 0
    }));

    _defineProperty(this, "state", {
      id: uuid(),
      date: this.date,
      meridiem: this.date.get('hour') <= 11 ? 'am' : 'pm'
    });

    _defineProperty(this, "handleChange", (value, event) => {
      const {
        id
      } = event.target;
      const key = id.split('_')[1];
      this.setState(prevState => {
        let {
          date
        } = prevState;
        const meridiem = key === 'meridiem' ? value : prevState.meridiem;

        if (this.props.enable12HourClock && (key === 'hour' || key === 'meridiem')) {
          let hour = Number(key === 'hour' ? value : date.get('hour'));

          if (hour <= 12 && meridiem === 'pm') {
            hour += 12;

            if (hour === 24) {
              hour = 12;
            }
          } else if (hour >= 12 && meridiem === 'am') {
            hour -= 12;
          }

          date = date.set({
            hour
          });
        } else {
          date = date.set({
            [key]: value
          });
        }

        return {
          date,
          meridiem
        };
      }, () => {
        this.props.onChange(this.state.date.toISO(), event);
      });
    });
  }

  componentDidUpdate(prevProps) {
    const {
      value,
      locale,
      timezone
    } = this.props; // Don't set minute/second to 0 here, because when used in conjunction with the form kit,
    // the value is always passed down, causing the numbers to always reset to 0.

    if (value !== prevProps.value) {
      const date = createDateTime(value, {
        locale,
        timezone
      });
      this.setState({
        date,
        meridiem: date.get('hour') <= 11 ? 'am' : 'pm'
      });
    }
  }

  getDayRange() {
    return createRange(1, this.state.date.daysInMonth).map(day => ({
      label: day,
      value: String(day)
    }));
  }

  getCurrentValue(date, key) {
    let value = Number(date.get(key));

    if (key === 'meridiem') {
      value = this.state.meridiem;
    } else if (key === 'hour' && this.props.enable12HourClock) {
      if (value === 0) {
        value = 12;
      } else if (value > 12) {
        value -= 12;
      }
    }

    return String(value);
  }

  getHourRange() {
    return (this.props.enable12HourClock ? createRange(1, 12) : createRange(0, 23)).map(hour => ({
      label: hour,
      value: hour
    }));
  }

  getMinuteRange() {
    return createRange(0, 59, this.props.minuteStep).map(minute => ({
      label: minute.padStart(2, '0'),
      value: minute
    }));
  }

  getMonthRange() {
    return getMonths().map((month, i) => ({
      label: month,
      value: String(i + 1)
    }));
  }

  getYearRange() {
    const now = createDateTime();
    return createRange(now.year - this.props.yearPastBuffer, now.year + this.props.yearFutureBuffer).reverse().map(year => ({
      label: year,
      value: year
    }));
  }

  render() {
    const {
      fieldProps,
      inputProps
    } = partitionFieldProps(this.props);

    const {
      cx,
      name,
      styles,
      // Omit everything
      enable12HourClock,
      hideDate,
      hideTime,
      hideYear
    } = inputProps,
          restProps = _objectWithoutPropertiesLoose(inputProps, ["cx", "name", "styles", "enable12HourClock", "hideDate", "hideTime", "hideYear", "minuteStep", "yearFutureBuffer", "yearPastBuffer"]);

    const {
      id,
      date
    } = this.state;
    return React.createElement(FormField, _extends({}, fieldProps, {
      id: id
    }), React.createElement("div", {
      className: cx(styles.selects)
    }, !hideDate && React.createElement(React.Fragment, null, React.createElement(BaseSelect, _extends({}, restProps, {
      id: id + "_month",
      name: name + "[month]",
      value: this.getCurrentValue(date, 'month'),
      placeholder: T.phrase('Month', {}, {
        context: 'Month dropdown in a form datetime field',
        key: 'lunar.common.month'
      }),
      onChange: this.handleChange
    }), this.getMonthRange().map(month => React.createElement("option", {
      key: month.value,
      value: month.value
    }, month.label))), React.createElement("div", {
      className: cx(styles.spacer)
    }), React.createElement(BaseSelect, _extends({}, restProps, {
      id: id + "_day",
      name: name + "[day]",
      value: this.getCurrentValue(date, 'day'),
      placeholder: T.phrase('Day', {}, {
        context: 'Day dropdown in a form datetime field',
        key: 'lunar.common.day'
      }),
      onChange: this.handleChange
    }), this.getDayRange().map(day => React.createElement("option", {
      key: day.value,
      value: day.value
    }, day.label))), React.createElement("div", {
      className: cx(styles.spacer)
    }), !hideYear && React.createElement(BaseSelect, _extends({}, restProps, {
      id: id + "_year",
      name: name + "[year]",
      value: this.getCurrentValue(date, 'year'),
      placeholder: T.phrase('Year', {}, {
        context: 'Year dropdown in a form datetime field',
        key: 'lunar.common.year'
      }),
      onChange: this.handleChange
    }), this.getYearRange().map(year => React.createElement("option", {
      key: year.value,
      value: year.value
    }, year.label))), !hideTime && React.createElement(React.Fragment, null, React.createElement("div", {
      className: cx(styles.spacer)
    }), React.createElement("div", {
      className: cx(styles.spacer)
    }))), !hideTime && React.createElement(React.Fragment, null, React.createElement(BaseSelect, _extends({}, restProps, {
      id: id + "_hour",
      name: name + "[hour]",
      value: this.getCurrentValue(date, 'hour'),
      placeholder: T.phrase('Hour', {}, {
        context: 'Hour dropdown in a form datetime field',
        key: 'lunar.common.hour'
      }),
      onChange: this.handleChange
    }), this.getHourRange().map(hour => React.createElement("option", {
      key: hour.value,
      value: hour.value
    }, hour.label))), React.createElement("div", {
      className: cx(styles.spacer)
    }, ":"), React.createElement(BaseSelect, _extends({}, restProps, {
      id: id + "_minute",
      name: name + "[minute]",
      value: this.getCurrentValue(date, 'minute'),
      placeholder: T.phrase('Minute', {}, {
        context: 'Minute dropdown in a form datetime field',
        key: 'lunar.common.minute'
      }),
      onChange: this.handleChange
    }), this.getMinuteRange().map(minute => React.createElement("option", {
      key: minute.value,
      value: minute.value
    }, minute.label))), enable12HourClock && React.createElement(React.Fragment, null, React.createElement("div", {
      className: cx(styles.spacer)
    }), React.createElement(BaseSelect, _extends({}, restProps, {
      id: id + "_meridiem",
      name: name + "[meridiem]",
      value: this.getCurrentValue(date, 'meridiem'),
      placeholder: T.phrase('Meridiem', {}, {
        context: 'Meridiem (AM/PM) dropdown in a form datetime field',
        key: 'lunar.common.meridiem'
      }),
      onChange: this.handleChange
    }), React.createElement("option", {
      value: "am"
    }, T.phrase('AM', {}, {
      context: 'Meridiem for timestamps',
      key: 'lunar.common.meridiemAM'
    })), React.createElement("option", {
      value: "pm"
    }, T.phrase('PM', {}, {
      context: 'Meridiem for timestamps',
      key: 'lunar.common.meridiemPM'
    })))))));
  }

}

_defineProperty(DateTimeSelect, "propTypes", {
  enable12HourClock: _pt.bool,
  hideDate: _pt.bool,
  hideTime: _pt.bool,
  hideYear: _pt.bool,
  locale: _pt.any,
  minuteStep: _pt.number,
  placeholder: _pt.string,
  onChange: _pt.func.isRequired,
  timezone: _pt.oneOfType([_pt.string, _pt.bool]),
  yearFutureBuffer: _pt.number,
  yearPastBuffer: _pt.number,
  value: _pt.oneOfType([_pt.string, _pt.number, _pt.instanceOf(Date), _pt.any])
});

_defineProperty(DateTimeSelect, "defaultProps", {
  enable12HourClock: false,
  hideDate: false,
  hideTime: false,
  hideYear: false,
  minuteStep: 5,
  yearFutureBuffer: 5,
  yearPastBuffer: 80
});

export default withStyles(styleSheet)(DateTimeSelect);