import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import copy from 'copy-to-clipboard';
import IconCopy from '@airbnb/lunar-icons/lib/interface/IconCopy';
import T from '../Translate';
import Tooltip from '../Tooltip';
import Link from '../Link';

/** A component for easily copying a string of text to the clipboard. */
export default class Copy extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      copied: false
    });

    _defineProperty(this, "handleClick", event => {
      const {
        text,
        onCopy
      } = this.props;
      const result = copy(text);
      event.preventDefault();
      this.setState({
        copied: true
      });

      if (onCopy) {
        onCopy(text, result);
      }
    });

    _defineProperty(this, "handleMouseLeave", () => {
      window.setTimeout(() => {
        this.setState({
          copied: false
        });
      }, 500);
    });
  }

  render() {
    const {
      prompt,
      children,
      id,
      trackingName,
      underlined
    } = this.props;
    const element = children || // eslint-disable-next-line jsx-a11y/anchor-is-valid
    React.createElement(Link, {
      trackingName: trackingName,
      id: id
    }, React.createElement(IconCopy, {
      decorative: true
    }));
    return React.createElement(Tooltip, {
      remainOnMouseDown: true,
      content: this.state.copied ? React.createElement(T, {
        k: "lunar.copy.copied",
        phrase: "Copied!",
        context: "Text has been copied to a clipboard"
      }) : prompt || React.createElement(T, {
        k: "lunar.copy.copyToClipboard",
        phrase: "Copy to clipboard",
        context: "Message informing user to copy test to a clipboard"
      }),
      underlined: underlined
    }, React.cloneElement(element, {
      onClick: this.handleClick,
      onMouseLeave: this.handleMouseLeave
    }));
  }

}

_defineProperty(Copy, "propTypes", {
  children: _pt.element,
  id: _pt.string,
  text: _pt.string.isRequired,
  onCopy: _pt.func,
  prompt: _pt.node,
  trackingName: _pt.string,
  underlined: _pt.bool
});