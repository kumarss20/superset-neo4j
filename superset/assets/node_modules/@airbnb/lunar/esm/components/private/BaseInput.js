import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import FormInput from './FormInput';
export default class BaseInput extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleChange", event => {
      this.props.onChange(event.currentTarget.value, event);
    });
  }

  render() {
    const restProps = _extends({}, this.props);

    return React.createElement(FormInput, _extends({}, restProps, {
      tagName: "input",
      onChange: this.handleChange
    }));
  }

}

_defineProperty(BaseInput, "propTypes", {
  onChange: _pt.func.isRequired
});