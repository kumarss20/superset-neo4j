import _pt from "prop-types";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import IconCheck from '@airbnb/lunar-icons/lib/interface/IconCheck';
import IconRemove from '@airbnb/lunar-icons/lib/interface/IconRemove';
import useStyles from '../../hooks/useStyles';
import FormInput from './FormInput';
import buildInputStyles from '../../themes/buildInputStyles';

const styleSheet = theme => {
  const styles = buildInputStyles(theme);
  return _extends({}, styles, {
    checkbox: {
      padding: 0,
      margin: 0,
      marginTop: 2,
      width: 18,
      height: 18,
      display: 'block',
      lineHeight: 0,
      // Add focus styling to the checkbox icons
      '@selectors': {
        '> input:focus + span': {
          boxShadow: "0 0 3px 3px " + theme.color.core.primary[2]
        }
      }
    },
    checkbox_hideLabel: {
      display: 'block',
      marginTop: 0
    },
    input: _extends({}, styles.input, {
      width: 18,
      height: 18,
      padding: 0,
      display: 'inline-block',
      cursor: 'pointer',
      position: 'relative',
      // Checkmark
      textAlign: 'center',
      fontSize: 10,
      lineHeight: '15px',
      letterSpacing: 0,
      color: theme.color.base
    }),
    checkmark: {
      position: 'absolute',
      top: -1.5,
      left: -1.5
    },
    indeterminate: {
      position: 'absolute',
      top: -1,
      left: -1
    },
    children: {
      marginLeft: theme.unit
    }
  });
};

export default function BaseCheckBox(_ref) {
  let {
    button,
    checked,
    children,
    compact,
    disabled,
    hideLabel,
    id,
    invalid,
    indeterminate,
    onChange
  } = _ref,
      restProps = _objectWithoutPropertiesLoose(_ref, ["button", "checked", "children", "compact", "disabled", "hideLabel", "id", "invalid", "indeterminate", "onChange"]);

  const [styles, cx] = useStyles(styleSheet);

  const handleChange = event => {
    onChange(event.currentTarget.checked, event.currentTarget.value, event);
  };

  const checkbox = React.createElement("label", {
    htmlFor: id,
    className: cx(styles.checkbox, hideLabel && styles.checkbox_hideLabel)
  }, React.createElement(FormInput, _extends({}, restProps, {
    hidden: true,
    optional: true,
    checked: checked,
    disabled: disabled,
    id: id,
    invalid: invalid,
    tagName: "input",
    type: "checkbox",
    onChange: handleChange
  })), React.createElement("span", {
    className: cx(styles.input, indeterminate && styles.input_indeterminate, checked && styles.input_checked, invalid && styles.input_invalid, disabled && styles.input_disabled)
  }, checked && React.createElement("span", {
    className: cx(styles.checkmark)
  }, React.createElement(IconCheck, {
    decorative: true,
    size: "1.65em"
  })), indeterminate && React.createElement("span", {
    className: cx(styles.indeterminate)
  }, React.createElement(IconRemove, {
    decorative: true,
    size: "1.65em"
  }))));

  if (!button) {
    return checkbox;
  }

  return React.createElement("label", {
    htmlFor: id,
    className: cx(styles.button, indeterminate && styles.input_indeterminate, checked && styles.button_checked, invalid && styles.button_invalid, disabled && styles.button_disabled, compact && styles.button_compact)
  }, checkbox, React.createElement("div", {
    className: cx(styles.children)
  }, children));
}
BaseCheckBox.propTypes = {
  button: _pt.bool,
  children: _pt.node,
  hideLabel: _pt.bool,
  onChange: _pt.func.isRequired,
  indeterminate: _pt.bool
};