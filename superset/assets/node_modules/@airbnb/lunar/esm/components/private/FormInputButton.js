function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { StyledMutedButton } from '../MutedButton'; // This is a special type of button that matches the styles of input fields,
// and should only be used within forms or alongside inputs.
// Keep these styles in sync with `buildInputStyles`!

export default StyledMutedButton.extendStyles((_ref) => {
  let {
    color,
    pattern
  } = _ref;
  return {
    button_invalid: _extends({}, pattern.invalid, {
      '@selectors': {
        ':not([disabled]):hover': _extends({}, pattern.invalid)
      }
    }),
    button_inverted: {
      color: color.accent.text,
      borderColor: color.accent.border,
      '@selectors': {
        ':not([disabled]):hover': {
          color: color.accent.text,
          borderColor: color.accent.borderHover
        }
      }
    }
  };
});