import _pt from "prop-types";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import IconCheck from '@airbnb/lunar-icons/lib/interface/IconCheck';
import useStyles from '../../hooks/useStyles';
import FormInput from './FormInput';
import buildInputStyles from '../../themes/buildInputStyles';

const styleSheet = theme => {
  const {
    color,
    ui,
    unit
  } = theme;
  const styles = buildInputStyles(theme);
  const width = unit * 5;
  const height = unit * 3;
  return _extends({}, styles, {
    switch: {
      padding: 0,
      margin: 0,
      width,
      height,
      display: 'inline-block',
      position: 'relative',
      overflow: 'hidden',
      lineHeight: 0
    },
    toggle: {
      position: 'relative',
      display: 'inline-block',
      background: color.accent.bg,
      borderRadius: '50%',
      textAlign: 'center',
      fontSize: 10,
      lineHeight: '22px',
      verticalAlign: 'top',
      left: 0,
      transition: "left " + ui.transitionTime + ", transform " + ui.transitionTime,
      // Subtract border
      width: height - 4,
      height: height - 4
    },
    toggle_checked: {
      left: '100%',
      transform: 'translateX(-100%)'
    },
    input: _extends({}, styles.input, {
      width,
      height,
      padding: 0,
      display: 'inline-block',
      cursor: 'pointer',
      backgroundColor: styles.input.borderColor,
      borderRadius: height,
      position: 'relative'
    }),
    input_checked: _extends({}, styles.input_checked, {
      color: styles.input_checked.borderColor
    }),
    input_invalid: _extends({}, styles.input_invalid, {
      backgroundColor: styles.input_invalid.borderColor
    }),
    input_disabled: _extends({}, styles.input_disabled, {
      backgroundColor: styles.input_disabled.borderColor
    }),
    checkmark: {
      position: 'absolute',
      top: 2.5,
      left: 2.5
    }
  });
};

export default function BaseSwitch(_ref) {
  let {
    checked,
    disabled,
    id,
    invalid,
    onChange
  } = _ref,
      restProps = _objectWithoutPropertiesLoose(_ref, ["checked", "disabled", "id", "invalid", "onChange"]);

  const [styles, cx] = useStyles(styleSheet);

  const handleChange = event => {
    onChange(event.currentTarget.checked, event.currentTarget.value, event);
  };

  return React.createElement("label", {
    htmlFor: id,
    className: cx(styles.switch)
  }, React.createElement(FormInput, _extends({}, restProps, {
    hidden: true,
    optional: true,
    checked: checked,
    disabled: disabled,
    id: id,
    invalid: invalid,
    tagName: "input",
    type: "checkbox",
    onChange: handleChange
  })), React.createElement("span", {
    className: cx(styles.input, checked && styles.input_checked, invalid && styles.input_invalid, disabled && styles.input_disabled)
  }, React.createElement("span", {
    className: cx(styles.toggle, checked && styles.toggle_checked)
  }, checked && React.createElement("span", {
    className: cx(styles.checkmark)
  }, React.createElement(IconCheck, {
    decorative: true,
    size: "1.5em"
  })))));
}
BaseSwitch.propTypes = {
  checked: _pt.bool,
  id: _pt.string.isRequired,
  onChange: _pt.func.isRequired
};