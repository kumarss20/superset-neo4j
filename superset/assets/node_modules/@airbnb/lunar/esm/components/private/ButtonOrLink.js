import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import removeFocusOnMouseUp from '../../utils/removeFocusOnMouseUp';
import IconAffix from './IconAffix';
export default class ButtonOrLink extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", event => {
      if (this.props.disabled) {
        event.preventDefault();
      } else if (this.props.onClick) {
        this.props.onClick(event);
      }
    });

    _defineProperty(this, "handleMouseUp", event => {
      removeFocusOnMouseUp(event);

      if (this.props.onMouseUp) {
        this.props.onMouseUp(event);
      }
    });
  }

  render() {
    const _this$props = this.props,
          {
      afterIcon,
      beforeIcon,
      children,
      disabled,
      flexAlign,
      href,
      loading,
      openInNewWindow,
      rel,
      trackingName,
      type
    } = _this$props,
          restProps = _objectWithoutPropertiesLoose(_this$props, ["afterIcon", "beforeIcon", "children", "disabled", "flexAlign", "href", "loading", "openInNewWindow", "rel", "trackingName", "type"]);

    const Tag = href ? 'a' : 'button';
    const props = {}; // Determine props based on element type

    if (href) {
      props.href = href;
      props.rel = rel;

      if (openInNewWindow) {
        props.target = '_blank';

        if (props.rel === undefined) {
          props.rel = 'noopener noreferrer';
        }
      }
    } else {
      props.disabled = disabled || loading || false;
      props.type = type || 'button';
    }

    return (// @ts-ignore [ts] JSX element type 'Component' does not have any construct or call signatures. [2604]
      React.createElement(Tag, _extends({}, restProps, props, {
        "data-tracking-name": trackingName,
        onClick: this.handleClick,
        onMouseUp: this.handleMouseUp
      }), !loading && beforeIcon && React.createElement(IconAffix, {
        before: true,
        flex: flexAlign
      }, beforeIcon), React.createElement("span", null, children), !loading && afterIcon && React.createElement(IconAffix, {
        after: true,
        flex: flexAlign
      }, afterIcon))
    );
  }

}

_defineProperty(ButtonOrLink, "propTypes", {
  afterIcon: _pt.node,
  beforeIcon: _pt.node,
  children: _pt.any.isRequired,
  disabled: _pt.bool,
  flexAlign: _pt.bool,
  href: _pt.string,
  loading: _pt.bool,
  onClick: _pt.func,
  onMouseUp: _pt.func,
  openInNewWindow: _pt.bool,
  rel: _pt.string,
  trackingName: _pt.string,
  type: _pt.oneOf(['button', 'submit', 'reset'])
});

_defineProperty(ButtonOrLink, "defaultProps", {
  afterIcon: null,
  beforeIcon: null,
  disabled: false,
  flexAlign: false,
  href: '',
  loading: false,
  openInNewWindow: false,
  type: 'button'
});