import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import uuid from 'uuid/v4';
import shallowEqual from 'shallowequal';
import proxyComponent from '../../utils/proxyComponent';
import FormField, { partitionFieldProps } from '../FormField';
import CheckBox from '../CheckBox';

/** Manage multiple checkboxes with the same input `name`. */
export default class CheckBoxController extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      id: uuid(),
      values: new Set(this.props.value)
    });

    _defineProperty(this, "handleChange", (checked, value, event) => {
      this.setState(prevState => {
        const values = new Set(prevState.values);

        if (checked) {
          values.add(value);
        } else {
          values.delete(value);
        }

        return {
          values
        };
      }, () => {
        this.props.onChange(Array.from(this.state.values), event);
      });
    });

    _defineProperty(this, "renderCheckBox", proxyComponent(CheckBox, (_ref) => {
      let {
        value
      } = _ref,
          props = _objectWithoutPropertiesLoose(_ref, ["value"]);

      const {
        inputProps
      } = partitionFieldProps(this.props);
      const {
        id,
        values
      } = this.state;
      return React.createElement(CheckBox, _extends({
        compactSpacing: true
      }, props, inputProps, {
        hideOptionalLabel: true,
        id: id + "-" + value,
        value: value,
        checked: values.has(value),
        onChange: this.handleChange
      }));
    }));
  }

  componentDidUpdate(prevProps) {
    if (!shallowEqual(this.props.value, prevProps.value)) {
      this.setState({
        values: new Set(this.props.value)
      });
    }
  }

  render() {
    const {
      children,
      fieldProps
    } = partitionFieldProps(this.props);
    const {
      id,
      values
    } = this.state;
    return React.createElement(FormField, _extends({}, fieldProps, {
      id: id
    }), children(this.renderCheckBox, Array.from(values), id));
  }

}

_defineProperty(CheckBoxController, "propTypes", {
  children: _pt.func.isRequired,
  name: _pt.string.isRequired,
  onChange: _pt.func.isRequired,
  value: _pt.arrayOf(_pt.string)
});

_defineProperty(CheckBoxController, "defaultProps", {
  value: []
});