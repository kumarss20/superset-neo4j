import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import DayPicker from 'react-day-picker';
import withStyles from '../../composers/withStyles';
import datePickerStyles from '../private/datePickerStyles';
import getMonths from '../../utils/getMonths';
import getWeekdays from '../../utils/getWeekdays';
import { getClassNames, getCustomModifiers } from '../../utils/datePicker';
import NavBar from './Picker/NavBar';

/**
 * Display a date picker.
 * Utilizes [react-day-picker](http://react-day-picker.js.org/api/DayPicker/).
 */
export class DatePicker extends React.Component {
  render() {
    const {
      cx,
      disabledDays,
      firstDayOfWeek,
      fromMonth,
      initialMonth,
      locale,
      modifiers,
      month,
      numberOfMonths,
      onBlur,
      onDayClick,
      onDayMouseEnter,
      onFocus,
      onMonthChange,
      onResetClick,
      onTodayButtonClick,
      pagedNavigation,
      pickerRef,
      selectedDays,
      showResetButton,
      styles,
      todayButton,
      toMonth
    } = this.props;
    return React.createElement(DayPicker, {
      ref: pickerRef,
      weekdaysShort: getWeekdays('short', true),
      classNames: getClassNames('calendar', styles, this.props),
      disabledDays: disabledDays,
      firstDayOfWeek: firstDayOfWeek,
      fromMonth: fromMonth,
      initialMonth: initialMonth,
      locale: locale,
      modifiers: getCustomModifiers(modifiers, styles, cx),
      month: month,
      months: getMonths(),
      navbarElement: props => React.createElement(NavBar, _extends({}, props, {
        noFooter: !todayButton,
        showResetButton: showResetButton,
        onResetClick: onResetClick
      })),
      fixedWeeks: Boolean(numberOfMonths && numberOfMonths > 1),
      weekdaysLong: getWeekdays('long', true),
      toMonth: toMonth,
      todayButton: todayButton,
      selectedDays: selectedDays,
      pagedNavigation: pagedNavigation,
      numberOfMonths: numberOfMonths,
      onTodayButtonClick: onTodayButtonClick,
      onMonthChange: onMonthChange,
      onFocus: onFocus,
      onDayMouseEnter: onDayMouseEnter,
      onDayClick: onDayClick,
      onBlur: onBlur
    });
  }

}

_defineProperty(DatePicker, "propTypes", {
  locale: _pt.string,
  pickerRef: _pt.oneOfType([_pt.string, _pt.func, _pt.any, _pt.oneOf([null])]),
  showResetButton: _pt.bool,
  onResetClick: _pt.func
});

_defineProperty(DatePicker, "defaultProps", {
  firstDayOfWeek: 0,
  numberOfMonths: 1,
  pagedNavigation: false
});

export default withStyles(datePickerStyles)(DatePicker);