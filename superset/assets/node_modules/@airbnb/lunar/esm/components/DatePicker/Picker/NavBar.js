import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import IconArrowLeft from '@airbnb/lunar-icons/lib/interface/IconArrowLeft';
import IconArrowRight from '@airbnb/lunar-icons/lib/interface/IconArrowRight';
import withStyles from '../../../composers/withStyles';
import datePickerStyles from '../../private/datePickerStyles';
import DirectionalIcon from '../../DirectionalIcon';
import IconButton from '../../IconButton';
import T from '../../Translate';

class NavBar extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleNextClick", () => {
      this.props.onNextClick();
    });

    _defineProperty(this, "handlePreviousClick", () => {
      this.props.onPreviousClick();
    });

    _defineProperty(this, "handleResetClick", () => {
      if (this.props.onResetClick) {
        this.props.onResetClick();
      }
    });
  }

  render() {
    const {
      cx,
      className,
      classNames,
      labels,
      noFooter,
      showNextButton,
      showPreviousButton,
      showResetButton,
      styles
    } = this.props;
    return React.createElement("div", {
      className: className
    }, showPreviousButton && React.createElement("div", {
      className: classNames.navButtonPrev
    }, React.createElement(IconButton, {
      tooltip: labels.previousMonth,
      onClick: this.handlePreviousClick
    }, React.createElement(DirectionalIcon, {
      direction: "left",
      left: IconArrowLeft,
      right: IconArrowRight,
      size: "1.25em",
      accessibilityLabel: labels.previousMonth
    }))), showNextButton && React.createElement("div", {
      className: classNames.navButtonNext
    }, React.createElement(IconButton, {
      tooltip: labels.nextMonth,
      onClick: this.handleNextClick
    }, React.createElement(DirectionalIcon, {
      direction: "right",
      left: IconArrowLeft,
      right: IconArrowRight,
      size: "1.25em",
      accessibilityLabel: labels.nextMonth
    }))), showResetButton && React.createElement("div", {
      className: cx(styles.resetButton, noFooter && styles.resetButton_noFooter)
    }, React.createElement("button", {
      className: cx(styles.todayButton),
      type: "button",
      onClick: this.handleResetClick
    }, React.createElement(T, {
      k: "lunar.common.reset",
      phrase: "Reset",
      context: "Reset selected dates"
    }))));
  }

}

_defineProperty(NavBar, "propTypes", {
  onResetClick: _pt.func,
  showResetButton: _pt.bool,
  noFooter: _pt.bool
});

_defineProperty(NavBar, "defaultProps", {
  noFooter: false,
  showResetButton: false
});

export default withStyles(datePickerStyles)(NavBar);