import _pt from "prop-types";
import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import useStyles from '../../hooks/useStyles';
import removeFocusOnMouseUp from '../../utils/removeFocusOnMouseUp';
import ProfilePhoto from '../ProfilePhoto';
import Shimmer from '../Shimmer';
import Text from '../Text';
import Spacing from '../Spacing';
import T from '../Translate';
import { styleSheet } from './styles';

/** An individual comment within a message thread. */
function MessageItem(_ref) {
  let {
    children,
    disableTitleTranslation,
    email,
    formattedTimestamp,
    horizontalSpacing,
    icon,
    imageBadgeSrc,
    imageDescription,
    imageSrc,
    important,
    info,
    loadingAuthor,
    onClickImage,
    onClickTitle,
    sending,
    source,
    title,
    titleClickDescription,
    titleTag,
    verticalSpacing,
    warning
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);

  const getAvatar = () => {
    if (loadingAuthor) {
      return React.createElement(Shimmer, {
        width: 32,
        height: 32,
        radius: "50%"
      });
    }

    let profilePhoto = null;

    if (imageSrc) {
      profilePhoto = React.createElement(ProfilePhoto, {
        imageSrc: imageSrc,
        size: 4,
        title: imageDescription || title
      });
    } else if (icon) {
      profilePhoto = React.createElement(Spacing, {
        left: 2,
        top: 0.5
      }, icon);
    }

    const avatar = imageBadgeSrc ? React.createElement(React.Fragment, null, profilePhoto, React.createElement("div", {
      className: cx(styles.profileBadge)
    }, React.createElement(ProfilePhoto, {
      imageSrc: imageBadgeSrc,
      size: 2,
      title: T.phrase('Profile photo badge', {}, {
        context: 'Profile photo descriptive image text within a message bubble',
        key: 'lunar.message.photoLabel'
      })
    }))) : profilePhoto;

    if (onClickImage) {
      return React.createElement("button", {
        className: cx(styles.resetButton),
        type: "button",
        title: imageDescription || title,
        onClick: onClickImage,
        onMouseUp: removeFocusOnMouseUp
      }, avatar);
    }

    return avatar;
  };

  const getTitle = () => {
    if (loadingAuthor) {
      return React.createElement(Shimmer, {
        width: 150,
        height: 14
      });
    }

    const formatedTitle = disableTitleTranslation ? React.createElement("span", {
      className: "notranslate"
    }, title) : title;

    if (onClickTitle) {
      return React.createElement("button", {
        className: cx(styles.resetButton),
        type: "button",
        title: titleClickDescription || title,
        onClick: onClickTitle,
        onMouseUp: removeFocusOnMouseUp
      }, React.createElement(Text, {
        bold: true
      }, formatedTitle));
    }

    return React.createElement(Text, {
      bold: true
    }, formatedTitle);
  };

  const timestamp = source ? T.phrase('%{time} via %{source}', {
    time: formattedTimestamp,
    source
  }, {
    context: 'Timestamp and source within a message bubble',
    key: 'lunar.message.source'
  }) : formattedTimestamp;
  return React.createElement("div", {
    className: cx(styles.container, horizontalSpacing && styles.container_horizontalSpacing, verticalSpacing && styles.container_verticalSpacing, !!(important || info || warning) && styles.container_withStripe, important && styles.container_important, info && styles.container_info, warning && styles.container_warning)
  }, React.createElement("div", {
    className: cx(styles.grid)
  }, React.createElement("div", {
    className: cx(styles.relative)
  }, getAvatar()), React.createElement("div", null, React.createElement(Spacing, {
    bottom: 0.5
  }, React.createElement("div", {
    className: cx(styles.title)
  }, React.createElement(Spacing, {
    inline: true,
    bottom: 0.5,
    right: 1
  }, getTitle()), titleTag && React.createElement(Spacing, {
    inline: true,
    bottom: 0.5,
    right: 1
  }, React.createElement("div", {
    className: cx(styles.tag)
  }, React.createElement(Text, {
    micro: true,
    muted: true
  }, titleTag))), React.createElement(Text, {
    small: true,
    muted: true
  }, timestamp)), email && React.createElement(Text, {
    small: true,
    muted: true
  }, React.createElement(T, {
    html: true,
    k: "lunar.message.fromUser",
    phrase: "From: %{email}",
    email: email,
    context: "Who the message is from"
  }))), React.createElement("div", {
    className: cx(styles.wordBreak)
  }, children))), sending && React.createElement("div", {
    className: cx(styles.sendingOverlay)
  }));
} // add color flags here


const stripeColorTypePropType = mutuallyExclusiveTrueProps('important', 'info', 'warning');
MessageItem.propTypes = {
  verticalSpacing: _pt.bool,
  titleTag: _pt.string,
  titleClickDescription: _pt.string,
  title: _pt.string.isRequired,
  source: _pt.string,
  sending: _pt.bool,
  onClickTitle: _pt.func,
  onClickImage: _pt.func,
  loadingAuthor: _pt.bool,
  imageSrc: _pt.string,
  imageDescription: _pt.string,
  imageBadgeSrc: _pt.string,
  icon: _pt.node,
  horizontalSpacing: _pt.bool,
  formattedTimestamp: _pt.string.isRequired,
  email: _pt.node,
  disableTitleTranslation: _pt.bool,
  children: _pt.any.isRequired,
  important: stripeColorTypePropType,
  info: stripeColorTypePropType,
  warning: stripeColorTypePropType
};
export default MessageItem;