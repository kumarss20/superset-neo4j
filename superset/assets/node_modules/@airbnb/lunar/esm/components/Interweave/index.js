import _pt from "prop-types";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import BaseInterweave from 'interweave';
import { EmailMatcher, UrlMatcher } from 'interweave-autolink';
import { EmojiMatcher, useEmojiData } from 'interweave-emoji';
import Core from '../..';
import EmailFactory from './factories/Email';
import UrlFactory from './factories/Url';
import transformer from './factories/transformer';
export const globalMatchers = [];
export const globalFilters = [];
const emojiOptions = {
  convertEmoticon: false,
  convertShortcode: true,
  convertUnicode: true,
  enlargeThreshold: 3
};
export const urlMatcher = new UrlMatcher('url', {
  customTLDs: ['tools']
}, UrlFactory);
export const emailMatcher = new EmailMatcher('email', {}, EmailFactory);
export const emojiMatcher = new EmojiMatcher('emoji', emojiOptions);
export const emojiMatcherWithEmoticons = new EmojiMatcher('emoji', _extends({}, emojiOptions, {
  convertEmoticon: true
}));

/**
 * Safely render HTML, filter attributes, autowrap text with matchers, render emoji characters,
 * and much more.
 */
export default function Interweave(_ref) {
  let {
    content,
    filters = [],
    matchers = [],
    onlyMatchers = [],
    withEmoticons
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["content", "filters", "matchers", "onlyMatchers", "withEmoticons"]);

  const [, emojiSource] = useEmojiData({
    avoidFetch: process.env.NODE_ENV === 'test',
    throwErrors: false
  });
  const finalFilters = [...globalFilters, ...filters];
  let finalMatchers = [...globalMatchers, emailMatcher, urlMatcher, withEmoticons ? emojiMatcherWithEmoticons : emojiMatcher, ...matchers];

  if (onlyMatchers.length > 0) {
    finalMatchers = finalMatchers.filter(matcher => onlyMatchers.includes(matcher.propName));
  }

  return React.createElement(BaseInterweave, _extends({
    newWindow: true,
    content: content,
    emojiSize: "1.25em",
    filters: finalFilters,
    matchers: finalMatchers,
    transform: transformer
  }, props, {
    emojiPath: Core.settings.emojiCDN,
    emojiSource: emojiSource
  }));
}
Interweave.propTypes = {
  large: _pt.bool,
  onlyMatchers: _pt.arrayOf(_pt.string),
  small: _pt.bool,
  withEmoticons: _pt.bool
};