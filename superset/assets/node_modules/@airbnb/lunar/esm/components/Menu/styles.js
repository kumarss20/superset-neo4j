function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

export const styleSheet = (_ref) => {
  let {
    color,
    ui,
    pattern,
    unit
  } = _ref;
  return {
    menu: _extends({}, pattern.box, {
      margin: 0,
      padding: unit + "px 0",
      backgroundColor: color.accent.bg,
      listStyle: 'none',
      '@selectors': {
        '> li': {
          position: 'relative'
        },
        // These are jank. Better way?
        '> li:first-child > *': {
          borderTopLeftRadius: ui.borderRadius,
          borderTopRightRadius: ui.borderRadius
        },
        '> li:last-child > *': {
          borderBottomLeftRadius: ui.borderRadius,
          borderBottomRightRadius: ui.borderRadius
        }
      }
    }),
    menu_scrollable: {
      overflowY: 'auto'
    }
  };
};
export const styleSheetItem = (_ref2) => {
  let {
    color,
    font,
    pattern,
    unit,
    transition
  } = _ref2;
  return {
    item: _extends({}, transition.box, {}, font.textRegular, {
      width: '100%',
      padding: unit + "px " + 1.5 * unit + "px",
      border: 0,
      textAlign: 'left',
      backgroundColor: 'transparent',
      cursor: 'pointer',
      textDecoration: 'none',
      outlineOffset: '-3px',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      color: color.accent.text,
      ':hover': {
        backgroundColor: color.accent.bgHover,
        color: color.core.neutral[6]
      },
      '@selectors': {
        // Fix content
        '> span': {
          flexGrow: 1
        },
        // Fix icons
        '> div': {
          flexGrow: 0,
          margin: 0,
          ':first-child': {
            marginRight: unit
          },
          ':last-child': {
            marginLeft: unit
          }
        }
      }
    }),
    item_spacious: {
      padding: unit * 2
    },
    item_disabled: _extends({}, pattern.disabled),
    item_highlighted: {
      backgroundColor: color.accent.bgHover
    },
    submenu: {
      position: 'absolute',
      top: -1,
      left: '99%'
    }
  };
};
export const styleSheetRow = (_ref3) => {
  let {
    unit
  } = _ref3;
  return {
    item: {
      display: 'block',
      width: '100%',
      padding: unit,
      border: 0,
      textAlign: 'left'
    },
    item_spacious: {
      padding: unit * 2
    }
  };
};
export const styleSheetSeparator = (_ref4) => {
  let {
    color,
    unit
  } = _ref4;
  return {
    separator: {
      marginTop: unit,
      marginBottom: unit,
      padding: 0,
      border: 0,
      height: 1,
      background: color.accent.border
    }
  };
};