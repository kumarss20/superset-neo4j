import _pt from "prop-types";
import React, { useState } from 'react';
import IconCaretLeft from '@airbnb/lunar-icons/lib/interface/IconCaretLeft';
import IconCaretRight from '@airbnb/lunar-icons/lib/interface/IconCaretRight';
import iconComponent from '../../prop-types/iconComponent';
import useStyles from '../../hooks/useStyles';
import ButtonOrLink from '../private/ButtonOrLink';
import Text from '../Text';
import DirectionalIcon from '../DirectionalIcon';
import { styleSheetItem as styleSheet } from './styles';

/** An interactive item within a menu. */
function MenuItem(_ref) {
  let {
    children,
    disabled,
    highlighted,
    href = '',
    icon,
    id,
    onClick,
    openInNewWindow,
    role = 'menuitem',
    spacious,
    submenu,
    tabIndex = -1,
    tip,
    trackingName
  } = _ref;
  const [styles, cx] = useStyles(styleSheet);
  const [showSubmenu, setShowSubmenu] = useState(false);

  const handleMouseEnter = () => {
    if (submenu) {
      setShowSubmenu(true);
    }
  };

  const handleMouseLeave = () => {
    if (submenu) {
      setShowSubmenu(false);
    }
  };

  const after = submenu ? React.createElement(DirectionalIcon, {
    decorative: true,
    direction: "right",
    left: IconCaretLeft,
    right: IconCaretRight,
    size: "1.5em"
  }) : tip;
  return React.createElement("li", {
    role: "none",
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, React.createElement(ButtonOrLink, {
    className: cx(styles.item, (showSubmenu || highlighted) && styles.item_highlighted, disabled && styles.item_disabled, spacious && styles.item_spacious),
    afterIcon: after ? React.createElement(Text, {
      muted: true,
      small: true
    }, after) : null,
    "aria-expanded": showSubmenu,
    "aria-haspopup": !!submenu,
    beforeIcon: icon,
    disabled: disabled,
    href: href,
    id: id,
    openInNewWindow: openInNewWindow,
    role: role,
    tabIndex: tabIndex,
    trackingName: trackingName,
    onClick: onClick
  }, children), showSubmenu && React.createElement("div", {
    className: cx(styles.submenu)
  }, submenu));
}

MenuItem.propTypes = {
  trackingName: _pt.string,
  tip: _pt.node,
  tabIndex: _pt.number,
  submenu: _pt.node,
  spacious: _pt.bool,
  role: _pt.string,
  openInNewWindow: _pt.bool,
  onClick: _pt.func,
  id: _pt.string,
  href: _pt.string,
  highlighted: _pt.bool,
  disabled: _pt.bool,
  children: _pt.any.isRequired,
  icon: iconComponent
};
export default MenuItem;