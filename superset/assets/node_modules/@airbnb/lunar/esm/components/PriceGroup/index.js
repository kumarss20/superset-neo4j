function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import { DEFAULT_CURRENCY } from '../../constants';
import Price from '../Price';

/** Display multiple amounts across different currencies. Supports all props in `Price`. */
export default class PriceGroup extends React.PureComponent {
  render() {
    const _this$props = this.props,
          {
      amounts,
      divider
    } = _this$props,
          restProps = _objectWithoutPropertiesLoose(_this$props, ["amounts", "divider"]);

    const {
      USD
    } = amounts,
          amountsWithoutUSD = _objectWithoutPropertiesLoose(amounts, ["USD"]); // Sort the currencies so that USD is last


    const currencies = Object.keys(amountsWithoutUSD);
    currencies.sort((a, b) => a.localeCompare(b));

    if (typeof USD !== 'undefined') {
      currencies.push(DEFAULT_CURRENCY);
    } // Loop through and generate the prices


    const output = [];
    currencies.forEach((currency, i) => {
      if (i > 0) {
        output.push(React.createElement("span", {
          key: "divider-" + currency
        }, divider));
      }

      output.push(React.createElement(Price, _extends({
        key: currency
      }, restProps, {
        amount: amounts[currency],
        currency: currency
      })));
    });
    return React.createElement("span", null, output);
  }

}

_defineProperty(PriceGroup, "propTypes", {
  divider: PropTypes.string,
  amounts: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.object, PropTypes.number])).isRequired
});

_defineProperty(PriceGroup, "defaultProps", {
  divider: ', '
});