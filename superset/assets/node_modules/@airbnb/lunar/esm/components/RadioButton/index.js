import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import uuid from 'uuid/v4';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import BaseRadioButton from '../private/BaseRadioButton';
import FormField, { partitionFieldProps } from '../FormField';
import Text from '../Text';
const stateProp = mutuallyExclusiveTrueProps('checked', 'indeterminate');

/** A controlled radio button field. */
export default class RadioButton extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      // Support for RadioButtonController
      id: this.props.id || uuid()
    });
  }

  render() {
    const {
      children,
      fieldProps,
      inputProps
    } = partitionFieldProps(this.props);

    const {
      topAlign
    } = inputProps,
          restProps = _objectWithoutPropertiesLoose(inputProps, ["topAlign"]);

    const {
      id
    } = this.state;
    const {
      hideLabel
    } = fieldProps;
    return React.createElement(FormField, _extends({}, fieldProps, {
      inline: true,
      renderBeforeLabel: true,
      renderLargeLabel: true,
      stretchLabel: true,
      id: id,
      hideLabel: fieldProps.hideLabel || inputProps.button,
      renderFullWidth: inputProps.button,
      topAlign: topAlign
    }), React.createElement(BaseRadioButton, _extends({}, restProps, {
      id: id,
      hideLabel: hideLabel
    }), children || React.createElement(React.Fragment, null, React.createElement(Text, {
      bold: true
    }, fieldProps.label), fieldProps.labelDescription && React.createElement(Text, null, fieldProps.labelDescription))));
  }

}

_defineProperty(RadioButton, "defaultProps", {
  button: false,
  checked: false,
  children: null,
  indeterminate: false,
  topAlign: false
});

_defineProperty(RadioButton, "propTypes", {
  value: _pt.string.isRequired,
  topAlign: _pt.bool,
  checked: stateProp,
  indeterminate: stateProp
});