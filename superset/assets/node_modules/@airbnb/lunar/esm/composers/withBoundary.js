import _pt from "prop-types";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable react/jsx-handler-names */
import React from 'react';
import ErrorBoundary from '../components/ErrorBoundary';
import TrackingBoundary from '../components/TrackingBoundary';
import finishHOC from '../utils/finishHOC';
import Core from '..';
export default function withBoundary(name)
/* infer */
{
  return function withBoundaryFactory(WrappedComponent) {
    function WithBoundary(_ref) {
      let {
        trackingName
      } = _ref,
          restProps = _objectWithoutPropertiesLoose(_ref, ["trackingName"]);

      return React.createElement(TrackingBoundary, {
        name: trackingName || name
      }, React.createElement(ErrorBoundary, {
        name: trackingName || name,
        onCatch: Core.log
      }, React.createElement(WrappedComponent, restProps)));
    }

    WithBoundary.propTypes = {
      trackingName: _pt.string
    };
    return finishHOC('withBoundary', WithBoundary, WrappedComponent);
  };
}