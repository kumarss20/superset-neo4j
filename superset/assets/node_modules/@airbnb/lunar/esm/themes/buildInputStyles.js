function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

export default function buildInputStyles(_ref) {
  let {
    color,
    pattern,
    ui,
    unit,
    transition
  } = _ref;

  const common = _extends({}, pattern.regularButton, {}, transition.box, {
    color: color.accent.text,
    backgroundColor: color.accent.bg,
    borderWidth: 2,
    borderStyle: 'solid',
    borderColor: color.accent.border,
    borderRadius: ui.borderRadius,
    width: '100%',
    display: 'block',
    ':hover': {
      borderColor: color.accent.borderHover
    },
    ':focus': _extends({}, pattern.focused),
    '::placeholder': {
      color: color.muted
    },
    '::-ms-clear': {
      display: 'none'
    }
  });

  const commonChecked = {
    borderColor: color.core.primary[3],
    '@selectors': {
      ':hover, :focus': {
        borderColor: color.accent.borderActive
      }
    }
  };

  const commonDisabled = _extends({}, pattern.disabled, {
    borderColor: color.accent.border,
    '@selectors': {
      ':hover, :focus': {
        borderColor: color.accent.border
      }
    },
    '::placeholder': {
      color: color.accent.border
    }
  });

  const commonFocused = _extends({}, pattern.focused, {
    '@selectors': {
      ':hover, :focus': {
        borderColor: color.accent.borderActive
      }
    }
  });

  const commonInvalid = _extends({}, pattern.invalid, {
    '@selectors': {
      ':hover, :focus': {
        borderColor: color.accent.borderError
      }
    },
    '::placeholder': {
      color: color.accent.textError
    }
  });

  const commonNeutral = {
    borderColor: color.core.neutral[4],
    '@selectors': {
      ':hover, :focus': {
        borderColor: color.core.neutral[4]
      }
    }
  };
  return {
    input: _extends({}, common),
    input_important: {
      backgroundColor: color.core.danger[0]
    },
    input_compact: _extends({}, pattern.smallButton),
    input_focused: _extends({}, commonFocused),
    input_invalid: _extends({}, commonInvalid),
    input_disabled: _extends({}, commonDisabled, {
      backgroundColor: color.core.neutral[0],
      color: color.accent.text
    }),
    input_checked: _extends({}, commonChecked, {
      backgroundColor: color.core.primary[3],
      color: color.base
    }),
    input_indeterminate: _extends({}, commonNeutral, {
      backgroundColor: color.core.neutral[4],
      color: color.base
    }),
    // Blur and focus events do not fire for hidden elements,
    // so we must hide it off screen.
    input_hidden: {
      position: 'fixed',
      left: -9999
    },
    input_hasPrefix: {
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    },
    input_hasSuffix: {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    },
    input_large: _extends({}, pattern.largeButton),
    select: {
      appearance: 'none',
      paddingRight: unit * 4.5
    },
    select_compact: {
      paddingRight: unit * 3
    },
    button: _extends({}, common, {
      padding: unit * 3,
      borderRadius: ui.borderRadiusThick,
      boxShadow: ui.boxShadow,
      cursor: 'pointer',
      display: 'flex',
      width: '100%'
    }),
    button_checked: _extends({}, commonChecked),
    button_compact: {
      padding: unit * 2
    },
    button_disabled: _extends({}, commonDisabled),
    button_focused: _extends({}, commonFocused),
    button_invalid: _extends({}, commonInvalid),
    button_neutral: _extends({}, commonNeutral)
  };
}