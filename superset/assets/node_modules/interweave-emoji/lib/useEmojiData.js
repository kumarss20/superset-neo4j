"use strict";

exports.__esModule = true;
exports.resetLoaded = resetLoaded;
exports.default = useEmojiData;

var _react = _interopRequireWildcard(require("react"));

var _emojibase = require("emojibase");

var _EmojiDataManager = _interopRequireDefault(require("./EmojiDataManager"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var promises = new Map();

function resetLoaded() {
  if ("production" !== process.env.NODE_ENV) {
    promises.clear();
  }
}

function loadEmojis(locale, version, compact) {
  var set = compact ? 'compact' : 'data';
  var key = locale + ":" + version + ":" + set;
  var stubRequest = process.env.NODE_ENV === 'test' && !process.env.INTERWEAVE_ALLOW_FETCH_EMOJI || typeof global.fetch === 'undefined';

  if (promises.has(key)) {
    return promises.get(key);
  }

  var request;

  if (stubRequest) {
    var testData;

    try {
      var requireFunc = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require;
      testData = requireFunc('emojibase-test-utils/test-data.json');
    } catch (_unused) {
      testData = [];
    }

    request = Promise.resolve(testData);
  } else {
    request = (0, _emojibase.fetchFromCDN)(locale + "/" + set + ".json", version);
  }

  promises.set(key, request.then(function (response) {
    var instance = _EmojiDataManager.default.getInstance(locale);

    instance.parseEmojiData(response);
    return instance.getData();
  }));
  return promises.get(key);
}

function useEmojiData(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$avoidFetch = _ref.avoidFetch,
      avoidFetch = _ref$avoidFetch === void 0 ? false : _ref$avoidFetch,
      _ref$compact = _ref.compact,
      compact = _ref$compact === void 0 ? false : _ref$compact,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? 'en' : _ref$locale,
      _ref$throwErrors = _ref.throwErrors,
      throwErrors = _ref$throwErrors === void 0 ? false : _ref$throwErrors,
      _ref$version = _ref.version,
      version = _ref$version === void 0 ? 'latest' : _ref$version;

  var _useState = (0, _react.useState)([]),
      emojis = _useState[0],
      setEmojis = _useState[1];

  var _useState2 = (0, _react.useState)(),
      error = _useState2[0],
      setError = _useState2[1];

  (0, _react.useEffect)(function () {
    var mounted = true;

    if (!avoidFetch) {
      loadEmojis(locale, version, compact).then(function (loadedEmojis) {
        if (mounted) {
          setEmojis(loadedEmojis);
        }

        return loadedEmojis;
      }).catch(setError);
    }

    return function () {
      mounted = false;
    };
  }, [avoidFetch, compact, locale, version]);

  if (error && throwErrors) {
    throw error;
  }

  return [emojis, {
    compact: compact,
    error: error,
    locale: locale,
    version: version
  }, _EmojiDataManager.default.getInstance(locale)];
}