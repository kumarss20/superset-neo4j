"use strict";

exports.__esModule = true;
var _exportNames = {
  Emoji: true,
  EmojiProps: true,
  EmojiDataManager: true,
  EmojiMatcher: true,
  EmojiMatcherOptions: true,
  useEmojiData: true,
  UseEmojiDataOptions: true
};

var _Emoji = _interopRequireWildcard(require("./Emoji"));

exports.Emoji = _Emoji.default;
exports.EmojiProps = _Emoji.EmojiProps;

var _EmojiDataManager = _interopRequireDefault(require("./EmojiDataManager"));

exports.EmojiDataManager = _EmojiDataManager.default;

var _EmojiMatcher = _interopRequireWildcard(require("./EmojiMatcher"));

exports.EmojiMatcher = _EmojiMatcher.default;
exports.EmojiMatcherOptions = _EmojiMatcher.EmojiMatcherOptions;

var _useEmojiData = _interopRequireWildcard(require("./useEmojiData"));

exports.useEmojiData = _useEmojiData.default;
exports.UseEmojiDataOptions = _useEmojiData.UseEmojiDataOptions;

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _types[key];
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }