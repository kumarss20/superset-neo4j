import Aesthetic, { AestheticOptions, ClassName, SheetMap, StyleName } from 'aesthetic';
import { StyleSheet as Aphrodite, Extension } from 'aphrodite';
import { NativeBlock, ParsedBlock } from './types';
export default class AphroditeAesthetic<Theme extends object> extends Aesthetic<Theme, NativeBlock, ParsedBlock> {
    aphrodite: {
        StyleSheet: typeof Aphrodite;
        css(...styles: ParsedBlock[]): ClassName;
    };
    fontFaces: {
        [fontFamily: string]: NativeBlock[];
    };
    keyframes: {
        [animationName: string]: NativeBlock;
    };
    constructor(extensions?: Extension[], options?: Partial<AestheticOptions>);
    flushStyles(): void;
    isParsedBlock(block: NativeBlock | ParsedBlock): block is ParsedBlock;
    parseStyleSheet(styleSheet: SheetMap<NativeBlock>): SheetMap<ParsedBlock>;
    purgeStyles(styleName?: StyleName): void;
    transformToClassName(styles: ParsedBlock[]): ClassName;
    private handleCss;
    private handleFontFace;
    private handleGlobal;
    private handleGlobalSelector;
    private handleHierarchySelector;
    private handleKeyframe;
    private handleMedia;
    private handleNested;
    private handleProperty;
}
//# sourceMappingURL=AphroditeAesthetic.d.ts.map