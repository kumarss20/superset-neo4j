function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import Aesthetic, { GLOBAL_STYLE_NAME } from 'aesthetic';
import { getStyleElements, purgeStyles as _purgeStyles } from 'aesthetic-utils';
import { StyleSheet as Aphrodite, flushToStyleTag, resetInjectedStyle } from 'aphrodite';

var AphroditeAesthetic = function (_Aesthetic) {
  _inheritsLoose(AphroditeAesthetic, _Aesthetic);

  function AphroditeAesthetic(extensions, options) {
    var _this;

    if (extensions === void 0) {
      extensions = [];
    }

    if (options === void 0) {
      options = {};
    }

    _this = _Aesthetic.call(this, options) || this;

    _defineProperty(_assertThisInitialized(_this), "aphrodite", void 0);

    _defineProperty(_assertThisInitialized(_this), "fontFaces", {});

    _defineProperty(_assertThisInitialized(_this), "keyframes", {});

    _defineProperty(_assertThisInitialized(_this), "handleCss", function (css) {
      _this.getStyleSheetManager().injectStatements(css);
    });

    _defineProperty(_assertThisInitialized(_this), "handleFontFace", function (sheet, fontFaces, fontFamily) {
      _this.fontFaces[fontFamily] = fontFaces.map(function (face) {
        return face.toObject();
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleGlobal", function (sheet, selector, ruleset) {
      var current = sheet.ruleSets.globals || sheet.createRuleset('globals');
      current.addNested("*" + selector, ruleset);
      sheet.addRuleset(current);
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyframe", function (sheet, keyframe, animationName) {
      _this.keyframes[animationName] = keyframe.toObject();
    });

    _defineProperty(_assertThisInitialized(_this), "handleMedia", function (ruleset, query, value) {
      ruleset.addNested("@media " + query, value);
    });

    _defineProperty(_assertThisInitialized(_this), "handleNested", function (ruleset, selector, value) {
      ruleset.addNested(selector, value);
    });

    _defineProperty(_assertThisInitialized(_this), "handleProperty", function (ruleset, name, value) {
      if (name === 'animationName') {
        ruleset.addCompoundProperty(name, _this.syntax.injectKeyframes(String(value), _this.keyframes));
      } else if (name === 'fontFamily') {
        if (String(value).includes(ruleset.selector)) {
          ruleset.addProperty(name, value);
        } else {
          ruleset.addCompoundProperty(name, _this.syntax.injectFontFaces(String(value), _this.fontFaces));
        }
      } else {
        ruleset.addProperty(name, value);
      }
    });

    _this.aphrodite = Aphrodite.extend([].concat(extensions, [{
      selectorHandler: _this.handleHierarchySelector
    }, {
      selectorHandler: _this.handleGlobalSelector
    }]));

    _this.syntax.on('attribute', _this.handleNested).on('css', _this.handleCss).on('font-face', _this.handleFontFace).on('global', _this.handleGlobal).on('keyframe', _this.handleKeyframe).on('media', _this.handleMedia).on('property', _this.handleProperty).on('pseudo', _this.handleNested).on('selector', _this.handleNested);

    return _this;
  }

  var _proto = AphroditeAesthetic.prototype;

  _proto.flushStyles = function flushStyles() {
    flushToStyleTag();
  };

  _proto.isParsedBlock = function isParsedBlock(block) {
    return Boolean(block && block._name && block._definition);
  };

  _proto.parseStyleSheet = function parseStyleSheet(styleSheet) {
    return this.aphrodite.StyleSheet.create(styleSheet);
  };

  _proto.purgeStyles = function purgeStyles(styleName) {
    _purgeStyles(getStyleElements('data-aphrodite'), styleName === GLOBAL_STYLE_NAME);

    if (styleName) {
      resetInjectedStyle(styleName);
    }
  };

  _proto.transformToClassName = function transformToClassName(styles) {
    var _this$aphrodite;

    return (_this$aphrodite = this.aphrodite).css.apply(_this$aphrodite, styles);
  };

  _proto.handleGlobalSelector = function handleGlobalSelector(selector, baseSelector, callback) {
    if (selector.charAt(0) !== '*') {
      return null;
    }

    return callback(selector.slice(1));
  };

  _proto.handleHierarchySelector = function handleHierarchySelector(selector, baseSelector, callback) {
    if (selector.charAt(0) === '>') {
      return callback(baseSelector + " " + selector);
    }

    if (selector.charAt(0) === '[') {
      return callback("" + baseSelector + selector);
    }

    return null;
  };

  return AphroditeAesthetic;
}(Aesthetic);

export { AphroditeAesthetic as default };