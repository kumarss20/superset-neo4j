export default function generateEmoticonPermutations(emoticon, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$isFace = _options.isFace,
      isFace = _options$isFace === void 0 ? true : _options$isFace,
      _options$withNose = _options.withNose,
      withNose = _options$withNose === void 0 ? true : _options$withNose;
  var list = [emoticon];

  if (emoticon.toUpperCase() !== emoticon) {
    list.push.apply(list, generateEmoticonPermutations(emoticon.toUpperCase(), options));
  }

  if (isFace) {
    if (emoticon.includes('/')) {
      list.push.apply(list, generateEmoticonPermutations(emoticon.replace('/', '\\'), options));
    }

    if (emoticon.includes(')')) {
      list.push.apply(list, generateEmoticonPermutations(emoticon.replace(')', ']'), options));
      list.push.apply(list, generateEmoticonPermutations(emoticon.replace(')', '}'), options));
    }

    if (emoticon.includes('(')) {
      list.push.apply(list, generateEmoticonPermutations(emoticon.replace('(', '['), options));
      list.push.apply(list, generateEmoticonPermutations(emoticon.replace('(', '{'), options));
    }

    if (emoticon.includes(':')) {
      list.push.apply(list, generateEmoticonPermutations(emoticon.replace(':', '='), options));
    }

    if (withNose) {
      list.forEach(function (emo) {
        if (!emo.includes('-')) {
          list.push(emo.slice(0, emo.length - 1) + "-" + emo.slice(-1));
        }
      });
    }
  }

  list.sort(function (a, b) {
    return b.length - a.length;
  });
  return Array.from(new Set(list));
}