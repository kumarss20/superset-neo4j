'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultProps = exports.propTypes = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _d3Array = require('d3-array');

var _Group = require('@vx/group/build/Group');

var _Group2 = _interopRequireDefault(_Group);

var _Line = require('@vx/shape/build/shapes/Line');

var _Line2 = _interopRequireDefault(_Line);

var _Point = require('@vx/point/build/Point');

var _Point2 = _interopRequireDefault(_Point);

var _color = require('@data-ui/theme/build/color');

var _color2 = _interopRequireDefault(_color);

var _svgLabel = require('@data-ui/theme/build/svgLabel');

var _svgLabel2 = _interopRequireDefault(_svgLabel);

var _Label = require('../annotation/Label');

var _Label2 = _interopRequireDefault(_Label);

var _positionLabel = require('../utils/positionLabel');

var _positionLabel2 = _interopRequireDefault(_positionLabel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = exports.propTypes = {
  reference: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['mean', 'median', 'min', 'max'])]),
  LabelComponent: _propTypes2.default.element,
  labelOffset: _propTypes2.default.number,
  labelPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
  renderLabel: _propTypes2.default.func,
  stroke: _propTypes2.default.string,
  strokeDasharray: _propTypes2.default.string,
  strokeLinecap: _propTypes2.default.oneOf(['butt', 'square', 'round', 'inherit']),
  strokeWidth: _propTypes2.default.number,

  // all likely passed by the parent chart
  data: _propTypes2.default.array,
  getY: _propTypes2.default.func,
  xScale: _propTypes2.default.func,
  yScale: _propTypes2.default.func
};

var defaultProps = exports.defaultProps = {
  data: [],
  getY: null,
  LabelComponent: _react2.default.createElement(_Label2.default, _extends({}, _svgLabel2.default.baseTickLabel, { stroke: '#fff' })),
  labelOffset: 8,
  labelPosition: 'right',
  reference: 'mean',
  renderLabel: null,
  stroke: _color2.default.darkGray,
  strokeDasharray: null,
  strokeLinecap: 'round',
  strokeWidth: 2,
  xScale: null,
  yScale: null
};

var HorizontalReferenceLine = function (_React$PureComponent) {
  _inherits(HorizontalReferenceLine, _React$PureComponent);

  function HorizontalReferenceLine() {
    _classCallCheck(this, HorizontalReferenceLine);

    return _possibleConstructorReturn(this, (HorizontalReferenceLine.__proto__ || Object.getPrototypeOf(HorizontalReferenceLine)).apply(this, arguments));
  }

  _createClass(HorizontalReferenceLine, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          data = _props.data,
          getY = _props.getY,
          LabelComponent = _props.LabelComponent,
          labelOffset = _props.labelOffset,
          labelPosition = _props.labelPosition,
          reference = _props.reference,
          renderLabel = _props.renderLabel,
          stroke = _props.stroke,
          strokeDasharray = _props.strokeDasharray,
          strokeLinecap = _props.strokeLinecap,
          strokeWidth = _props.strokeWidth,
          xScale = _props.xScale,
          yScale = _props.yScale;

      if (!xScale || !yScale || !getY || !data.length) return null;

      var _xScale$range = xScale.range(),
          _xScale$range2 = _slicedToArray(_xScale$range, 2),
          x0 = _xScale$range2[0],
          x1 = _xScale$range2[1];

      var refNumber = reference;
      if (reference === 'mean') refNumber = (0, _d3Array.mean)(data, getY);
      if (reference === 'median') refNumber = (0, _d3Array.median)(data, getY);
      if (reference === 'max') refNumber = (0, _d3Array.max)(data, getY);
      if (reference === 'min') refNumber = (0, _d3Array.min)(data, getY);

      var scaledRef = yScale(refNumber);
      var fromPoint = new _Point2.default({ x: x0, y: scaledRef });
      var toPoint = new _Point2.default({ x: x1, y: scaledRef });
      var label = renderLabel && renderLabel(refNumber);

      return _react2.default.createElement(
        _Group2.default,
        { style: { pointerEvents: 'none' } },
        _react2.default.createElement(_Line2.default, {
          from: fromPoint,
          to: toPoint,
          stroke: stroke,
          strokeDasharray: strokeDasharray,
          strokeLinecap: strokeLinecap,
          strokeWidth: strokeWidth,
          vectorEffect: 'non-scaling-stroke'
        }),
        label && _react2.default.cloneElement(LabelComponent, _extends({
          x: toPoint.x,
          y: toPoint.y
        }, (0, _positionLabel2.default)(labelPosition, labelOffset), {
          label: label
        }))
      );
    }
  }]);

  return HorizontalReferenceLine;
}(_react2.default.PureComponent);

HorizontalReferenceLine.propTypes = propTypes;
HorizontalReferenceLine.defaultProps = defaultProps;
HorizontalReferenceLine.displayName = 'ReferenceLine';

exports.default = HorizontalReferenceLine;