'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultProps = exports.propTypes = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _curve = require('@vx/curve');

var _Group = require('@vx/group/build/Group');

var _Group2 = _interopRequireDefault(_Group);

var _LinePath = require('@vx/shape/build/shapes/LinePath');

var _LinePath2 = _interopRequireDefault(_LinePath);

var _AreaClosed = require('@vx/shape/build/shapes/AreaClosed');

var _AreaClosed2 = _interopRequireDefault(_AreaClosed);

var _color = require('@data-ui/theme/build/color');

var _color2 = _interopRequireDefault(_color);

var _defined2 = require('../utils/defined');

var _defined3 = _interopRequireDefault(_defined2);

var _findClosestDatum2 = require('../utils/findClosestDatum');

var _findClosestDatum3 = _interopRequireDefault(_findClosestDatum2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = exports.propTypes = {
  curve: _propTypes2.default.oneOf(['linear', 'cardinal', 'basis', 'monotoneX']),
  fill: _propTypes2.default.string,
  fillOpacity: _propTypes2.default.number,
  onMouseMove: _propTypes2.default.func,
  onMouseLeave: _propTypes2.default.func,
  showArea: _propTypes2.default.bool,
  showLine: _propTypes2.default.bool,
  stroke: _propTypes2.default.string,
  strokeDasharray: _propTypes2.default.string,
  strokeLinecap: _propTypes2.default.oneOf(['butt', 'square', 'round', 'inherit']),
  strokeWidth: _propTypes2.default.number,

  // all likely passed by the parent chart
  data: _propTypes2.default.array,
  getX: _propTypes2.default.func,
  getY: _propTypes2.default.func,
  xScale: _propTypes2.default.func,
  yScale: _propTypes2.default.func
};

var defaultProps = exports.defaultProps = {
  curve: 'monotoneX',
  data: [],
  fill: _color2.default.default,
  fillOpacity: 0.3,
  getX: null,
  getY: null,
  onMouseMove: null,
  onMouseLeave: null,
  showArea: false,
  showLine: true,
  stroke: _color2.default.default,
  strokeWidth: 2,
  strokeDasharray: null,
  strokeLinecap: 'round',
  xScale: null,
  yScale: null
};

var CURVE_LOOKUP = {
  linear: _curve.curveLinear,
  basis: _curve.curveBasis,
  cardinal: _curve.curveCardinal,
  monotoneX: _curve.curveMonotoneX
};

var LineSeries = function (_React$PureComponent) {
  _inherits(LineSeries, _React$PureComponent);

  function LineSeries() {
    _classCallCheck(this, LineSeries);

    return _possibleConstructorReturn(this, (LineSeries.__proto__ || Object.getPrototypeOf(LineSeries)).apply(this, arguments));
  }

  _createClass(LineSeries, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          curve = _props.curve,
          data = _props.data,
          getX = _props.getX,
          getY = _props.getY,
          fill = _props.fill,
          fillOpacity = _props.fillOpacity,
          onMouseMove = _props.onMouseMove,
          onMouseLeave = _props.onMouseLeave,
          showArea = _props.showArea,
          showLine = _props.showLine,
          stroke = _props.stroke,
          strokeWidth = _props.strokeWidth,
          strokeDasharray = _props.strokeDasharray,
          strokeLinecap = _props.strokeLinecap,
          xScale = _props.xScale,
          yScale = _props.yScale;

      if (!xScale || !yScale || !getX || !getY || !data.length) return null;
      var curveFunc = CURVE_LOOKUP[curve];
      return _react2.default.createElement(
        _Group2.default,
        {
          onMouseMove: onMouseMove && function (event) {
            var _findClosestDatum = (0, _findClosestDatum3.default)({ data: data, getX: getX, event: event, xScale: xScale }),
                datum = _findClosestDatum.datum,
                index = _findClosestDatum.index;

            onMouseMove({ event: event, data: data, datum: datum, index: index, color: fill });
          },
          onMouseLeave: onMouseLeave
        },
        showArea && _react2.default.createElement(_AreaClosed2.default, {
          data: data,
          x: getX,
          y: getY,
          xScale: xScale,
          yScale: yScale,
          fill: fill,
          fillOpacity: fillOpacity,
          stroke: 'transparent',
          strokeWidth: strokeWidth,
          curve: curveFunc,
          defined: function defined(d) {
            return (0, _defined3.default)(getY(d));
          }
        }),
        showLine && strokeWidth > 0 && _react2.default.createElement(_LinePath2.default, {
          data: data,
          x: getX,
          y: getY,
          xScale: xScale,
          yScale: yScale,
          stroke: stroke,
          strokeWidth: strokeWidth,
          strokeDasharray: strokeDasharray,
          strokeLinecap: strokeLinecap,
          curve: curveFunc,
          glyph: null,
          defined: function defined(d) {
            return (0, _defined3.default)(getY(d));
          }
        })
      );
    }
  }]);

  return LineSeries;
}(_react2.default.PureComponent);

LineSeries.propTypes = propTypes;
LineSeries.defaultProps = defaultProps;
LineSeries.displayName = 'LineSeries';

exports.default = LineSeries;