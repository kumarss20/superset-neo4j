'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  children: _propTypes2.default.node,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func
};

var defaultProps = {
  children: null,
  onFocus: null,
  onBlur: null
};

// This component wraps its children in an <a /> tag which is the most reliable way to
// support tabIndex focusing accross browsers for SVG < v2.0

var FocusBlurHandler = function (_React$PureComponent) {
  _inherits(FocusBlurHandler, _React$PureComponent);

  function FocusBlurHandler(props) {
    _classCallCheck(this, FocusBlurHandler);

    var _this = _possibleConstructorReturn(this, (FocusBlurHandler.__proto__ || Object.getPrototypeOf(FocusBlurHandler)).call(this, props));

    _this.handleOnClick = _this.handleOnClick.bind(_this);
    return _this;
  }

  _createClass(FocusBlurHandler, [{
    key: 'handleOnClick',
    value: function handleOnClick(e) {
      // eslint-disable-line class-methods-use-this
      e.preventDefault();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          onFocus = _props.onFocus,
          onBlur = _props.onBlur;


      return _react2.default.createElement(
        'a',
        { // eslint-disable-line jsx-a11y/no-static-element-interactions
          xlinkHref: (onBlur || onFocus) && '#',
          role: 'presentation',
          onBlur: onBlur,
          onFocus: onFocus,
          onClick: this.handleOnClick
        },
        children
      );
    }
  }]);

  return FocusBlurHandler;
}(_react2.default.PureComponent);

exports.default = FocusBlurHandler;


FocusBlurHandler.propTypes = propTypes;
FocusBlurHandler.defaultProps = defaultProps;
FocusBlurHandler.displayName = 'FocusBlurHandler';