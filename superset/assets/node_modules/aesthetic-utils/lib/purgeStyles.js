"use strict";

exports.__esModule = true;
exports.default = purgeStyles;

var _toArray = _interopRequireDefault(require("./toArray"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NON_GLOBAL_PREFIX = /^(#|\.|@)/;

function containsNestedRules(rule) {
  return typeof CSSStyleSheet !== 'undefined' && rule instanceof CSSStyleSheet || typeof CSSMediaRule !== 'undefined' && rule instanceof CSSMediaRule || typeof CSSSupportsRule !== 'undefined' && rule instanceof CSSSupportsRule;
}

function deleteRule(parent, ruleToDelete) {
  Array.from(parent.cssRules).some(function (rule, index) {
    if (rule === ruleToDelete && parent.cssRules[index]) {
      if (typeof parent.deleteRule === 'function') {
        parent.deleteRule(index);
      } else {
        delete parent.cssRules[index];
      }

      return true;
    }

    return false;
  });

  if (process.env.NODE_ENV === 'test') {
    parent.cssRules = parent.cssRules.filter(Boolean);
  }

  if (parent.cssRules.length === 0 && parent instanceof CSSRule) {
    if (containsNestedRules(parent.parentRule)) {
      deleteRule(parent.parentRule, parent);
    }

    if (containsNestedRules(parent.parentStyleSheet)) {
      deleteRule(parent.parentStyleSheet, parent);
    }
  }
}

function purgeRules(parent, onlyGlobals) {
  if (onlyGlobals === void 0) {
    onlyGlobals = false;
  }

  if (!parent.cssRules) {
    return;
  }

  var rulesToDelete = [];
  Array.from(parent.cssRules).forEach(function (rule) {
    if (containsNestedRules(rule)) {
      purgeRules(rule);
    }

    if (onlyGlobals && NON_GLOBAL_PREFIX.test(rule.cssText)) {
      return;
    }

    rulesToDelete.push(rule);
  });
  rulesToDelete.forEach(function (rule) {
    deleteRule(parent, rule);
  });
}

function purgeStyles(styles, onlyGlobals) {
  if (onlyGlobals === void 0) {
    onlyGlobals = false;
  }

  (0, _toArray.default)(styles).forEach(function (style) {
    style.textContent = '';

    if (containsNestedRules(style.sheet)) {
      purgeRules(style.sheet, onlyGlobals);
    }
  });
}