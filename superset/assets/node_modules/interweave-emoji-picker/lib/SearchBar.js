"use strict";

exports.__esModule = true;
exports.default = SearchBar;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Context = _interopRequireDefault(require("./Context"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SearchBar(_ref) {
  var autoFocus = _ref.autoFocus,
      searchQuery = _ref.searchQuery,
      onChange = _ref.onChange,
      onKeyUp = _ref.onKeyUp;

  var _useContext = (0, _react.useContext)(_Context.default),
      classNames = _useContext.classNames,
      messages = _useContext.messages;

  var ref = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (autoFocus && ref.current) {
      ref.current.focus();
    }
  });

  var handleChange = function handleChange(event) {
    if (ref.current) {
      onChange(event.target.value.trim(), event);
    }
  };

  return _react.default.createElement("div", {
    className: classNames.search
  }, _react.default.createElement("input", {
    ref: ref,
    "aria-label": messages.searchA11y,
    className: classNames.searchInput,
    placeholder: messages.search,
    type: "search",
    value: searchQuery,
    onChange: handleChange,
    onKeyUp: onKeyUp
  }));
}

SearchBar.propTypes = {
  autoFocus: _propTypes.default.bool.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onKeyUp: _propTypes.default.func.isRequired,
  searchQuery: _propTypes.default.string.isRequired
};