"use strict";

exports.__esModule = true;
exports.default = Picker;
exports.InternalPicker = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _interweaveEmoji = require("interweave-emoji");

var _EmojiList = _interopRequireDefault(require("./EmojiList"));

var _SkinTonePalette = _interopRequireDefault(require("./SkinTonePalette"));

var _GroupTabs = _interopRequireDefault(require("./GroupTabs"));

var _PreviewBar = _interopRequireDefault(require("./PreviewBar"));

var _SearchBar = _interopRequireDefault(require("./SearchBar"));

var _Context = _interopRequireDefault(require("./Context"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SKIN_MODIFIER_PATTERN = /1F3FB|1F3FC|1F3FD|1F3FE|1F3FF/g;

var InternalPicker = function (_React$PureComponent) {
  _inheritsLoose(InternalPicker, _React$PureComponent);

  function InternalPicker(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "allowList", void 0);

    _defineProperty(_assertThisInitialized(_this), "blockList", void 0);

    _defineProperty(_assertThisInitialized(_this), "handleClear", function () {
      if (_this.state.activeGroup === _constants.GROUP_KEY_VARIATIONS) {
        _this.setUpdatedState({
          activeGroup: _this.state.searchQuery ? _constants.GROUP_KEY_SEARCH_RESULTS : _constants.GROUP_KEY_SMILEYS_EMOTION
        }, true);
      } else {
        _this.setUpdatedState({
          commonEmojis: []
        });

        localStorage.removeItem(_constants.KEY_COMMONLY_USED);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleEnterEmoji", function (emoji, event) {
      _this.setUpdatedState({
        activeEmoji: emoji
      });

      _this.props.onHoverEmoji(emoji, event);
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyUp", function (event) {
      var _this$props$columnCou = _this.props.columnCount,
          columnCount = _this$props$columnCou === void 0 ? 10 : _this$props$columnCou;
      var _this$state = _this.state,
          activeEmoji = _this$state.activeEmoji,
          activeEmojiIndex = _this$state.activeEmojiIndex,
          emojis = _this$state.emojis,
          searchQuery = _this$state.searchQuery;

      if (!searchQuery) {
        return;
      }

      if (event.key === 'Escape') {
        event.preventDefault();

        _this.handleSearch('', event);
      } else if (event.key === 'Enter') {
        event.preventDefault();

        if (activeEmoji) {
          _this.handleSelectEmoji(activeEmoji, event);
        }
      } else {
        event.preventDefault();
        var nextIndex = -1;

        switch (event.key) {
          case 'ArrowLeft':
            nextIndex = activeEmojiIndex - 1;
            break;

          case 'ArrowRight':
            nextIndex = activeEmojiIndex + 1;
            break;

          case 'ArrowUp':
            nextIndex = activeEmojiIndex - columnCount;
            break;

          case 'ArrowDown':
            nextIndex = activeEmojiIndex + columnCount;
            break;

          default:
            return;
        }

        if (nextIndex >= 0 && nextIndex < emojis.length) {
          _this.setUpdatedState({
            activeEmojiIndex: nextIndex
          });

          _this.handleEnterEmoji(emojis[nextIndex], event);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleLeaveEmoji", function () {
      _this.setUpdatedState({
        activeEmoji: null
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleScrollGroup", function (group) {
      _this.setUpdatedState({
        activeGroup: group,
        scrollToGroup: ''
      });

      _this.props.onScrollGroup(group);
    });

    _defineProperty(_assertThisInitialized(_this), "handleSearch", function (query, event) {
      _this.setState({
        searchQuery: query
      });

      _this.handleSearchDebounced(query);

      _this.props.onSearch(query, event);
    });

    _defineProperty(_assertThisInitialized(_this), "handleSearchDebounced", (0, _debounce.default)(function (query) {
      _this.setUpdatedState({
        searchQuery: query
      });
    }, _constants.SEARCH_THROTTLE));

    _defineProperty(_assertThisInitialized(_this), "handleSelectEmoji", function (emoji, event) {
      _this.addCommonEmoji(emoji);

      if (event.shiftKey && emoji.skins && emoji.skins.length > 0) {
        var _groupedEmojis;

        _this.setState({
          activeEmoji: emoji,
          activeEmojiIndex: 0,
          activeGroup: _constants.GROUP_KEY_VARIATIONS,
          emojis: emoji.skins,
          groupedEmojis: (_groupedEmojis = {}, _groupedEmojis[_constants.GROUP_KEY_VARIATIONS] = {
            emojis: emoji.skins,
            group: _constants.GROUP_KEY_VARIATIONS
          }, _groupedEmojis),
          scrollToGroup: _constants.GROUP_KEY_VARIATIONS
        });
      } else {
        _this.props.onSelectEmoji(emoji, event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleSelectGroup", function (group, event) {
      _this.setUpdatedState({
        activeGroup: group,
        scrollToGroup: group
      });

      _this.props.onSelectGroup(group, event);
    });

    _defineProperty(_assertThisInitialized(_this), "handleSelectSkinTone", function (skinTone, event) {
      _this.setUpdatedState({
        activeSkinTone: skinTone
      });

      try {
        localStorage.setItem(_constants.KEY_SKIN_TONE, skinTone);
      } catch (error) {}

      _this.props.onSelectSkinTone(skinTone, event);
    });

    var _ref = props,
        blockList = _ref.blockList,
        classNames = _ref.classNames,
        defaultSkinTone = _ref.defaultSkinTone,
        messages = _ref.messages,
        allowList = _ref.allowList;
    _this.allowList = _this.generateAllowBlockMap(allowList);
    _this.blockList = _this.generateAllowBlockMap(blockList);
    var _searchQuery = '';

    var commonEmojis = _this.generateCommonEmojis(_this.getCommonEmojisFromStorage());

    var activeGroup = _this.getActiveGroup(commonEmojis.length > 0);

    var activeSkinTone = _this.getSkinToneFromStorage() || defaultSkinTone;

    var _emojis = _this.generateEmojis(activeSkinTone, _searchQuery);

    var groupedEmojis = _this.groupEmojis(_emojis, commonEmojis, _searchQuery);

    _this.state = {
      activeEmoji: null,
      activeEmojiIndex: -1,
      activeGroup: activeGroup,
      activeSkinTone: activeSkinTone,
      commonEmojis: commonEmojis,
      context: {
        classNames: _extends({}, _constants.CONTEXT_CLASSNAMES, {}, classNames),
        emojiLargeSize: props.emojiLargeSize,
        emojiPadding: props.emojiPadding,
        emojiPath: props.emojiPath,
        emojiSize: props.emojiSize,
        emojiSource: props.emojiSource,
        messages: _extends({}, _constants.CONTEXT_MESSAGES, {}, messages)
      },
      emojis: _emojis,
      groupedEmojis: groupedEmojis,
      scrollToGroup: activeGroup,
      searchQuery: _searchQuery
    };
    return _this;
  }

  var _proto = InternalPicker.prototype;

  _proto.addCommonEmoji = function addCommonEmoji(emoji) {
    var _this$props = this.props,
        commonMode = _this$props.commonMode,
        disableCommonlyUsed = _this$props.disableCommonlyUsed,
        maxCommonlyUsed = _this$props.maxCommonlyUsed;
    var hexcode = emoji.hexcode;

    if (disableCommonlyUsed) {
      return;
    }

    var commonEmojis = this.getCommonEmojisFromStorage();
    var currentIndex = commonEmojis.findIndex(function (common) {
      return common.hexcode === hexcode;
    });

    if (currentIndex === -1) {
      commonEmojis.unshift({
        count: 1,
        hexcode: hexcode
      });
    }

    if (commonMode === _constants.COMMON_MODE_RECENT) {
      if (currentIndex >= 1) {
        var _commonEmojis$splice = commonEmojis.splice(currentIndex, 1),
            common = _commonEmojis$splice[0];

        commonEmojis.unshift({
          count: common.count + 1,
          hexcode: hexcode
        });
      }
    } else if (commonMode === _constants.COMMON_MODE_FREQUENT) {
      if (currentIndex >= 0) {
        commonEmojis[currentIndex].count += 1;
      }

      commonEmojis.sort(function (a, b) {
        return b.count - a.count;
      });
    }

    try {
      localStorage.setItem(_constants.KEY_COMMONLY_USED, JSON.stringify(commonEmojis.slice(0, maxCommonlyUsed)));
    } catch (error) {}

    this.setUpdatedState({
      commonEmojis: this.generateCommonEmojis(commonEmojis)
    });
  };

  _proto.filterOrSearch = function filterOrSearch(emoji, searchQuery) {
    var _ref2 = this.props,
        blockList = _ref2.blockList,
        maxEmojiVersion = _ref2.maxEmojiVersion,
        allowList = _ref2.allowList;

    if (blockList.length > 0 && this.blockList[emoji.hexcode] || allowList.length > 0 && !this.allowList[emoji.hexcode]) {
      return false;
    }

    if (emoji.version && emoji.version > maxEmojiVersion) {
      return false;
    }

    if (!searchQuery) {
      return true;
    }

    var lookups = [];

    if (emoji.canonical_shortcodes) {
      lookups.push.apply(lookups, emoji.canonical_shortcodes);
    }

    if (emoji.tags) {
      lookups.push.apply(lookups, emoji.tags);
    }

    if (emoji.annotation) {
      lookups.push(emoji.annotation);
    }

    if (emoji.emoticon) {
      lookups.push(emoji.emoticon);
    }

    var haystack = lookups.join(' ').toLowerCase();
    return searchQuery.toLowerCase().split(' ').some(function (needle) {
      return haystack.includes(needle);
    });
  };

  _proto.generateEmojis = function generateEmojis(skinTone, searchQuery) {
    var _this2 = this;

    return this.props.emojis.filter(function (emoji) {
      return _this2.filterOrSearch(emoji, searchQuery);
    }).map(function (emoji) {
      return _this2.getSkinnedEmoji(emoji, skinTone);
    });
  };

  _proto.generateAllowBlockMap = function generateAllowBlockMap(list) {
    var map = {};
    list.forEach(function (hexcode) {
      if ("production" !== process.env.NODE_ENV) {
        if (hexcode.match(SKIN_MODIFIER_PATTERN)) {
          console.warn("Hexcode with a skin modifier has been detected: " + hexcode, 'Emojis without skin modifiers are required for allow/block lists.');
        }
      }

      map[hexcode] = true;
    });
    return map;
  };

  _proto.generateCommonEmojis = function generateCommonEmojis(commonEmojis) {
    if (this.props.disableCommonlyUsed) {
      return [];
    }

    var data = this.props.emojiData;
    return commonEmojis.map(function (emoji) {
      return data.EMOJIS[emoji.hexcode];
    }).filter(Boolean);
  };

  _proto.getActiveGroup = function getActiveGroup(hasCommon) {
    var _this$props2 = this.props,
        defaultGroup = _this$props2.defaultGroup,
        disableGroups = _this$props2.disableGroups;
    var group = defaultGroup;

    if (group === _constants.GROUP_KEY_COMMONLY_USED) {
      if (hasCommon) {
        return group;
      }

      group = _constants.GROUP_KEY_SMILEYS_EMOTION;
    }

    return disableGroups ? _constants.GROUP_KEY_NONE : group;
  };

  _proto.getCommonEmojisFromStorage = function getCommonEmojisFromStorage() {
    if (this.props.disableCommonlyUsed) {
      return [];
    }

    var common = localStorage.getItem(_constants.KEY_COMMONLY_USED);
    return common ? JSON.parse(common) : [];
  };

  _proto.getSkinnedEmoji = function getSkinnedEmoji(emoji, skinTone) {
    if (skinTone === _constants.SKIN_KEY_NONE || !emoji.skins) {
      return emoji;
    }

    var toneIndex = _constants.SKIN_TONES.findIndex(function (tone) {
      return tone === skinTone;
    });

    var skinnedEmoji = (emoji.skins || []).find(function (skin) {
      return !!skin.tone && (skin.tone === toneIndex || Array.isArray(skin.tone) && skin.tone.includes(toneIndex));
    });
    return skinnedEmoji || emoji;
  };

  _proto.getSkinToneFromStorage = function getSkinToneFromStorage() {
    var tone = localStorage.getItem(_constants.KEY_SKIN_TONE);

    if (tone) {
      return tone;
    }

    return null;
  };

  _proto.groupEmojis = function groupEmojis(emojis, commonEmojis, searchQuery) {
    var disableGroups = this.props.disableGroups;
    var groups = {};

    if (!searchQuery && commonEmojis.length > 0) {
      groups[_constants.GROUP_KEY_COMMONLY_USED] = {
        emojis: commonEmojis,
        group: _constants.GROUP_KEY_COMMONLY_USED
      };
    }

    emojis.forEach(function (emoji) {
      var group = _constants.GROUP_KEY_NONE;

      if (searchQuery) {
        group = _constants.GROUP_KEY_SEARCH_RESULTS;
      } else if (!disableGroups && typeof emoji.group !== 'undefined') {
        group = _constants.GROUPS[emoji.group];
      }

      if (!group) {
        return;
      }

      if (groups[group]) {
        groups[group].emojis.push(emoji);
      } else {
        groups[group] = {
          emojis: [emoji],
          group: group
        };
      }
    });
    Object.keys(groups).forEach(function (group) {
      if (group !== _constants.GROUP_KEY_COMMONLY_USED) {
        groups[group].emojis.sort(function (a, b) {
          return (a.order || 0) - (b.order || 0);
        });
      }

      if (groups[group].emojis.length === 0) {
        delete groups[group];
      }
    });
    return groups;
  };

  _proto.setUpdatedState = function setUpdatedState(nextState, forceRebuild) {
    var _this3 = this;

    if (forceRebuild === void 0) {
      forceRebuild = false;
    }

    this.setState(function (prevState) {
      var state = _extends({}, prevState, {}, nextState);

      var activeGroup = _this3.getActiveGroup(state.commonEmojis.length > 0);

      var rebuildEmojis = false;

      if ('commonEmojis' in nextState) {
        rebuildEmojis = true;

        if (state.commonEmojis.length === 0) {
          state.activeGroup = activeGroup;
        }
      }

      if ('activeGroup' in nextState) {
        if (state.searchQuery) {
          state.searchQuery = '';
          rebuildEmojis = true;
        }
      }

      if ('activeSkinTone' in nextState) {
        rebuildEmojis = true;
      }

      if ('searchQuery' in nextState) {
        rebuildEmojis = true;
        state.activeGroup = state.searchQuery ? _constants.GROUP_KEY_SEARCH_RESULTS : activeGroup;
        state.scrollToGroup = state.searchQuery ? _constants.GROUP_KEY_SEARCH_RESULTS : activeGroup;
      }

      if (rebuildEmojis || forceRebuild) {
        state.emojis = _this3.generateEmojis(state.activeSkinTone, state.searchQuery);
        state.groupedEmojis = _this3.groupEmojis(state.emojis, state.commonEmojis, state.searchQuery);
        var hasResults = state.searchQuery && state.emojis.length > 0;
        state.activeEmoji = hasResults ? state.emojis[0] : null;
        state.activeEmojiIndex = hasResults ? 0 : -1;
      }

      return state;
    });
  };

  _proto.render = function render() {
    var _ref3 = this.props,
        autoFocus = _ref3.autoFocus,
        clearIcon = _ref3.clearIcon,
        columnCount = _ref3.columnCount,
        commonMode = _ref3.commonMode,
        disableGroups = _ref3.disableGroups,
        disablePreview = _ref3.disablePreview,
        disableSearch = _ref3.disableSearch,
        disableSkinTones = _ref3.disableSkinTones,
        displayOrder = _ref3.displayOrder,
        groupIcons = _ref3.groupIcons,
        hideEmoticon = _ref3.hideEmoticon,
        hideGroupHeaders = _ref3.hideGroupHeaders,
        hideShortcodes = _ref3.hideShortcodes,
        noPreview = _ref3.noPreview,
        noResults = _ref3.noResults,
        rowCount = _ref3.rowCount,
        skinIcons = _ref3.skinIcons,
        stickyGroupHeader = _ref3.stickyGroupHeader,
        virtual = _ref3.virtual,
        onScroll = _ref3.onScroll;
    var _this$state2 = this.state,
        activeEmoji = _this$state2.activeEmoji,
        activeGroup = _this$state2.activeGroup,
        activeSkinTone = _this$state2.activeSkinTone,
        commonEmojis = _this$state2.commonEmojis,
        context = _this$state2.context,
        groupedEmojis = _this$state2.groupedEmojis,
        scrollToGroup = _this$state2.scrollToGroup,
        searchQuery = _this$state2.searchQuery;
    var skinTones = disableSkinTones ? null : _react.default.createElement(_SkinTonePalette.default, {
      key: "skin-tones",
      activeSkinTone: activeSkinTone,
      icons: skinIcons,
      onSelect: this.handleSelectSkinTone
    });
    var components = {
      emojis: _react.default.createElement(_EmojiList.default, _extends({
        key: "emojis"
      }, virtual, {
        activeEmoji: activeEmoji,
        activeGroup: activeGroup,
        clearIcon: clearIcon,
        columnCount: columnCount,
        commonMode: commonMode,
        groupedEmojis: groupedEmojis,
        hideGroupHeaders: hideGroupHeaders,
        noResults: noResults,
        rowCount: rowCount,
        scrollToGroup: scrollToGroup,
        skinTonePalette: displayOrder.includes('skin-tones') ? null : skinTones,
        stickyGroupHeader: stickyGroupHeader,
        onClear: this.handleClear,
        onEnterEmoji: this.handleEnterEmoji,
        onLeaveEmoji: this.handleLeaveEmoji,
        onScroll: onScroll,
        onScrollGroup: this.handleScrollGroup,
        onSelectEmoji: this.handleSelectEmoji
      })),
      groups: disableGroups ? null : _react.default.createElement(_GroupTabs.default, {
        key: "groups",
        activeGroup: activeGroup,
        commonEmojis: commonEmojis,
        commonMode: commonMode,
        icons: groupIcons,
        onSelect: this.handleSelectGroup
      }),
      preview: disablePreview ? null : _react.default.createElement(_PreviewBar.default, {
        key: "preview",
        emoji: activeEmoji,
        hideEmoticon: hideEmoticon,
        hideShortcodes: hideShortcodes,
        noPreview: noPreview
      }),
      search: disableSearch ? null : _react.default.createElement(_SearchBar.default, {
        key: "search",
        autoFocus: autoFocus,
        searchQuery: searchQuery,
        onChange: this.handleSearch,
        onKeyUp: this.handleKeyUp
      }),
      'skin-tones': skinTones
    };
    return _react.default.createElement(_Context.default.Provider, {
      value: context
    }, _react.default.createElement("div", {
      className: context.classNames.picker
    }, displayOrder.map(function (key) {
      return components[key];
    })));
  };

  return InternalPicker;
}(_react.default.PureComponent);

exports.InternalPicker = InternalPicker;

_defineProperty(InternalPicker, "propTypes", {
  allowList: _propTypes.default.arrayOf(_propTypes.default.any),
  autoFocus: _propTypes.default.bool,
  blockList: _propTypes.default.arrayOf(_propTypes.default.any),
  classNames: _propTypes.default.objectOf(_propTypes.default.string),
  clearIcon: _propTypes.default.node,
  columnCount: _propTypes.default.number,
  commonMode: _propTypes.default.any,
  defaultGroup: _propTypes.default.any,
  defaultSkinTone: _propTypes.default.any,
  disableCommonlyUsed: _propTypes.default.bool,
  disableGroups: _propTypes.default.bool,
  disablePreview: _propTypes.default.bool,
  disableSearch: _propTypes.default.bool,
  disableSkinTones: _propTypes.default.bool,
  displayOrder: _propTypes.default.arrayOf(_propTypes.default.any),
  emojiLargeSize: _propTypes.default.number.isRequired,
  emojiPadding: _propTypes.default.number,
  emojiPath: _propTypes.default.any.isRequired,
  emojiSize: _propTypes.default.number.isRequired,
  groupIcons: _propTypes.default.objectOf(_propTypes.default.node),
  hideEmoticon: _propTypes.default.bool,
  hideGroupHeaders: _propTypes.default.bool,
  hideShortcodes: _propTypes.default.bool,
  maxCommonlyUsed: _propTypes.default.number,
  maxEmojiVersion: _propTypes.default.number
});

_defineProperty(InternalPicker, "defaultProps", {
  allowList: [],
  autoFocus: false,
  blockList: [],
  classNames: {},
  clearIcon: null,
  columnCount: 10,
  commonMode: _constants.COMMON_MODE_RECENT,
  defaultGroup: _constants.GROUP_KEY_COMMONLY_USED,
  defaultSkinTone: _constants.SKIN_KEY_NONE,
  disableCommonlyUsed: false,
  disableGroups: false,
  disablePreview: false,
  disableSearch: false,
  disableSkinTones: false,
  displayOrder: ['preview', 'emojis', 'groups', 'search'],
  emojiPadding: 0,
  groupIcons: {},
  hideEmoticon: false,
  hideGroupHeaders: false,
  hideShortcodes: false,
  maxCommonlyUsed: 30,
  maxEmojiVersion: 5,
  messages: {},
  noPreview: null,
  noResults: null,
  onHoverEmoji: function onHoverEmoji() {},
  onScroll: function onScroll() {},
  onScrollGroup: function onScrollGroup() {},
  onSearch: function onSearch() {},
  onSelectEmoji: function onSelectEmoji() {},
  onSelectGroup: function onSelectGroup() {},
  onSelectSkinTone: function onSelectSkinTone() {},
  rowCount: 8,
  skinIcons: {},
  stickyGroupHeader: false,
  virtual: {}
});

function Picker(_ref4) {
  var compact = _ref4.compact,
      locale = _ref4.locale,
      throwErrors = _ref4.throwErrors,
      version = _ref4.version,
      props = _objectWithoutPropertiesLoose(_ref4, ["compact", "locale", "throwErrors", "version"]);

  var _useEmojiData = (0, _interweaveEmoji.useEmojiData)({
    compact: compact,
    locale: locale,
    throwErrors: throwErrors,
    version: version
  }),
      emojis = _useEmojiData[0],
      source = _useEmojiData[1],
      data = _useEmojiData[2];

  if (emojis.length === 0) {
    return null;
  }

  return _react.default.createElement(InternalPicker, _extends({}, props, {
    emojis: emojis,
    emojiData: data,
    emojiSource: source
  }));
}

Picker.propTypes = {
  allowList: _propTypes.default.arrayOf(_propTypes.default.any),
  autoFocus: _propTypes.default.bool,
  blockList: _propTypes.default.arrayOf(_propTypes.default.any),
  classNames: _propTypes.default.objectOf(_propTypes.default.string),
  clearIcon: _propTypes.default.node,
  columnCount: _propTypes.default.number,
  commonMode: _propTypes.default.any,
  defaultGroup: _propTypes.default.any,
  defaultSkinTone: _propTypes.default.any,
  disableCommonlyUsed: _propTypes.default.bool,
  disableGroups: _propTypes.default.bool,
  disablePreview: _propTypes.default.bool,
  disableSearch: _propTypes.default.bool,
  disableSkinTones: _propTypes.default.bool,
  displayOrder: _propTypes.default.arrayOf(_propTypes.default.any),
  emojiLargeSize: _propTypes.default.number.isRequired,
  emojiPadding: _propTypes.default.number,
  emojiPath: _propTypes.default.any.isRequired,
  emojiSize: _propTypes.default.number.isRequired,
  groupIcons: _propTypes.default.objectOf(_propTypes.default.node),
  hideEmoticon: _propTypes.default.bool,
  hideGroupHeaders: _propTypes.default.bool,
  hideShortcodes: _propTypes.default.bool,
  maxCommonlyUsed: _propTypes.default.number,
  maxEmojiVersion: _propTypes.default.number
};