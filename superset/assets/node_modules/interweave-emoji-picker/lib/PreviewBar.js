"use strict";

exports.__esModule = true;
exports.default = PreviewBar;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _interweaveEmoji = require("interweave-emoji");

var _Context = _interopRequireDefault(require("./Context"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TITLE_REGEX = /(^|:|\.)\s?[a-z]/g;

function formatTitle(title) {
  return title.replace(TITLE_REGEX, function (token) {
    return token.toUpperCase();
  });
}

function PreviewBar(_ref) {
  var emoji = _ref.emoji,
      hideEmoticon = _ref.hideEmoticon,
      hideShortcodes = _ref.hideShortcodes,
      noPreview = _ref.noPreview;

  var _useContext = (0, _react.useContext)(_Context.default),
      classNames = _useContext.classNames,
      emojiLargeSize = _useContext.emojiLargeSize,
      emojiPath = _useContext.emojiPath,
      emojiSource = _useContext.emojiSource,
      messages = _useContext.messages;

  if (!emoji) {
    var preview = noPreview || messages.noPreview;
    return _react.default.createElement("section", {
      className: classNames.preview
    }, preview && _react.default.createElement("div", {
      className: classNames.noPreview
    }, preview));
  }

  var title = emoji.annotation || emoji.name;
  var subtitle = [];

  if (!hideEmoticon && emoji.emoticon) {
    subtitle.push(emoji.emoticon);
  }

  if (!hideShortcodes && emoji.canonical_shortcodes) {
    subtitle.push.apply(subtitle, emoji.canonical_shortcodes);
  }

  return _react.default.createElement("section", {
    className: classNames.preview
  }, _react.default.createElement("div", {
    className: classNames.previewEmoji
  }, _react.default.createElement(_interweaveEmoji.Emoji, {
    emojiLargeSize: emojiLargeSize,
    emojiPath: emojiPath,
    emojiSource: emojiSource,
    enlargeEmoji: true,
    hexcode: emoji.hexcode
  })), _react.default.createElement("div", {
    className: classNames.previewContent
  }, title && _react.default.createElement("div", {
    className: classNames.previewTitle
  }, formatTitle(title), emoji.skins && emoji.skins.length > 0 && _react.default.createElement("span", {
    className: classNames.previewShiftMore
  }, "(+", emoji.skins.length, ")")), subtitle.length > 0 && _react.default.createElement("div", {
    className: classNames.previewSubtitle
  }, subtitle.join(' '))));
}

PreviewBar.propTypes = {
  emoji: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.oneOf([null])]),
  hideEmoticon: _propTypes.default.bool.isRequired,
  hideShortcodes: _propTypes.default.bool.isRequired,
  noPreview: _propTypes.default.node
};