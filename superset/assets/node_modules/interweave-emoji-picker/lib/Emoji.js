"use strict";

exports.__esModule = true;
exports.default = Emoji;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _interweaveEmoji = require("interweave-emoji");

var _Context = _interopRequireDefault(require("./Context"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Emoji(_ref) {
  var active = _ref.active,
      emoji = _ref.emoji,
      onEnter = _ref.onEnter,
      onLeave = _ref.onLeave,
      onSelect = _ref.onSelect;

  var _useContext = (0, _react.useContext)(_Context.default),
      classNames = _useContext.classNames,
      emojiPadding = _useContext.emojiPadding,
      emojiPath = _useContext.emojiPath,
      emojiSize = _useContext.emojiSize,
      emojiSource = _useContext.emojiSource;

  var dimension = emojiPadding + emojiPadding + emojiSize;
  var className = [classNames.emoji];

  if (active) {
    className.push(classNames.emojiActive);
  }

  var handleClick = function handleClick(event) {
    event.stopPropagation();
    onSelect(emoji, event);
  };

  var handleEnter = function handleEnter(event) {
    event.stopPropagation();
    onEnter(emoji, event);
  };

  var handleLeave = function handleLeave(event) {
    event.stopPropagation();
    onLeave(emoji, event);
  };

  return _react.default.createElement("button", {
    key: emoji.hexcode,
    className: className.join(' '),
    style: {
      height: dimension,
      padding: emojiPadding,
      width: dimension
    },
    title: emoji.annotation,
    type: "button",
    onClick: handleClick,
    onMouseEnter: handleEnter,
    onMouseLeave: handleLeave
  }, _react.default.createElement(_interweaveEmoji.Emoji, {
    emojiPath: emojiPath,
    emojiSize: emojiSize,
    emojiSource: emojiSource,
    hexcode: emoji.hexcode
  }));
}

Emoji.propTypes = {
  active: _propTypes.default.bool.isRequired,
  emoji: _propTypes.default.any.isRequired,
  onEnter: _propTypes.default.func.isRequired,
  onLeave: _propTypes.default.func.isRequired,
  onSelect: _propTypes.default.func.isRequired
};