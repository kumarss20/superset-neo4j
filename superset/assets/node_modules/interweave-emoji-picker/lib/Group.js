"use strict";

exports.__esModule = true;
exports.default = Group;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _camelCase = _interopRequireDefault(require("lodash/camelCase"));

var _constants = require("./constants");

var _Context = _interopRequireDefault(require("./Context"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Group(_ref) {
  var active = _ref.active,
      children = _ref.children,
      commonMode = _ref.commonMode,
      group = _ref.group,
      onSelect = _ref.onSelect;

  var _useContext = (0, _react.useContext)(_Context.default),
      classNames = _useContext.classNames,
      messages = _useContext.messages;

  var key = (0, _camelCase.default)(group === _constants.GROUP_KEY_COMMONLY_USED ? commonMode : group);
  var className = [classNames.group];

  if (active) {
    className.push(classNames.groupActive);
  }

  var handleClick = function handleClick(event) {
    event.stopPropagation();
    onSelect(group, event);
  };

  return _react.default.createElement("button", {
    className: className.join(' '),
    title: messages[key],
    type: "button",
    onClick: handleClick
  }, children);
}

Group.propTypes = {
  active: _propTypes.default.bool.isRequired,
  children: _propTypes.default.node.isRequired,
  commonMode: _propTypes.default.any.isRequired,
  group: _propTypes.default.any.isRequired,
  onSelect: _propTypes.default.func.isRequired
};