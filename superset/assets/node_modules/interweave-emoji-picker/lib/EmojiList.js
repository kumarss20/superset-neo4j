"use strict";

exports.__esModule = true;
exports.default = EmojiList;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactWindow = require("react-window");

var _chunk = _interopRequireDefault(require("lodash/chunk"));

var _EmojiListHeader = _interopRequireDefault(require("./EmojiListHeader"));

var _EmojiListRow = _interopRequireDefault(require("./EmojiListRow"));

var _constants = require("./constants");

var _Context = _interopRequireDefault(require("./Context"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function EmojiList(_ref) {
  var activeGroup = _ref.activeGroup,
      columnCount = _ref.columnCount,
      _ref$columnPadding = _ref.columnPadding,
      columnPadding = _ref$columnPadding === void 0 ? 0 : _ref$columnPadding,
      groupedEmojis = _ref.groupedEmojis,
      hideGroupHeaders = _ref.hideGroupHeaders,
      noResults = _ref.noResults,
      rowCount = _ref.rowCount,
      _ref$rowPadding = _ref.rowPadding,
      rowPadding = _ref$rowPadding === void 0 ? 0 : _ref$rowPadding,
      scrollToGroup = _ref.scrollToGroup,
      stickyGroupHeader = _ref.stickyGroupHeader,
      onScroll = _ref.onScroll,
      onScrollGroup = _ref.onScrollGroup,
      rowProps = _objectWithoutPropertiesLoose(_ref, ["activeGroup", "columnCount", "columnPadding", "groupedEmojis", "hideGroupHeaders", "noResults", "rowCount", "rowPadding", "scrollToGroup", "stickyGroupHeader", "onScroll", "onScrollGroup"]);

  var _useContext = (0, _react.useContext)(_Context.default),
      classNames = _useContext.classNames,
      emojiPadding = _useContext.emojiPadding,
      emojiSize = _useContext.emojiSize,
      messages = _useContext.messages;

  var _useState = (0, _react.useState)([]),
      rows = _useState[0],
      setRows = _useState[1];

  var _useState2 = (0, _react.useState)({}),
      indices = _useState2[0],
      setIndices = _useState2[1];

  var ref = (0, _react.useRef)(null);
  var size = emojiSize + emojiPadding * 2;
  var rowHeight = size + rowPadding * 2;
  var columnWidth = size + columnPadding * 2;
  (0, _react.useEffect)(function () {
    var virtualRows = [];
    var nextIndices = {
      '': -1
    };
    Object.keys(groupedEmojis).forEach(function (group) {
      nextIndices[group] = virtualRows.length;

      if (group === _constants.GROUP_KEY_COMPONENT) {
        return;
      }

      if (!hideGroupHeaders) {
        virtualRows.push(group);
      }

      virtualRows.push.apply(virtualRows, (0, _chunk.default)(groupedEmojis[group].emojis, columnCount));
    });
    setRows(virtualRows);
    setIndices(nextIndices);
  }, [columnCount, groupedEmojis, hideGroupHeaders]);
  (0, _react.useEffect)(function () {
    if (ref.current && scrollToGroup && indices[scrollToGroup]) {
      ref.current.scrollToItem(indices[scrollToGroup], 'start');
    }
  }, [scrollToGroup, indices]);

  if (rows.length === 0) {
    return _react.default.createElement("div", {
      className: classNames.noResults
    }, noResults || messages.noResults);
  }

  var handleRendered = function handleRendered(_ref2) {
    var visibleStartIndex = _ref2.visibleStartIndex;
    var lastGroup = '';
    Object.keys(indices).some(function (group) {
      var index = indices[group];

      if (index === 0 && visibleStartIndex === 0) {
        lastGroup = group;
        return true;
      }

      if (stickyGroupHeader && index >= visibleStartIndex + 1) {
        return true;
      } else if (!stickyGroupHeader && index >= visibleStartIndex + rowCount / 2) {
        return true;
      }

      lastGroup = group;
      return false;
    });

    if (lastGroup && lastGroup !== activeGroup) {
      onScrollGroup(lastGroup);
    }
  };

  return _react.default.createElement("div", {
    className: classNames.emojis
  }, _react.default.createElement(_reactWindow.FixedSizeList, {
    ref: ref,
    className: classNames.emojisList,
    height: rowHeight * rowCount,
    itemCount: rows.length,
    itemData: rows,
    itemSize: rowHeight,
    overscanCount: rowCount / 2,
    width: columnWidth * columnCount,
    onItemsRendered: handleRendered,
    onScroll: onScroll
  }, function (props) {
    return _react.default.createElement(_EmojiListRow.default, _extends({}, rowProps, props));
  }), stickyGroupHeader && activeGroup !== _constants.GROUP_KEY_NONE && _react.default.createElement(_EmojiListHeader.default, _extends({}, rowProps, {
    sticky: true,
    group: activeGroup
  })));
}

EmojiList.propTypes = {
  activeGroup: _propTypes.default.any.isRequired,
  columnCount: _propTypes.default.number.isRequired,
  columnPadding: _propTypes.default.number,
  groupedEmojis: _propTypes.default.any.isRequired,
  hideGroupHeaders: _propTypes.default.bool.isRequired,
  noResults: _propTypes.default.node,
  onScroll: _propTypes.default.func.isRequired,
  onScrollGroup: _propTypes.default.func.isRequired,
  rowCount: _propTypes.default.number.isRequired,
  rowPadding: _propTypes.default.number,
  scrollToGroup: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.oneOf([''])]),
  stickyGroupHeader: _propTypes.default.bool
};