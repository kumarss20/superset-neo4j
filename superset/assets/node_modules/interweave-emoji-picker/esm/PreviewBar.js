import _pt from "prop-types";
import React, { useContext } from 'react';
import { Emoji as EmojiCharacter } from 'interweave-emoji';
import Context from './Context';
var TITLE_REGEX = /(^|:|\.)\s?[a-z]/g;

function formatTitle(title) {
  return title.replace(TITLE_REGEX, function (token) {
    return token.toUpperCase();
  });
}

export default function PreviewBar(_ref) {
  var emoji = _ref.emoji,
      hideEmoticon = _ref.hideEmoticon,
      hideShortcodes = _ref.hideShortcodes,
      noPreview = _ref.noPreview;

  var _useContext = useContext(Context),
      classNames = _useContext.classNames,
      emojiLargeSize = _useContext.emojiLargeSize,
      emojiPath = _useContext.emojiPath,
      emojiSource = _useContext.emojiSource,
      messages = _useContext.messages;

  if (!emoji) {
    var preview = noPreview || messages.noPreview;
    return React.createElement("section", {
      className: classNames.preview
    }, preview && React.createElement("div", {
      className: classNames.noPreview
    }, preview));
  }

  var title = emoji.annotation || emoji.name;
  var subtitle = [];

  if (!hideEmoticon && emoji.emoticon) {
    subtitle.push(emoji.emoticon);
  }

  if (!hideShortcodes && emoji.canonical_shortcodes) {
    subtitle.push.apply(subtitle, emoji.canonical_shortcodes);
  }

  return React.createElement("section", {
    className: classNames.preview
  }, React.createElement("div", {
    className: classNames.previewEmoji
  }, React.createElement(EmojiCharacter, {
    emojiLargeSize: emojiLargeSize,
    emojiPath: emojiPath,
    emojiSource: emojiSource,
    enlargeEmoji: true,
    hexcode: emoji.hexcode
  })), React.createElement("div", {
    className: classNames.previewContent
  }, title && React.createElement("div", {
    className: classNames.previewTitle
  }, formatTitle(title), emoji.skins && emoji.skins.length > 0 && React.createElement("span", {
    className: classNames.previewShiftMore
  }, "(+", emoji.skins.length, ")")), subtitle.length > 0 && React.createElement("div", {
    className: classNames.previewSubtitle
  }, subtitle.join(' '))));
}
PreviewBar.propTypes = {
  emoji: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
  hideEmoticon: _pt.bool.isRequired,
  hideShortcodes: _pt.bool.isRequired,
  noPreview: _pt.node
};