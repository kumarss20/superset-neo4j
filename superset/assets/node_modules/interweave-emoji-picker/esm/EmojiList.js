import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext, useEffect, useState, useRef } from 'react';
import { FixedSizeList as List } from 'react-window';
import chunk from 'lodash/chunk';
import EmojiListHeader from './EmojiListHeader';
import EmojiListRow from './EmojiListRow';
import { GROUP_KEY_NONE, GROUP_KEY_COMPONENT } from './constants';
import Context from './Context';
export default function EmojiList(_ref) {
  var activeGroup = _ref.activeGroup,
      columnCount = _ref.columnCount,
      _ref$columnPadding = _ref.columnPadding,
      columnPadding = _ref$columnPadding === void 0 ? 0 : _ref$columnPadding,
      groupedEmojis = _ref.groupedEmojis,
      hideGroupHeaders = _ref.hideGroupHeaders,
      noResults = _ref.noResults,
      rowCount = _ref.rowCount,
      _ref$rowPadding = _ref.rowPadding,
      rowPadding = _ref$rowPadding === void 0 ? 0 : _ref$rowPadding,
      scrollToGroup = _ref.scrollToGroup,
      stickyGroupHeader = _ref.stickyGroupHeader,
      onScroll = _ref.onScroll,
      onScrollGroup = _ref.onScrollGroup,
      rowProps = _objectWithoutPropertiesLoose(_ref, ["activeGroup", "columnCount", "columnPadding", "groupedEmojis", "hideGroupHeaders", "noResults", "rowCount", "rowPadding", "scrollToGroup", "stickyGroupHeader", "onScroll", "onScrollGroup"]);

  var _useContext = useContext(Context),
      classNames = _useContext.classNames,
      emojiPadding = _useContext.emojiPadding,
      emojiSize = _useContext.emojiSize,
      messages = _useContext.messages;

  var _useState = useState([]),
      rows = _useState[0],
      setRows = _useState[1];

  var _useState2 = useState({}),
      indices = _useState2[0],
      setIndices = _useState2[1];

  var ref = useRef(null);
  var size = emojiSize + emojiPadding * 2;
  var rowHeight = size + rowPadding * 2;
  var columnWidth = size + columnPadding * 2;
  useEffect(function () {
    var virtualRows = [];
    var nextIndices = {
      '': -1
    };
    Object.keys(groupedEmojis).forEach(function (group) {
      nextIndices[group] = virtualRows.length;

      if (group === GROUP_KEY_COMPONENT) {
        return;
      }

      if (!hideGroupHeaders) {
        virtualRows.push(group);
      }

      virtualRows.push.apply(virtualRows, chunk(groupedEmojis[group].emojis, columnCount));
    });
    setRows(virtualRows);
    setIndices(nextIndices);
  }, [columnCount, groupedEmojis, hideGroupHeaders]);
  useEffect(function () {
    if (ref.current && scrollToGroup && indices[scrollToGroup]) {
      ref.current.scrollToItem(indices[scrollToGroup], 'start');
    }
  }, [scrollToGroup, indices]);

  if (rows.length === 0) {
    return React.createElement("div", {
      className: classNames.noResults
    }, noResults || messages.noResults);
  }

  var handleRendered = function handleRendered(_ref2) {
    var visibleStartIndex = _ref2.visibleStartIndex;
    var lastGroup = '';
    Object.keys(indices).some(function (group) {
      var index = indices[group];

      if (index === 0 && visibleStartIndex === 0) {
        lastGroup = group;
        return true;
      }

      if (stickyGroupHeader && index >= visibleStartIndex + 1) {
        return true;
      } else if (!stickyGroupHeader && index >= visibleStartIndex + rowCount / 2) {
        return true;
      }

      lastGroup = group;
      return false;
    });

    if (lastGroup && lastGroup !== activeGroup) {
      onScrollGroup(lastGroup);
    }
  };

  return React.createElement("div", {
    className: classNames.emojis
  }, React.createElement(List, {
    ref: ref,
    className: classNames.emojisList,
    height: rowHeight * rowCount,
    itemCount: rows.length,
    itemData: rows,
    itemSize: rowHeight,
    overscanCount: rowCount / 2,
    width: columnWidth * columnCount,
    onItemsRendered: handleRendered,
    onScroll: onScroll
  }, function (props) {
    return React.createElement(EmojiListRow, _extends({}, rowProps, props));
  }), stickyGroupHeader && activeGroup !== GROUP_KEY_NONE && React.createElement(EmojiListHeader, _extends({}, rowProps, {
    sticky: true,
    group: activeGroup
  })));
}
EmojiList.propTypes = {
  activeGroup: _pt.any.isRequired,
  columnCount: _pt.number.isRequired,
  columnPadding: _pt.number,
  groupedEmojis: _pt.any.isRequired,
  hideGroupHeaders: _pt.bool.isRequired,
  noResults: _pt.node,
  onScroll: _pt.func.isRequired,
  onScrollGroup: _pt.func.isRequired,
  rowCount: _pt.number.isRequired,
  rowPadding: _pt.number,
  scrollToGroup: _pt.oneOfType([_pt.any, _pt.oneOf([''])]),
  stickyGroupHeader: _pt.bool
};