import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import Link from './Link';
export default function Url(_ref) {
  var children = _ref.children,
      url = _ref.url,
      urlParts = _ref.urlParts,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "url", "urlParts"]);

  var href = url;

  if (!href.match(/^https?:\/\//)) {
    href = "http://" + href;
  }

  return React.createElement(Link, _extends({}, props, {
    href: href
  }), children);
}
Url.propTypes = {
  children: _pt.any.isRequired,
  url: _pt.string.isRequired,
  urlParts: _pt.shape({
    auth: _pt.string.isRequired,
    fragment: _pt.string.isRequired,
    host: _pt.string.isRequired,
    path: _pt.string.isRequired,
    port: _pt.oneOfType([_pt.string, _pt.number]).isRequired,
    query: _pt.string.isRequired,
    scheme: _pt.string.isRequired
  }).isRequired
};