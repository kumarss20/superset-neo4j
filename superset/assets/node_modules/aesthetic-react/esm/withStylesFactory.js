function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext } from 'react';
import hoistNonReactStatics from 'hoist-non-react-statics';
import uuid from 'uuid/v4';
import useStylesFactory from './useStylesFactory';
import ThemeContext from './ThemeContext';
export default function withStylesFactory(aesthetic) {
  var useStyles = useStylesFactory(aesthetic);
  return function withStyles(styleSheet, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$cxPropName = _options.cxPropName,
        cxPropName = _options$cxPropName === void 0 ? aesthetic.options.cxPropName : _options$cxPropName,
        _options$extendable = _options.extendable,
        extendable = _options$extendable === void 0 ? aesthetic.options.extendable : _options$extendable,
        _options$extendFrom = _options.extendFrom,
        extendFrom = _options$extendFrom === void 0 ? '' : _options$extendFrom,
        _options$passThemePro = _options.passThemeProp,
        passThemeProp = _options$passThemePro === void 0 ? aesthetic.options.passThemeProp : _options$passThemePro,
        _options$stylesPropNa = _options.stylesPropName,
        stylesPropName = _options$stylesPropNa === void 0 ? aesthetic.options.stylesPropName : _options$stylesPropNa,
        _options$themePropNam = _options.themePropName,
        themePropName = _options$themePropNam === void 0 ? aesthetic.options.themePropName : _options$themePropNam;
    return function withStylesComposer(WrappedComponent) {
      var baseName = WrappedComponent.displayName || WrappedComponent.name;
      var styleName = baseName + "-" + uuid();
      aesthetic.registerStyleSheet(styleName, styleSheet, extendFrom);
      var WithStyles = React.memo(function WithStyles(_ref) {
        var _extraProps;

        var wrappedRef = _ref.wrappedRef,
            props = _objectWithoutPropertiesLoose(_ref, ["wrappedRef"]);

        var themeName = useContext(ThemeContext);

        var _useStyles = useStyles(styleSheet, {
          styleName: styleName
        }),
            styles = _useStyles[0],
            cx = _useStyles[1];

        var extraProps = (_extraProps = {}, _extraProps[cxPropName] = cx, _extraProps[stylesPropName] = styles, _extraProps.ref = wrappedRef, _extraProps);

        if (passThemeProp) {
          extraProps[themePropName] = aesthetic.getTheme(themeName);
        }

        return React.createElement(WrappedComponent, _extends({}, props, extraProps));
      });
      hoistNonReactStatics(WithStyles, WrappedComponent);
      WithStyles.displayName = "withStyles(" + baseName + ")";
      WithStyles.styleName = styleName;
      WithStyles.WrappedComponent = WrappedComponent;

      WithStyles.extendStyles = function (customStyleSheet, extendOptions) {
        if ("production" !== process.env.NODE_ENV) {
          if (!extendable) {
            throw new Error(baseName + " is not extendable.");
          }
        }

        return withStyles(customStyleSheet, _extends({}, options, {}, extendOptions, {
          extendFrom: styleName
        }))(WrappedComponent);
      };

      return WithStyles;
    };
  };
}