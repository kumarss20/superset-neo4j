function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext } from 'react';
import hoistNonReactStatics from 'hoist-non-react-statics';
import ThemeContext from './ThemeContext';
export default function withThemeFactory(aesthetic) {
  return function withTheme(options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$themePropNam = _options.themePropName,
        themePropName = _options$themePropNam === void 0 ? aesthetic.options.themePropName : _options$themePropNam;
    return function withThemeComposer(WrappedComponent) {
      var baseName = WrappedComponent.displayName || WrappedComponent.name;

      function WithTheme(_ref) {
        var _extraProps;

        var wrappedRef = _ref.wrappedRef,
            props = _objectWithoutPropertiesLoose(_ref, ["wrappedRef"]);

        var themeName = useContext(ThemeContext);
        var extraProps = (_extraProps = {}, _extraProps[themePropName] = aesthetic.getTheme(themeName), _extraProps.ref = wrappedRef, _extraProps);
        return React.createElement(WrappedComponent, _extends({}, props, extraProps));
      }

      hoistNonReactStatics(WithTheme, WrappedComponent);
      WithTheme.displayName = "withTheme(" + baseName + ")";
      WithTheme.WrappedComponent = WrappedComponent;
      return WithTheme;
    };
  };
}